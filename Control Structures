## CONTROL STRUCTURES

mystery_value = 1

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#All of the indentation has been removed from this program. 
#Fix the program by correcting the indentation levels. Note
#that you should add indentation by adding FOUR SPACES to the
#start of the lines you want to indent. If you use Tab, you
#will receive an IndentationError in your output.
#
#Hint: you'll learn more about conditionals in the next
#chapter, but for now, all you need to know is that if a line
#is indented under another line, it's controlled by that line.

if mystery_value > 0:
    print("This line should only run if 'mystery_value' is GREATER than 0.")
    print("This line should only be printed if the above line is printed.")
print("This line should always be printed.")
if 0 > mystery_value:
    print("This line should only run if 'mystery_value' is LESS than 0.")
print("This line should always be printed.\n")

###

mystery_value = -1

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Notice that when you run this code, you encounter an error.
#Instead of this error, we want this code to print "Boo :("
#(without the quotes) if mystery_value is not greater than 0.
#
#Fix this error WITHOUT modifying the existing code. You can
#fix this error by only adding some code before the existing
#code below.

#Make any changes or additions here!
result = "Boo :("

#Don't change any of the code below!
if mystery_value > 0:
    print("mystery_value is greater than 0.")
    result = "Yay!"
else:
    print("mystery_value is less than 0.")

print(result)

###

mystery_int_1 = 15
mystery_int_2 = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variables below hold two integers, mystery_int_1 and
#mystery_int_2. Complete this program below such that it
#prints "Factors!" if either of the numbers is a factor of
#the other. If neither number is a factor of the other,
#do not print anything.
#
#Hint: You can do this with just one conditional statement
#by using the logical expressions we learned earlier (and,
#or, and not). You'll also use the modulus operator we
#learned in Chapter 2.4.

#Add your code here!
if mystery_int_1 % mystery_int_2 == 0 or mystery_int_2 % mystery_int_1 == 0:
    print("Factors!")

###

mystery_state = "Georgia"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#It's snowing!
#
#The variable above holds the name of the state that you're
#in (hypothetically). Complete the code below so that it
#prints the following messages depending on what state you're
#in:
#
# - "School isn't cancelled." if we're in New Jersey
# - "School is postponed." if we're in North Carolina
# - "School is cancelled!" if we're in Georgia
# - "idk wear a sweater" if we're in any other state (or if
#   the value doesn't represent a valid state).

#Add your code here!
if mystery_state == "New Jersey":
    print("School isn't cancelled.")
elif mystery_state == "North Carolina":
    print("School is postponed.")
elif mystery_state == "Georgia":
    print("School is cancelled!")
else:
    print("idk wear a sweater")

###

temperature = -3.7
celsius = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above are given two variables. temperature is a float that
#holds a temperature. celsius is a boolean that represents
#whether the temperature is in Celsius; if it's False, then
#the given temperature is actually in Fahrenheit.
#
#Add some code below that prints "Freezing" if the values
#above represent a freezing temperature, and "Not freezing"
#if they don't.
#
#In Celsius, freezing is less than or equal to 0 degrees.
#In Fahrenheit, freezing is less than or equal to 32 degrees.

#Add your code here!
if (temperature <= 0 and celsius == True) or (temperature <= 32 and celsius == False):
    print("Freezing")
else:
    print("Not freezing")

###

mystery_string = "zizazzle"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variable above creates a string. Add some code below
#that will print based on the maximum number of consecutive
#z's in the string:
#
# - If z appears three or more times in a row, print "I'm sleepy..."
# - If z appears two times in a row, print "I love ZZ Top!"
# - If z appears once, print "One is the loneliest number."
# - If z does not appear, print "Who needs z anyway?"
#
#The message you print should correspond to the most
#consecutive z's: in the original value of mystery_string,
#for example, you'd print "I love ZZ Top!" because there are
#two consecutive z's, even though there are also some
#individual z's.
#
#Ignore upper-case z's -- only look for lower-case z's.
#
#Hint: Remember the 'in' operator! It returns true if the
#first string is found within the second string. For example,
#"bog" in "boggle" would return True, but "bog" in "artemis"
#would return False.

#Add your code here!
if "zzz" in mystery_string:
    print("I'm sleepy...")
elif "zz" in mystery_string:
    print("I love ZZ Top!")
elif "z" in mystery_string:
    print("One is the loneliest number.")
else:
    print("Who needs z anyway?")

###

team_1 = "Georgia Tech"
team_1_score = 28
team_2 = "Georgia"
team_2_score = 27

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above we've created four variables: two team names and two
#scores. A team wins if their score is greater than the other
#team's score.
#
#Add to the code below. To print a messages like these
#depending on the values:
#
# - If one team beat the other, print:
#     "[winner] beat [loser] by [margin]"
# - If neither team won, print:
#     "[team_1] played [team_2] and it was a tie"
#
#For example, with the original values in this code, you
#should print "Georgia Tech beat Georgia by 1"
#
#Hint: to make this easier, create three variables: winner,
#loser, and margin. Then, find their values before worrying
#about printing the final message.

#Add your code here!
difference_1 = str(team_1_score - team_2_score)
difference_2 = str(team_2_score - team_1_score)
if team_1_score > team_2_score:
    print(team_1 + " beat " + team_2 + " by " + difference_1)
elif team_2_score > team_1_score:
    print(team_2 + " beat " + team_1 + " by " + difference_2)
else:
    print(team_1 + " played " + team_2 + " and it was a tie ")

###

item = "quesadilla"
meat = "steak"
queso = True
guacamole = True
double_meat = False

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Let's further expand our previous program to cover a broader
#menu variety. Instead of just burritoes, now the program
#should cover three menu items: quesadillas, burritoes, and
#nachos. Instead of separate booleans for steak and pork,
#we instead have a string that could be "steak", "pork",
#"chicken", "tofu", and "beef". We still have booleans for
#queso and guacamole, but we also have a boolean for double
#meat.
#
#Your code should calculate the price as follows:
#
# - The base price for a quesadilla is 4.00, for nachos is
#   4.50, and for burritoes is 5.00.
# - If meat is steak or pork, add 0.50. Any other meat adds
#   no money to the price.
# - guacamole always adds 1.00 to the price.
# - queso adds 1.00 to the price UNLESS the item is nachos,
#   in which case it adds nothing.
# - double_meat adds 1.50 if the meat is steak or pork, or
#   1.00 otherwise.

if item == "quesadilla":
    base_price = 4.0
if item == "nachos":
    base_price = 4.5
if item == "burrito":
    base_price = 5.0
    
if (meat == "steak" or meat == "pork") and not double_meat:
    base_price += 0.5
if (meat == "steak" or meat == "pork") and double_meat:
    base_price += 1.5
if (meat == "chicken" or meat == "tofu" or meat == "beef") and double_meat:
    base_price += 1.0
    
if guacamole:
    base_price += 1.0

if queso and not item == "nachos":
    base_price += 1.0
    
print(base_price)

###

sunny = True
windy = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Below, we've gone ahead and written some code that uses a
#conditional to print a message based on the variables above.
#Revise this code so that it uses nested conditionals instead
#of the 'and' operator. There should be _no_ instances of the
#'and' reserved word in your code, but it should behave the
#same as it did originally.

if sunny:
    if not windy:
        print("Wear a hat!")
    else:
        print("Enjoy the breeze!")

#if sunny and not windy:
#    print("Wear a hat!")

###

entered = "abc123"
password = "abc123"
tries = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above we've created three variables representing an attempt
#to enter a password. Add some code below that will print the
#result of this check:
#
# - "Login successful." if entered is the same as password
#   and tries is less than or equal to 3.
# - "Incorrect password." if entered is not the same as 
#   password, but tries is less than or equal to 3.
# - "Tries exceeded." if tries is greater than 3.
#
#You don't need to worry about incrementing tries if the
#password is incorrect.

#Add your code here!
if tries <= 3:
    if entered == password:
        print("Login successful.")
    else:
        print("Incorrect password.")
else:
    print("Tries exceeded.")

###

balance = 20.0  
salesTax = 1.08 
cardholderName = "David Joyner"
trustedVendors = ["Maria's", "Bob's", "Vrushali's", "Ling's", "Tia's"]

purchasePrice = 19.0
customerName = "David Joyner"
vendor = "Freddy's"
overdraftProtection = True

#This nested conditional checks whether the balance is less than or
#equal to the total price and overdraft protection is not available;
#otherwise, whether the cardholder is not also the customer; and
#otherwise, whether the vendor is not trusted.
if balance <= purchasePrice * salesTax and not overdraftProtection:
    print("Purchase not approved; no funds or overdraft protection.")
else:
    if not cardholderName == customerName:
        print("Purchase not approved; invalid customer.")
    else:
        if not vendor in trustedVendors:
            print("Purchase not approved; untrusted vendor.")
        else:
            print("Purchase approved!")
print("Done!")

###

#In the designated areas below, write the three for loops
#that are described. Do not change the print statements that
#are currently there.

print("First loop:")

#Write a loop here that prints the numbers from 1 to 10,
#inclusive (meaning that it prints both 1 and 10, and all
#the numbers in between). Print each number on a separate
#line.

for i in range (1,11):
    print(i)
print("Second loop:")

#Write a loop here that prints the numbers from -5 to 5,
#inclusive. Print each number on a separate line.

for i in range (-5, 6):
    print(i)
print("Third loop:")

#Write a loop here that prints the even numbers only from 1
#to 20, inclusive. Print each number on a separate line.
for i in range (2, 21, 2):
    print(i)

#Hint: There are two ways to do this. You can use the syntax
#for the range() function shown in the multiple-choice
#problem above, or you can use a conditional with a modulus
#operator to determine whether or not to print.

###

mystery_int = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In math, factorial is a mathematical operation where an
#integer is multipled by every number between itself and 1.
#For example, 5 factorial is 5 * 4 * 3 * 2 * 1, or 120.
#Factorial is represented by an exclamation point: 5!
#
#Use a for loop to calculate the factorial of the number
#given by mystery_int above. Then, print the result.
#
#Hint: Running a loop from 1 to mystery_int will give you
#all the integers you need to multiply together. You'll need
#to track the total product using a variable declared before
#starting the loop, though!

#Add your code here!
factorial = 1
for i in range (1, mystery_int + 1):
    factorial *= i
print(factorial)

###

mystery_string = "CS1301"

#Write a for-each loop that lists each character in
#mystery_string with its index. For example, if the string
#was "David", the output would be:
#0 D
#1 a
#2 v
#3 i
#4 d
#
#Note that the first item is #0, the second is #1, and so
#on! We'll talk about why that is in Unit 4.
#
#Hint: You'll need a separate variable to keep track of how
#many letters you've printed! You may not use the range
#function on this problem.

#Add your code here!
num_letter = 0
for letter in mystery_string:
    print(num_letter, letter)
    num_letter += 1

###

mystery_value = 87

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a while loop that continues to add 9 to mystery_value
#until mystery_value is greater than 100. Each time 9 is
#added, print the *new* value of mystery_value. For example,
#with mystery_value = 87, your code should print 96 and 105.

#Add your code here!
while mystery_value <= 100:
    mystery_value += 9
    print(mystery_value)

###

mystery_int_1 = 3
mystery_int_2 = 4
mystery_int_3 = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above are three values. Run a while loop until all three
#values are less than or equal to 0. Every time you change
#the value of the three variables, print out their new values
#all on the same line, separated by single spaces. For
#example, if their values were 3, 4, and 5 respectively, your
#code would print:
#
#2 3 4
#1 2 3
#0 1 2
#-1 0 1
#-2 -1 0

#Add your code here!
while mystery_int_1 > 0 or mystery_int_2 > 0 or mystery_int_3 > 0:
    mystery_int_1 -= 1
    mystery_int_2 -= 1
    mystery_int_3 -= 1
    print(mystery_int_1, mystery_int_2, mystery_int_3)

###

beats_per_measure = 4
measures = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In music, a song's time signature is given in terms of beats
#per measure. A common time signature is 4 beats per measure:
#for every measure of music, a conductor might count from 1
#to 4 with the tempo of the music.
#
#A song then has a number of measures. For example, a short
#song might have only 5 measures. In which case, a conductor
#would count from 1 to 4 five times. If the time signature had
#instead been 3 beats per measure, she would could from 1 to 3
#five times instead.
#
#Write a nested for loop that will print out the beats of the
#piece of music. For example, if the song had 4 beats per
#measure and only 2 measures, this would print out:
#
#1
#2
#3
#4
#1
#2
#3
#4
#
#We print from 1 to 4 before starting over because there are
#4 beats per measure, and we print them all twice because there
#are two measures.

#Add your code here! Using the original values of the variables
#above, this will initially print 1 through 4 five times for a
#total of 20 lines.
for measure in range(measures):
    for beat in range(1, beats_per_measure + 1):
        print(beat)

###

lyrics = ["I wanna be your endgame", "I wanna be your first string",
          "I wanna be your A-Team", "I wanna be your endgame, endgame"]
lines_of_sanity = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you have a song stuck in your head. Worse, you have
#only a few lines from a song stuck in your head. They just
#keep repeating over and over. The specific lines you have
#stuck in your head are stored in the variable lyrics.
#
#You can only stay sane so long while doing this.
#Specifically, you can only listen to lines_of_sanity lines
#before going crazy. Once you've reached lines_of_sanity,
#your brain will finish out the current list, then crumble.
#
#Write some code that will print the lyrics that run through
#your head. It should keep repeating each line one-by-one
#until you've reached lines_of_sanity lines. Then, it should
#keep going to finish out the current verse. After that, print
#"MAKE IT STOP" in all caps (without the quotes).
#
#HINT: Remember, we can iterate through items in a list using
#this syntax:
#
#  for item in list_of_items:
#
#HINT 2: You'll probably need a counter to count how many lines
#have been printed so far.

#Add your code here! Using the initial inputs from above, this
#should print 9 lines: all 4 lines of the list twice, followed
#by MAKE IT STOP
counter = 0
while counter < lines_of_sanity:
    for line in lyrics:
        print(line)
        counter += 1

print("MAKE IT STOP")

###

#When writing out mathematical equations for younger
#audiences, we usually want to use the traditional division
#and multiplication symbols, ÷ and ×, instead of slashes and
#asterisks. These keys aren't on the keyboard, though. So,
#let's write functions that will print them.
#
#First, write two functions: one called print_division_symbol
#and one called print_multiplication_symbol. The functions
#should do what their names suggest: print_division_symbol
#should print a division symbol, print_multiplication_symbol
#should print a multiplication symbol. You can copy the
#characters for those symbols from these directions.
#
#Then, after writing those two functions, call them in the
#same order: print_division_symbol, then
#print_multiplication_symbol. The output of your code should
#thus be ÷, then ×, each on their own line.
#
#Note that you don't need to worry about the end="" thing
#you saw in the video: just print the symbols on their own
#lines. Note also that if you receive a UnicodeEncodeError,
#try submitting your code instead of running it: that error
#happens sometimes, but only affects Run, not Submit.
#
#HINT: you're writing two functions. You don't want one to
#be inside the other.

#Write your two functions here!
def print_division_symbol():
    print("÷")

def print_multiplication_symbol():
    print("×")

#Call your two functions here!
print_division_symbol()
print_multiplication_symbol()

###

#Take a look at the three functions completely written
#below. It's your job to correctly call each function with
#the following parameters:
#
#  Function 1: the string "Black Horse and a Cherry Tree" 
#  Function 2: no parameters
#  Function 3: these five numbers: 80, 80, 95, 86, 79

#Function 1
def cherry_pie(song):
    if ("Cherry" in song):
        print("Sheee's my cherry pie")
    else:
        print("Huh... must be an American Pie.")

#Function 2
def should_I_go_to_Waffle_House():
    print(True)

#Function 3
def average_grades(num1, num2, num3, num4, num5):
    sum = num1 + num2 + num3 + num4 + num5
    average = sum / 5
    print(average)

#Add your function calls here! Don't change any of the
#code above.
cherry_pie("Black Horse and a Cherry Tree")
should_I_go_to_Waffle_House()
average_grades(80, 80, 95, 86, 79)

###

#Write a function called get_todays_date that returns
#today's date as a string, in the form year/month/day.
#For example, if today is January 15th, 2017, then it
#would return 2017/1/15.
#
#Remember, you took care of the string formatting part of
#this exercise in 2.2.9 Coding Exercise 1! Now, you're
#converting it to a function that returns the string.
#
#Note that the line below will let you access today's date
#using date.today() anywhere in your code.
from datetime import date

#Write your function here!
def get_todays_date():
    return str(date.today().year) + "/" + str(date.today().month) + "/" + str(date.today().day)

#If you want to test your code, you can do so by calling
#your function below. However, this is no longer required
#for grading.
print(get_todays_date())

###

#Write a function that takes in one integer parameter, the
#side length of a square, and returns the area. The function
#should be named find_area, and have one parameter:
#side_length.

#Write your function here!
def find_area(side_length):
    result = side_length * side_length
    return result

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "A square with side length 4 has an area of 16".

test_side_length = 4
print("A square with side length", test_side_length, "has an area of", find_area(test_side_length))

###

#Helping us develop this class are a team of teaching
#assistants, often called TAs for short.
#
#Write a function called my_TAs. The function should take as
#input three strings: first_TA, second_TA, and third_TA. It
#should return as output the string, "[first_TA], [second_TA],
#and [third_TA] are awesome!", with the values replacing the
#variable names.
#
#For example, my_TAs("Sridevi", "Lucy", "Xu") would return
#the string "Sridevi, Lucy, and Xu are awesome!"
#
#Hint: Notice that because you're returning a string instead
#of printing a string, you can't use the print() statement
# -- you'll have to create the string yourself, then return
#it!

#Write your function here!
def my_TAs(first_TA, second_TA, third_TA):
    return first_TA + ", " + second_TA + ", and " + third_TA + " are awesome!"

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Joshua, Jackie, and Marguerite are awesome!".
test_first_TA = "Joshua"
test_second_TA = "Jackie"
test_third_TA = "Marguerite"
print(my_TAs(test_first_TA, test_second_TA, test_third_TA))

###

#Write a function called greeting. greeting should have one
#parameter, a string representing a name. It should return
#a string with the message "Hi [name]!", where the value of
#the parameter is used in place of [name].
#
#For example:
#
# greeting("David") -> "Hi David!"

def greeting(input_name):
    return "Hi " + input_name + "!"

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Hi David!"

a_name = "David"
message = greeting(a_name)
print(message)

###

#Below we've written a function that is supposed to take in
#four parameters and produce a string representing the cost
#of a person's weekly soda consumption. Below the function
#definition, we're calling the function.
#
#However, right now, the code is erroring out. Fix this code
#without changing the code inside the function. You may
#change either the function declaration (on line 11) or the
#function call on line 27.

def soda_habit(sodas_per_week, price_per_soda, calories_per_soda, preferred_soda):
    
    #Above, we've moved preferred_soda to the beginning and
    #sodas_per_week to the end, so our original function
    #call will work.
    
    #Don't change the body of this function!
    
    money_spent = price_per_soda * sodas_per_week
    calories_consumed = calories_per_soda * sodas_per_week
    
    summary_string = "You're spending $" + str(money_spent) + " on " + preferred_soda + " per week! "
    summary_string += " That's " + str(calories_consumed) + " calories!"
    
    return summary_string

result = soda_habit(9, 1.75, 140, "Coca-Cola")
print(result)

###

#We've written the function, reverse, below. This function
#takes a string and returns the reverse of it. There are two
#scope errors somewhere in the code. Read through all the
#code below to find and fix the errors, so that the function
#produces the correct output and the result of the function
#is correctly printed. Note that you should not change the
#three lines that are already present in the function, but
#you may add lines before them, or you may change or add to
#the lines outside the function.
#
#Note that your goal here is to fix both the function itself
#and the program as a whole. So, your function should be
#able to be called on a new string, and the program when
#run should print the reverse of the string originally on
#line 29.

def reverse(a_string):
    #You may add code before the following three lines.
    rev = ""
    
    #Don't change these three lines.
    for i in range(len(a_string)-1, -1, -1):
        rev = rev + a_string[i]
    return rev

#You may change or add to the following lines.
rev = reverse("This string should be reversed!")
print(rev)

###

#Write a function called snowed_in that will determine
#whether school is closed based on the weather and
#temperature. We'll pretend the school is in Georgia, where
#a little snow or sub-freezing temperatures are enough to
#close down schools!
#
#The function should take three parameters:
#
# - temperature, a float
# - weather, a string
# - is_celsius, a boolean
#
#The function should return True if temperature is below
#freezing (32 if is_celsius is False, 0 if is_celsius is
#True) or if weather is "snowy". Otherwise, it should
#return False.
#
#Note, however, that is_celsius should be an optional
#argument. If the function call does not supply a value for
#is_celsius, assume it is True.
#
#For example:
#
# snowed_in(15, "sunny") -> False
# is_celsius is assumed to be True, so 15 is not below
# freezing.
#
# snowed_in(15, "sunny", is_celsius = False) -> True
# is_celsius is False, so 15 is below freezing.
#
# snowed_in(15, "snowy", is_celsius = True) -> True
# The weather is "snowy", so the temperature doesn't matter.


#Write your function here!
def snowed_in(temperature, weather, is_celsius = True):
    if is_celsius == True:
        if temperature < 0 or weather == "snowy":
            return True
        else:
            return False
    elif is_celsius == False:
        if temperature < 32 or weather == "snowy":
            return True
        else:
            return False
    else:
        return False

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print False, True, and True, each on their own line.

print(snowed_in(15, "sunny")) #Should print False
print(snowed_in(15, "sunny", is_celsius = False)) #Should print True
print(snowed_in(15, "snowy", is_celsius = True)) #Should print True

### ERROR HANDLING ###

mystery_value = "9"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and prints
#the result. In the case that an error occurs, print "Not
#possible".
#
#Use error handling to determine if an error will occur; do
#not use the type() function. You might be surprised how many
#types Python can divide by 10!

#Add your code here!
try:
    print(10 / mystery_value)
except:
    print("Not possible")

###

mystery_value = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and prints
#the result. In the case that mystery_value is equal to 0,
#print "Not possible". Do not catch any other errors. This
#means there will be an uncaught error in the correct answer!
#
#You may not use any conditionals or the type() function.

#Add your code here!
try:
    print(10 / mystery_value)
except ZeroDivisionError:
    print("Not possible")

###

mystery_value = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and 
#prints the result. In the case that mystery_value is 
#equal to 0, print "Can't divide by zero". If for any other
#reason the operation fails, print "Not possible".
#
#You may not use any conditionals or the type() function.

#Add your code here!
try:
    print(10 / mystery_value)def has_a_vowel(a_str):
     for letter in a_str:
         if letter in "aeiou":
             return True
         else:
             return False
except ZeroDivisionError:
    print("Can't divide by zero")
except Exception:
    print("Not possible")

###

my_string = "This string is not a number!"
#Run the code below until an error occurs
try:    
    print("Converting my_string to int...")
    my_int = int(my_string)
    print(my_int)
#If an error occurs, jump to here
except: 
    print("Can't convert; my_string not a number.")
print("Done!")

###

try:
    #Open InputFile.txt in read-only mode
    input_file = open("InputFile.txt", mode = "r")
    #For each line in the file
    for line in input_file:
        #Print the line
        print(line)
    #Close the file
    input_file.close()
#Catch an IOError
except IOError as error:
    print("An input error occurred!")

###

#Write a function called has_a_vowel. has_a_vowel should have
#one parameter, a string. It should return True if the string
#has any vowels in it, False if it does not.


def has_a_vowel(a_str):
    for letter in a_str:
        if letter in "aeiou":
            return True
    else:
        return False
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, then True, then False, then False, each on
#its own line.
print(has_a_vowel("abba"))
print(has_a_vowel("beeswax"))
print(has_a_vowel("syzygy"))
print(has_a_vowel(""))

###

#Right now, the code below will encounter an error when num
#is 0, but it will not print anything when it does, and then
#it will keep running for num = 1, num = 2, and num = 3
#afterwards. Modify this code so that once it hits an error,
#the loop stops altogether.
#
#You still should not print anything when the error is
#encountered, and the loop definition on line 10 should not
#be changed.

try:
    for num in range(-3, 3):
	    print(5 / num)
except ZeroDivisionError:
    pass

###

#Write a function called get_integer that takes as input one
#variable, my_var. If my_var can be converted to an integer,
#do so and return that integer. If my_var cannot be converted
#to an integer, return a message that says, "Cannot convert!"
#
#For example, for "5" as the value of my_var, get_integer would
#return the integer 5. If the value of my_var is the string
#"Boggle.", then get_integer would return a string with the
#value "Cannot convert!"
#
#Do not use any conditionals or the type() function.


#Write your function here!
def get_integer(my_var):
    try:
        return int(my_var)
    except:
        return "Cannot convert!"
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 5, Cannot convert!, and 5.

print(get_integer("5"))
print(get_integer("Boggle."))
print(get_integer(5.1))

###

#This exercise is identical to the previous exercise,
#except that instead of printing "Cannot convert!" when my_var
#cannot be converted to an integer, you should instead return
#the error message that results. For a reminder of how to
#access the error message in the except block, check out
#3.5.3, specifically CatchingASpecificError-4.py from 3.5.3.3
#and CatchingMultipleSpecificErrors-5.py from 3.5.3.4.
#
#Write a function called get_integer that takes as input one
#variable, my_var. If my_var can be converted to an integer,
#do so and return that integer. If my_var cannot be converted
#to an integer, return the error message that results from
#attempting to do so.
#
#Do not use any conditionals or the type() function.


#Write your function here!
def get_integer(my_var):
    try:
        return int(my_var)
    except Exception as error:
        return error


#You can use the lines below to test out your function. When
#the function is written correctly, the output of these three
#lines should be:
#5
#invalid literal for int() with base 10: 'Boggle.'
#5
print(get_integer("5"))
print(get_integer("Boggle."))
print(get_integer(5.1))

### PRACTICE PROBLEMS ###

## Practice Problem 1

#Imagine you're writing the software that controls the speed
#of a ceiling fan. The user changes the fan's speed by
#pulling a string. Pulling the string increases the fan's =
#speed by 1, unless it's already at the maximum speed. If
#it's already at the maximum speed, it changes the speed
#back to 0.
#
#Write a function called pullString. pullString should take
#two parameters: a current speed, and a maximum speed, both
#integers. pullString should return the new fan speed
#according to the reasoning above.

#You may assume that the input will be integers. You should
#also assume that the fan's speed *can* equal the maximum
#speed, but it *cannot* exceed the maximum speed. You may
#thus assume that you will never be given a currentSpeed
#higher than maxSpeed.

#Write your function here!

def pullString(current_speed, max_speed):
    while current_speed < max_speed:
        current_speed += 1
        return current_speed
    while current_speed == max_speed:
        current_speed = 0
        return current_speed

#The code below will test your function. It isn't used for
#grading, so you can change or remove it if you'd like. As
#written, these three lines should print 3, 5, and 0.
print(pullString(2, 5))
print(pullString(4, 5))
print(pullString(7, 7))

## Practice problem 2

#A common formula in probability and statistics is the
#formula for the number of possible combinations of r
#objects from a set of n objects. For example, the question,
#"How many possible 2-card hands can you deal from a deck of
#52 unique cards?" is saying, "How many combinations of 2
#can you make from a set of 52?"
#
#The formula for the number of combinations of length r from
#a set of n objects is:
#
#  numCombinations = n! / r!(n-r)!
#
#The ! mark is the symbol for factorial. Factorial means the
#product of the number times every number between itself and
#1. For example, 5! is 120: 5 * 4 * 3 * 2 * 1 = 120.
#
#Write a function called numCombinations with two parameters:
#n, the number of objects from which to choose, and r, the
#number of objects to choose. numCombinations should return
#the number of combinations according to the formula above.
#Don't worry if you don't fully understand what combinations
#are -- just focus on implementing a function that solves
#that formula given n and r.
#
#You may *not* use Python's built-in factorial method to
#complete this; you should implement that yourself.
#
#Hint: We'd suggest writing two functions: factorial() and
#numCombinations(). Then, call factorial() in your code for 
#numCombinations(). You don't have to do this, but it will
#make your answer a little easier!
#
#Hint 2: Remember to put parentheses around the denominator.

#Write your numCombinations function (and any other functions) 
#here!

def factorial(num1):
    factorial = 1
    for i in range (1, num1 + 1):
        factorial *= i
    return factorial

def numCombinations(n, r):
    return factorial(n) / (factorial(r) * factorial(n - r))

#The lines below will test your code. They are not used for
#grading, so feel free to modify them. As written, they should
#print: 1326.0, 252.0, and 4.0, each on their own line.
print(numCombinations(52, 2))
print(numCombinations(10, 5))
print(numCombinations(4, 1))

## Practice problem 3


