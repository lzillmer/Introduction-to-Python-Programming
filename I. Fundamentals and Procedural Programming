## NOTES

## print(message) - takes as input a message as string and prints it in console
print("Hello, world")

## print(type(myVariable)) - shows data type
myVariable = 5
print(type(myVariable))

## converting between data types, use:
# str(variable)
# int(variable)
# bool(variable) - Python lets you convert anything to a boolean
# float(variable)

myNumber = 5
print(type(myNumber))
myNumberAsString = str(myNumber)
print(type(myNumberAsString)

print("Today's date: " + str(date.today()))
print("Today's date:", date.today()) ## prints the same thing

myIntAsString = "5"
myIntAsInt = int(myIntAsString)
print(myIntAsInt)

## user input
myUserInput = input("Enger an integer: ") ## input will be interpreted as a string
myUserInputAsInt = int(myUserInput)
print(myUserInputAsInt * myUserInputAsInt)

## Python's reserved words
import keyword
print(keyword.kwlist) ## shows Python's list of reserved words

# you get a SyntaxError if you try to use a reserved word

## Dot notation
import datetime
currentTime = datetime.datetime.now()
print(currentTime.hour)
print(currentTime.minute)
print(currentTime.second)

## Exercise: print date as year/month/day and time as hour:minute:second
from datetime import date
import datetime
todays_date = date.today()
current_time = datetime.datetime.now()

todays_year_string = str(todays_date.year)
todays_month_string = str(todays_date.month)
todays_day_string = str(todays_date.day)

print(todays_year_string + "/" + todays_month_string + "/" + todays_day_string)

time_hour_string = str(current_time.hour)
time_minute_string = str(current_time.minute)
time_second_string = str(current_time.second)

print(time_hour_string + ":" + time_minute_string + ":" + time_second_string)

## set operators
myString = "hello, world"
print("h" in myString) ## output will be True
print("lo, w" in myString) ## output will be True

## Incrementing and loops
letterCount = 0
for character in "Hello, world":
  letterCount += 1
print(letterCount)    ## counts letters in Hello, world

## Checking if a triangle exists
side1 = int(input("Enter the shortest side: "))
side2 = int(input("Enter the next shortest side: "))
side3 = int(input("Enter the longest side: "))
result = (side1 + side2) > side3
print("'these sides can form a triangle' is, result)


### VARIABLES ###

#Create four variables name my_integer, my_decimal,
#my_string, and my_boolean. Assign to each variable a
#value of the corresponding type (an integer for
#my_integer, a string of characters for my_string,
#etc.). You can choose whatever values you want --
#just make sure the variable names and types are
#correct!
#
#Then, print the types of each of the four variables
#in order: first the integer, then the decimal
#number, then the string, then the boolean. This
#should print text like <class 'int'>, <class
#'float'>, and so on.
#
#Don't print anything except their types!


#Create your variables here!
my_integer = 5
my_decimal = 1.2
my_string = "laura"
my_boolean = False


#Print their types here!
print(type(my_integer))
print(type(my_decimal))
print(type(my_string))
print(type(my_boolean))

###

num_pancakes = 7

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a line of code below that will print the following
#message:
#
#The most pancakes Bob has eaten at one time is 7
#
#The number in the sentence should always be the value of
#num_pancakes.
#
#However, you may _not_ use the + operator. You must put
#together the output in a different way.
#
#Add your code below!
print("The most pancakes Bob has eaten at one time is", num_pancakes)

###

total = 2.51

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The code below attempts to print the message:
#
#Thank you for coming to Junior's. Your total is $2.51.
#
#Right now, however, the code is broken because the variable
#total must be converted to a string before printing.
#
#Fix the code below! You may fix it however you want.

print("Thank you for coming to Junior's. Your total is $" + str(total) + ".")

###

#Modify the code below so that the output matches the following:
#
#<class 'str'>
#<class 'int'>
#<class 'bool'>
#<class 'float'>
#
#Don't write any new lines. Just rearrange the existing lines so
#that the output matches the above.

print(type("Hello!"))
print(type(5))
print(type(True))
print(type(5.1))

###

#The code below creates a variable named my_int and
#assigns to it a random number from 0 to 10. You
#don't need to worry about how this works; all you
#need to know is that my_int will have an integer
#as its value once this code is done.

import random
my_int = random.randint(0, 10)

#Do not edit the code above!
#
#The line below attempts to print the value of
#my_int, but currently it does not work. Fix
#this code so that it works and prints "The
#current value of my_int is:", followed by the
#value.
#
#If you get stuck, look back at the Converting to
#Strings vide from Lesson 2.2.7.

print("The current value of my_int is: " + str(my_int))

###

name = "Elphaba"
verb = "flew"
where = "the western sky"
number = 5
result = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above we have created five variables: name, verb, and where
#which are strings, number which is an integer, and result,
#which is a boolean.
#
#Below, write some code that will take these variables and
#print out the sentence below with the values of the variables
#filling in the corresponding spots in the sentence as
#indicated by the variable name in brackets.

#My name is [name] and it is [result] that I [verb] across [where] [number] times.
#
#Make sure to watch out for the data types of the values of
#each of these variables, and make sure you have the right
#number of spaces between each part!
#
#
#Add your code below:
print("My name is", name, "and it is", str(result), "that I", verb, "across", where, str(number), "times.")

###

ones = 8
tens = 6
hundreds = 1

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Imagine you want to find the integer represented by the
#variables ones, tens, and hundreds above. For their initial
#values, then, this would be 168.
#
#Below is some code that attempts to compute and print that
#value, but at present it isn't working. Fix it so that it
#works correctly.
#
#Fix the code below!

result = hundreds * 100 + tens * 10 + ones
print(result)

###

#In the code below, we've created two dates. The day in each
#date is chosen randomly. You don't need to worry about how
#this works; all you need to know is that when you start
#writing your code, you'll have access to two variables, each
#holding a date: earlier_date and later_date, and later_date
#is guaranteed to be later than earlier_date.
#
#Complete this code so that it creates a variable called
#days_between that stores the number of days between the two
#dates.
#
#Hint: You can find the number of days between two dates by
#subtracting the day number of the earlier date from the
#day number of the later date.

from datetime import date
import random
earlier_date = date(2017, 6, random.randint(1, 25))
later_date = date(2017, 6, random.randint(earlier_date.day + 1, 28))

#Do not modify the code above!


#Write your code here!
days_between = (later_date - earlier_date).days

#If your code is working correctly, then the following line
#of code will print the correct number of dayes between the
#two dates. Notice that this line uses commas instead of plus
#signs, which is why it doesn't have to convert the dates to
#strings: Python does that implicitly when we use this syntax.
#print("There are", days_between, "days between", earlier_date, "and", later_date)

###

my_int1 = 1
my_int2 = 5
my_int3 = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The code above creates three variables: my_int1, my_int2,
#and my_int3. Each will always be an integer
#
#Now, add three lines of code that will print the values
#of those three variables with "my_int1:", "my_int2:", and
#"my_int3:" labeling the output. So, if the variables' values
#were 1, 5, and 9, your lines would print:
#
#my_int1: 1
#my_int2: 5
#my_int3: 9


#Add your lines of code here!
print("my_int1:", my_int1)
print("my_int2:", my_int2)
print("my_int3:", my_int3)

#Next, these lines of code will modify the values of those
#three variables. You don't need to worry about how these
#work. We'll talk about it in the next couple chapters.

my_int1 += 5
my_int2 *= 3
my_int3 **= 2

#Now, copy and paste the same lines from above into the lines
#below. This way, your output will show you the new values of
#these variables.


#Add your lines of code here!
print("my_int1:", my_int1)
print("my_int2:", my_int2)
print("my_int3:", my_int3)


#If your code works correctly, then when run, it should print:
#my_int1: 1
#my_int2: 5
#my_int3: 9
#my_int1: 6
#my_int2: 15
#my_int3: 81
#
#This should be the output when Running. When Submitting,
#we'll test your code with other values of these three
#variables.

###

my_variable = "Hello, world!"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The code above creates one variable. Right now, it's a
#string, but we might change it to be an integer, a float, or
#something else.
#
#Add a line of code below that will print the variable's value
#and type in a sentence like this:
#
#The value is Hello, world! and the type is <class 'str'>


#Add your lines of code here!
print("The value is", my_variable, "and the type is", type(my_variable))


#When running your code, you should see the message on line
#14 printed. When submitting, we'll test your code with other
#values and types.


### LOGICAL OPERATORS ###

mystery_string_1 = "Grapes"
mystery_string_2 = "apples"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Remember, greater than and less than operators can be used to
#compare strings. A string is "less than" another string if it
#comes earlier when sorted alphabetically.
#
#This can have some nuances, though, when it comes to
#capitalization, punctuation, and spaces.
#
#Write some code below that will print True if mystery_string_1
#comes before mystery_string_2 alphabetically according to
#Python, and False if it does not.
#
#While this might be a simple line of code, we'd strongly
#recommend checking out the submission results to see some of
#the odd ways that Python performs. For example, don't be
#surprised when your code says that it's True that "Grapes"
#comes before "apples" alphabetically: Python puts all
#upper-case letters before all lower-case letters.


#Write your code here!
mystery_string_1 = mystery_string_1.lower()
mystery_string_2 = mystery_string_2.lower()

print(mystery_string_1 < mystery_string_2)

###

mystery_string = "Hello, world!"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The 'in' operator can be used to see if a string of characters
#is found within another string of characters, just like it can
#be used to find if an item is in a list.
#
#Above we've created a string with the variable name
#mystery_string. Write some code below that will print True
#if the string "world" appears within mystery_string, and
#False if it does not.


#Write your code here!
print("world" in mystery_string)

###

balance = 20.0
price = 19.0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine we're writing some software for a cash register or
#credit card processor. We want to approve a purchase if the
#customer's balance is greater than or equal to the purchase
#price, and reject it otherwise.
#
#Write some code below that will print True if balance is
#greater than or equal to price, and False if it is not.


#Add your code here!
print(balance >= price)

###

balance = 20.0
price = 19.0
overdraft_protection = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Last exercise, we printed True if balance was greater than or
#equal to price, and False otherwise. However, some banks have
#something called overdraft protection. Overdraft protection
#means that the customer is allowed to spend more than their
#balance, and the bank just expects them to deposit the money
#to cover the purchase later.
#
#Write some code below that will print True if the customer
#can make the purchase given their balance, the purchase
#price, and whether or not they have overdraft protection.
#Specifically, the result should be True if balance is greater
#than or equal to price or if overdraft_protection is True,
#and False if neither of these are true.


#Add your code here!
print((balance >= price) or overdraft_protection)

###

hot = True
cold = False
rainy = True
windy = False
snowy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing a clothing-recommendation app that
#makes suggestions based on the weather. It has booleans
#representing five different kinds of weather: hot, cold,
#rainy, windy, snowy.
#
#The app recommends four kinds of clothing:
#
# - a jacket, if it's either cold or windy.
# - boots, if it's cold and snowy.
# - flip flops, if it's hot, unless it's rainy.
# - a t-shirt, if it's hot, unless it's rainy or windy.
#
#Write some code below that will print four lines, one for
#each of the four types of clothing. Under the original
#values for the variables above, the lines should look
#like this:
#
#Jacket: False
#Boots: False
#Flip-Flops: False
#T-shirt: False
#
#The values (True and False) will differ based on the
#values assigned to hot, cold, windy, snowy, and rainy
#at the start of the program.
#
#Hint: To print these lines, you'll need to add the
#result of the expression to a string of the clothing item.
#To do that, we'll need to convert the boolean from the
#expression into a string.


#Add your code here!
print("Jacket:", cold or windy)
print("Boots:", cold and snowy)
print("Flip-Flops:", hot and not rainy)
print("T-shirt:", hot and (not rainy and not windy))

###

my_gpa = 3.6
my_major = "Computer Science"
my_interest = "Software"
company_gpa_req = 3.5
company_major_recruiting  = "Computer Science"
company_interest = "Software"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#It's career fair season and you are in the middle of applying
#to all of these different companies for a potential internship
#next summer, but you plan on only applying to companies that
#you are interested in and companies whose requirements you meet.
#
#You'll only apply to the company if your GPA either matches or
#is greater than the company's required GPA. Even then you'll
#only apply to them if the major they are recruiting is your
#major. However if you are not the major they are recruiting,
#you'll still apply to them if your interest matches the interest
#the company is advertising.
#
#Write some lines of code using logical operators that will print
#True if you do end up applying to the company or False if you
#don't end up appplying to the company based on the requirements
#described above. Use the variable names as listed in the top of
#the problem description.
#
#If your code is working correctly, with the original values of
#the variables defined above, your code should print out True.

#Add your code below!

print(my_gpa >= company_gpa_req and (my_major == company_major_recruiting or my_interest == company_interest))

###

test_percent = 20
review_time = 2
feel_prepared = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#You've been studying for your test for a few hours and you're
#trying to decide if you can go to bed or if you need to study
#longer.
#
#To go to bed, you need to feel prepared. Even if you "feel"
#prepared, you need to make sure you have prepared adequately:
#that means reviewing for at least 2 hours (review_time), or
#at least 4 hours if the test is worth 20 percent or more of
#your grade.
#
#So, to go to bed, you must feel prepared (feel_prepared must
#be True), and you must have reviewed for 2 or more hours
#(review_time must be greater than or equal to 2). If the
#test is worth 20% or more (test_percent is greater than
#or equal to 20), you should have reviewed for 4 or more hours
#(review_time greater than or equal to 4).
#
#Add your code below! It should print True if you can go to
#bed, False if you cannot.
print(feel_prepared and ((review_time >= 2 and test_percent < 20) or (review_time >= 4 and test_percent >= 20)))

###

cold = False
windy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In this problem, we want to print the message, "You should
#wear a jacket today!" if it's cold or windy, or the message
#"You don't need a jacket today!" if it's not.
#
#At the bottom of this file, we've added some code that
#handles printing these two messages. For this code to work,
#the variable need_jacket needs to exist. Its value should be
#True (the boolean, not the string) if it's cold or windy,
#False if it's neither cold nor windy.


#Add your code to create the variable need_jacket with the
#appropriate value here!
need_jacket = cold or windy


#Do not modify the code below. It will work if you have
#correctly create the variable need_jacket with the
#appropriate value.
if need_jacket:
    print("You should wear a jacket today!")
else:
    print("You don't need a jacket today!")

###

busy = True
hungry = False
tired = True
stressed = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Logical operators get more complex when we start using them
#with the results of other logical operators. So, let's try
#it out!
#
#Using the variables above, we want to assess whether the
#person is happy, sad, bored, confused, or anxious.
#
# - The person is happy if they're busy but not stressed.
# - The person is sad if they're either hungry or tired.
# - The person is confused if they're both happy and sad.
# - The person is bored if they're neither happy, sad,
#   nor busy.
# - The person is anxious if they're neither happy nor sad,
#   but they are stressed.
#
#Add code below whose output will list whether each of these
#emotions is true or false. For example, with the original
#values of the variables above, this would print:
#
#Happy: True
#Sad: True
#Confused: True
#Bored: False
#Anxious: False


#Add your code here!
print("Happy:", busy and not stressed)
print("Sad:", hungry or tired)
print("Confused:", (busy and not stressed) and (hungry or tired))
print("Bored:", not busy and not (busy and not stressed) and not (hungry or tired))
print("Anxious:", stressed and not (busy and not stressed) and not (hungry or tired))

###

can_afford = False
destination_is_safe = True
educational_value = False
relatives_nearby = False
is_international = False
have_passport = True
afraid_to_fly = False
have_a_car = False
is_a_beach = False
is_warm = True
has_skiing = False
is_a_city = True
is_off_peak = True
has_attraction = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine for a moment that you're a college student who wants
#to travel during spring break. You have a destination in
#mind. What determines whether you can go there?
#
#First, how would you pay for the trip? If you can afford it
#(can_afford), then all you need is for your parents to agree
#to let you go. Your parents will agree to let you go if the
#destination is safe (destination_is_safe). 
#
#If you can't afford it, then you need your parents to pay for
#the trip. Your parents will pay for the trip if the destination
#is safe (destination_is_safe) and if either there is educational
#value (educational_value) or there are relatives nearby for
#you to visit (relatives_nearby).
#
#Second, are you sure you're able to go to this location? If
#it's international (is_international), then you'll need a
#passport (have_passport) and you can't be afraid to fly
#(afraid_to_fly). If it's not international (is_international),
#then you either must have a car (have_a_car) or you can't be
#afraid to fly (afraid_to_fly).
#
#Third, do you actually want to go to this location? If it's a
#beach location (is_a_beach), then you want the weather to be
#warm (is_warm). If it's instead a skiing location (has_skiing),
#you don't want it to be warm (is_warm). If it's a tourist city
#(is_a_city), then you either want it to be an off-peak travel
#time (is_off_peak) or you want there to be an attraction in
#town that week (has_attraction).
#
#If it's both a beach and a city, then you'd decide to go if it
#meets the condition for the beach (it's warm) or for a city
#(is an off-peak time or has an attraction). If it's both a
#skiing location and a city, then you'd decide to go if it meets
#either type of location's conditions as well.
#
#Your only goal here is to print True or False: True if the
#destination represented by the variables is an acceptable
#travel location, False if it is not.
#
#HINT: Don't try to do this all in one line. Break it into
#smaller parts.


#Add your code here!

afford_trip = can_afford and destination_is_safe
parents_pay_trip = (not can_afford) and (destination_is_safe and (educational_value or relatives_nearby))
able_to_go = (is_international and have_passport and not afraid_to_fly) or (not is_international and (have_a_car or not afraid_to_fly))
want_to_go = (is_a_beach and is_warm) or (has_skiing and not is_warm) or (is_a_city and (is_off_peak or has_attraction))
both_beach_and_city = is_a_beach and is_a_city
both_skiing_and_city = has_skiing and is_a_city

acceptable_location = afford_trip or (parents_pay_trip and able_to_go and want_to_go) or (both_beach_and_city and want_to_go) or (both_skiing_and_city and want_to_go)

print(acceptable_location)

###

exam = False
sunny = False
sunblock = False
morning_classes = True
night_classes = True
raining = False
rain_jacket = True
snowing = False
friends_are_going = True
fluffy_coat = False
snow_boots = True
really_want_to_go = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you commute to your classes and want to write code to 
#determine when it is appropriate for you to go to class based
#on the following conditions:
#
# - If you have an exam, then you should go to class, regardless
#   of the weather.
# - If you do not have an exam and it is sunny outside, then you
#   want to go to class if either of the following are true: you
#   have sunblock  and your classes are in the morning or your
#   classes are at night.
# - If you do not have an exam and it is raining outside, then
#   you want to go to class if you have a rain jacket.
# - If you do not have an exam and it is snowing, then you want
#   to go if any of the following are true: your friends are
#   going and you have a fluffy coat, you have snow boots and a
#   fluffy coat, or you just really want to go to class.

#If none of the previously stated conditions are true, then you
#do not want to go to class.

#Once you have determined if you should go to class, print the 
#following statement without the quotation marks, where "___"
#corresponds to the boolean that you have found:
#"True or false: I should go to class: ___"

#Add your code here!
should_go_to_class = exam or (sunny and ((sunblock and morning_classes) or night_classes)) or (raining and rain_jacket) or (snowing and ((friends_are_going and fluffy_coat) or (snow_boots and fluffy_coat) or really_want_to_go))

print("True or false: I should go to class:", should_go_to_class)

#With the initial inputs, your code
#should print:
#True or false: I should go to class: False

###

a = True
b = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#There are six logical operations to compare two boolean
#values. They are:
#
#  And: True if both are True, False otherwise
#   Or: True if either is True, False otherwise.
#  Xor: True if exactly one is True; False if both are True
#       or both are False ("Exclusive Or")
# Nand: False if both are True, True otherwise.
#  Nor: False if either is True, True otherwise.
# Xnor: False if exactly one is True; True if both are True
#       or both are False.
#
#For a and b above, print the results of all six operations,
#with the following format:
#
#And: False
#Or: True
#Xor: True
#Nand: True
#Nor: False
#Xnor: False
#
#Add your code below! Be aware: there is no dedicated operator
#in Xor, Nand, Nor, or Xnor. You'll have to find those values
#through a combination of And, Or, and Not.

print("And:", a and b)
print("Or:", a or b)
print("Xor:", (a and not b) or (not a and b))
print("Nand:", not (a and b))
print("Nor:", not (a or b))
print("Xnor:", (a and b) or (not a and not b))


### MATHEMATICAL OPERATORS ###

dividend = 7
divisor = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variables above create a dividend and a divisor. Add
#some code below that will print the quotient and remainder
#of performing this operation. The quotient should be the
#whole number, not the decimal number: for example, with the
#original values of dividend and divisor (7 and 3), your code
#should print 2, then 1: 3 goes into 7 two whole times, with
#one left over.
#
#Print the quotient and remainder each on their own line.
#Both values should be integers: there should be no decimals.


#Add your code here!
print(dividend // divisor)
print(dividend % divisor)

###

speed_mph = 60

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#In the United States, speeds are typically given in terms of
#miles per hour. In the rest of the world, speeds are
#typically given in kilometers per hour.
#
#To convert miles per hour to kilometers per hour, we
#multiply miles per hour by 1.6 (technically 1.60934, but
#we're going to round anyway, so the extra decimals won't
#matter).
#
#Write some code that will convert the speed given by
#speed_mph to kilometers per hour, then print the
#following message (substituting in the right values):
#
#60 miles per hour equals 96 kilometers per hour.
#
#You should drop off any decimals that result from this
#conversion. Note that this is different from rounding:
#if speed_mph was 53, your answer would be 84 kilometers
#per hour, not 84.8 or 85. (Hint: Converting a float to
#an integer automatically rounds down.)


#Add your code here!
print(speed_mph, "miles per hour equals", int(speed_mph * 1.6), "kilometers per hour.")

###

speed_mph = 60

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#In the United States, speeds are typically given in terms of
#miles per hour. In the rest of the world, speeds are
#typically given in kilometers per hour.
#
#To convert miles per hour to kilometers per hour, we
#multiply miles per hour by 1.6 (technically 1.60934, but
#we're going to round anyway, so the extra decimals won't
#matter).
#
#Write some code that will convert the speed given by
#speed_mph to kilometers per hour, then print the
#following message (substituting in the right values):
#
#60 miles per hour equals 96 kilometers per hour.
#
#You should drop off any decimals that result from this
#conversion. Note that this is different from rounding:
#if speed_mph was 53, your answer would be 84 kilometers
#per hour, not 84.8 or 85. (Hint: Converting a float to
#an integer automatically rounds down.)


#Add your code here!
print(speed_mph, "miles per hour equals", int(speed_mph * 1.6), "kilometers per hour.")

###

A = 50
T = 301
n = 0.5
Ea = 30
R = 0.8268

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The Arrhenius equation is a formula used in physical
#chemsitry to show temperature dependence on reaction rates.
#A modified form of the equation is showed below:
#
# k = A x T^n x e^(-Ea/(R x T))
#
#Where k is a rate constant, T is the temperature in Kelvin,
#n is some constant, A is the pre-exponential factor, Ea is
#the activation energy, R is the universal gas constant, and
#e is the mathematical constant.
#
#It can also be seen here: 
#https://wikimedia.org/api/rest_v1/media/math/render/svg/178c4170c8a642485243ccc3e816f7ae4056dd51
#
#Below, write some lines of code that replicates this modified
#Arrhenius equation using the variables created above as the
#different factors in the equation, and print out the resulting
#value of k. For the mathematical constant e, we have imported
#e from the math library so you can simply use e to access this
#value (as if it's a variable defined above as well).
#
#You should round the result to two decimal places. To do this,
#you can use Python's built-in round() function. To use it, use
#the following syntax:
#
#rounded_num = round(original_num, 2)
#
#The syntax on the line above will round original_num to 2
#decimal points and assign the result to rounded_num.

#With the current values of these variables, your code should
#output 768.95.

from math import e

#Write your code here!
ans = A * T ** n * e ** (-Ea / (R * T))
print(round(ans, 2))

###

s1 = 95
s2 = 40
s3 = 50
s4 = 100
s5 = 87
s6 = 24
s7 = 8
s8 = 76
s9 = 52
s10 = 84

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are a professor and trying to determine whether
#you should curve the grades for an exam based on the class 
#average. You are given the exam scores for your class of 10
#students above. Find the class average; if it is less than 70,
#then the exam should be curved.
#
#Once you have determined whether the exam should be curved,
#print the following string: "The exam should be curved: True."
#If the exam should not be curve, use 'False' instead of 'True',
#but either way, make sure to include the period after the
#result.

#Add your code here! With the initial values of the 10 variables
#above, your result should be True.
print("The exam should be curved:", (70 <= ((s1+s2+s3+s4+s5+s6+s7+s8+s9+s10)/10)))

###

s1 = 95
s2 = 40
s3 = 50
s4 = 100
s5 = 87
s6 = 24
s7 = 8
s8 = 76
s9 = 52
s10 = 84

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are a professor and trying to determine whether
#you should curve the grades for an exam based on the class 
#average. You are given the exam scores for your class of 10
#students above. Find the class average; if it is less than 70,
#then the exam should be curved.
#
#Once you have determined whether the exam should be curved,
#print the following string: "The exam should be curved: True."
#If the exam should not be curve, use 'False' instead of 'True',
#but either way, make sure to include the period after the
#result.

#Add your code here! With the initial values of the 10 variables
#above, your result should be True.
print("The exam should be curved: " + str((s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) / 10 < 70) + ".")

###

amount = 67

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a program that will print out the coins needed to
#arrive at the amount shown above. Assume that we always want
#the maximum number of large coins: for example, for 67 cents,
#we want 2 quarters, 1 dime, 1 nickel, and 2 pennies instead
#of 6 dimes and 7 pennies.
#
#If you are unfamiliar with American currency: a quarter is
#worth 25 cents; a dime is worth 10 cents; a nickel is worth
#5 cents; a penny is worth 1 cent.
#
#To make things easier, we've gone ahead and supplied your
#print statements. All you need to do is create four variables:
#quarters, dimes, nickels, and pennies.
#
#HINT: Change the value of amount as you go to reflect what
#coins you've already found.


#Add your code here!
quarters = amount // 25
amount -= 25 * quarters
dimes = amount // 10
amount -= 10 * dimes
nickels = amount // 5
amount -= 5 * nickels
pennies = amount



#If your code above is correct, the following lines will
#initially print (for amount = 67):
#Quarters: 2
#Dimes: 1
#Nickels: 1
#Pennies: 2
print("Quarters:", quarters)
print("Dimes:", dimes)
print("Nickels:", nickels)
print("Pennies:", pennies)

###

my_current_average = 87.1
survey_completers = 50
class_size = 100

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Unlike David Joyner (who believes such bonuses are unethical),
#Prof. Shmavid Shmoyner offers a bonus to students' final
#average based on the percentage of students that complete the
#end-of-course survey.
#
#Prof. Shmoyner's formula is simple: every person that does
#the end-of-course survey adds one point to the "pool" of
#points. These points are then divided evenly among all
#students in the class.
#
#For example, if 50 students do the end-of-course survey,
#then 50 points are divided among the class. If there were
#100 students in the class, then each student gets 0.5 bonus
#points. If there were 50 students in the class, then every
#student would get 1 bonus point.
#
#The variables above describe a particular class. Your
#average is given by my_current_average. survey_completers
#shows how many students completed the survey. class_size
#holds how many students are in the class.
#
#Write some code that will print the following message with
#the appropriate values:
#
#After the 0.5 point bonus, my average is 87.6.
#
#You should round the bonus to the nearest tenth of a point.
#To do this, you can use Python's built-in round() function.
#To use it, use the following syntax:
#
#rounded_num = round(original_num, 1)
#
#The syntax on the line above will round original_num to 1
#decimal point and assign the result to rounded_num.
#
#Hint: You might need to round both the bonus and the final
#grade separately! Python does some odd things with adding
#decimals sometimes, such as thinking 80.1 + 0.1 is 
#80.1999999999999.


#Add your code here!
bonus = round(survey_completers / class_size, 1)
print("After the " + str(bonus) + " point bonus, my average is " + str(my_current_average + bonus) + ".")

###

my_current_average = 87.1
survey_completers = 50
class_size = 100

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Unlike David Joyner (who believes such bonuses are unethical),
#Prof. Shmavid Shmoyner offers a bonus to students' final
#average based on the percentage of students that complete the
#end-of-course survey.
#
#Prof. Shmoyner's formula is simple: every person that does
#the end-of-course survey adds one point to the "pool" of
#points. These points are then divided evenly among all
#students in the class.
#
#For example, if 50 students do the end-of-course survey,
#then 50 points are divided among the class. If there were
#100 students in the class, then each student gets 0.5 bonus
#points. If there were 50 students in the class, then every
#student would get 1 bonus point.
#
#The variables above describe a particular class. Your
#average is given by my_current_average. survey_completers
#shows how many students completed the survey. class_size
#holds how many students are in the class.
#
#Write some code that will print the following message with
#the appropriate values:
#
#After the 0.5 point bonus, my average is 87.6.
#
#You should round the bonus to the nearest tenth of a point.
#To do this, you can use Python's built-in round() function.
#To use it, use the following syntax:
#
#rounded_num = round(original_num, 1)
#
#The syntax on the line above will round original_num to 1
#decimal point and assign the result to rounded_num.
#
#Hint: You might need to round both the bonus and the final
#grade separately! Python does some odd things with adding
#decimals sometimes, such as thinking 80.1 + 0.1 is 
#80.1999999999999.


#Add your code here!
bonus = round(survey_completers / class_size, 1)
final_average = round((my_current_average + bonus), 1)
print("After the " + str(bonus) + " point bonus, my average is " + str(final_average) + ".")

###

meal_cost = 10.00
tax_rate = 0.08
tip_rate = 0.20

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#When eating at a restaurant in the United States, it's
#customary to have two percentage-based surcharges added on
#top of your bill: sales tax and tip. These percentages are
#both applies to the original cost of the meal. For example,
#a 10.00 meal with 8% sales tax and 20% tip would add 0.80
#for tax (0.08 * 10.00) and 2.00 for tip (0.20 * 10.00).
#
#The variables above create the cost of a meal and identify
#what percentage should be charged for tax and tip.
#
#Add some code below that will print the "receipt" for a
#meal purchase. The receipt should look like this:
#
#Subtotal: 10.00
#Tax: 0.8
#Tip: 2.0
#Total: 12.8
#
#Subtotal is the original value of meal_cost, tax is the
#tax rate times the meal cost, tip is the tip rate times
#the meal cost, and total is the sum of all three numbers.
#Don't worry about the number of decimal places; it's fine
#if your code leaves off some numbers (like 0.8 for tax) or
#includes too many decimal places (like 2.121212121 for tip).


#Add your code here!
print("Subtotal:", meal_cost)
print("Tax:", (meal_cost * tax_rate))
print("Tip:", (meal_cost * tip_rate))
print("Total:", (meal_cost + meal_cost * tax_rate + meal_cost * tip_rate))

###

STAB = 1
Type = 0.25
Critical = 2
Other = 1
Random = 1
Level = 50
Attack = 125
Defense = 110
Base = 60

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In the Pokemon game franchise, damage is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@DamageCalc.png
#
#In that formula, the variable Modifier is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@ModifierCalc.png
#
#Add code below such that the program prints the total damage
#caused based on the STAB, Type, Critical, Other, Random,
#Level, Attack, Defense, and Base given above.
#
#Hint: Don't try to do all these calculations at once! Break
#the complicated formual down into bite-sized little chunks.


#Add your code here!
modifier = STAB * Type * Critical * Other * Random
total_damage = (((2 * Level + 10) / 250) * (Attack / Defense) * Base + 2) * modifier
print(total_damage)

###

principal = 5000
rate = 0.05
time = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#One important formula in finance and accounting is the
#formula for continually compounding interest. This formula
#takes as input an amount of money invested, an interest
#rate, and an amount of time (in years), and returns the
#value of the investment after that period of time.
#
#The formula is:
#
#   amount = principal * e ^ (rate * time)
#
#Add some code below that will find the amount of money in
#an account with the initial investment, interest rate, and
#number of years given by the variables above. Note,
#however, that we've gone ahead and supplied you the print
#statement: you shouldn't need to change this. Instead, just
#complete this code such that the variable 'amount' is
#created with the right value.
#
#Note that e is a constant; you may access it with math.e --
#you can use math.e as a variable like any other after
#importing math:

import math

#Add your code here such that there exists a variable named
#'amount' with the amount in the account after the given
#time at the given interest rate.
amount = principal * math.e ** (rate * time)


#Don't touch the line of code below!
print("After " + str(time) + " years invested with a " + str(rate) + " interest rate, a $" + str(principal) + " investment will be worth $" + str(round(amount, 2)) + ".")

###

start_hour = 3
start_minute = 48
length = 172

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Let's try something trickier! The variables above represent
#the start time for a run as well as the length of the run
#in minutes. The original values, for example, show a run
#that started at 3:48 and lasted 172 minutes.
#
#Add some code below that will print the time at which the
#run will end, using normal formatting (e.g. 6:40 for the
#original data above). To do this, you'll need to somehow
#find both the hours and minutes of the new time, convert
#both to strings, and add those to the colon ":" to print
#the time.
#
#You may assume that the length of the run will never cross
#12:59 (e.g. you don't have to worry about going from
#12:59 to 1:00 or 23:59 to 0:00). You also don't need to
#worry about the lack of 0 in front of single-digit minute
#counts (e.g. it's fine to show 5:07 as 5:7).


#Add your code here!
hours = length // 60
end_hour = start_hour + hours
length -= 60 * hours
if length + start_minute > 60:
    another_hour = (length + start_minute) // 60
    end_hour += another_hour
    length -= 60 * another_hour
    end_minute = length + start_minute
else:
    end_minute = length + start_minute
    
print(str(end_hour) + ":" + str(end_minute))

###

dosage = 100
time_since_last_dose = 7
is_nighttime = False
took_something_cross_reactive = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Let's try to use our mathematical operators and logical
#operators together.
#
#Imagine you've been battling a cold. You're deciding whether
#to take cough syrup or not, and if so, how much to take.
#
#time_since_last_dose represents the number of hours since
#you last took some cough syrup. For every hour it's been,
#you're allowed to have one dose.
#
#If it's nighttime (is_nighttime), then you may double
#your dose since you won't be taking any until morning.
#
#However, if you've taken something cross-reactive
#(took_something_cross_reactive), then you should not take
#any cough syrup.
#
#Write a program that will print how large a dose of cough
#syrup to take.
#
#HINT: Remember, if you try to multiply a number times a
#boolean, Python treats False as 0 and True as 1. There are
#other ways to do this, though.


#Add your code here!

if took_something_cross_reactive == True:
    dose = 0
else:
    if is_nighttime == True:
        dose = time_since_last_dose * dosage * 2
    elif is_nighttime == False:
        dose = time_since_last_dose * dosage
print(dose)

###

mystery_value_1 = 6
mystery_value_2 = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Print a sentence describing the values you get when you add,
#subtract, multiply, and divide the numbers above. The
#sentence should look like this:
#
#The sum is 9, the difference is 3, the product is 18, and the
#quotient is 2.0.
#
#Make sure to include all commas, spaces, and periods exactly
#as shown -- the only thing that should change based on the
#values of the variables is the numbers.


#Add your code here!
print("The sum is ", mystery_value_1 + mystery_value_2, ", the difference is ", mystery_value_1 - mystery_value_2, ", the product is ", mystery_value_1 * mystery_value_2, ", and the quotient is ", mystery_value_1 / mystery_value_2, ".", sep='')

###













## PRACTICE PROBLEMS

## Practice problem 1
old_balance = "500.45"
deposit = "10"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing code for an ATM that accepts cash
#deposits. You need to update the customer's balance based
#on a deposit amount. However, both the old balance and the
#deposit are given as strings.
#
#Write code below that will print the new balance after the
#deposit is processed. This should be printed along with
#the following text labeling the amount:
#
#The new balance is: 510.45
#
#Note that the old balance will always include change, but
#the deposit will never include change because the ATM has
#no coin slot, only a slot for paper money.
#
#With the initial values of the variables shown above, your
#code should print the text shown on line 17.

#Add your code here!
new_balance = float(old_balance) + float(deposit)
new_balance = str(new_balance)
print("The new balance is:", new_balance)


## Practice problem 2

balance = 500
income = 200
price = 1000
months = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#You're thinking of buying a new computer. The variables
#above represent the balance of your bank account, your
#monthly disposable income, the total price of the computer,
#and the number of months that the retailer will give you to
#pay off the computer.
#
#You can buy the computer if either (a) you can afford to
#buy the computer in cash right now (balance is greater than
#price), or (b) you can afford the monthly payments (income
#is greater than price divided by months).
#
#In other words, if a computer cost $1200 and you spread it
#out over 12 months, you would need your monthly available
#income to be at least $100 to buy the computer, or you
#would need your current bank balance to be at least $1200.
#
#Add some code below that will print True if you're able to
#afford the computer given the values above, and False if you
#are not.

#Add your code below!
print(balance > price or income > price/months)


## Pracitce problem 3

hot = True
cold = False
rainy = True
windy = False
snowy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Earlier, you wrote a program that made clothing
#recommendations based on the weather. Your program could
#specifically recommend a jacket, boots, flip-flips, or a
#tshirt based on whether it was hot, cold, rainy, windy, or
#snowy.
#
#Let's add some accessories to that program: a hat, gloves,
#umbrella, and a scarf.
#
#Specifically, the program should recommend:
#
# - a hat if it's cold, or if it's hot but not rainy (cold
#   and rainy still means a hat, though).
# - gloves if it's cold and either snowy or rainy.
# - an umbrella if it's hot, snowy, or rainy.
# - a scarf if it's cold and windy or cold and snowy
#   unless it's rainy. Rain means no scarf regardless of
#   whether it's cold, windy, or snowy.
#
#Write some code below that will print four lines, one for
#each of the four types of clothing. The lines should look
#like this:
#
#Hat: True
#Gloves: True
#Umbrella: False
#Scarf: False
#
#The values (True and False) will differ based on the
#values assigned to hot, cold, windy, snowy, and rainy
#at the start of the program.

#Add your code here!
print("Hat: " + str(cold or (hot and not rainy)))
print("Gloves: " + str(cold and (snowy or rainy)))
print("Umbrella: " + str(hot or snowy or rainy))
print("Scarf: " + str(((cold and windy) or (cold and snowy)) and not rainy))


## Practice problem 4

import datetime
start_date = datetime.date(2017, 2, 16)
end_date = datetime.date(2017, 2, 16)
start_time = datetime.time(4, 30, 0)
end_time = datetime.time(4, 30, 17)

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above, there are four variables: start_date, end_date,
#start_time, and end_time. start_date and start_time together
#represent a certain time on a certain date, and end_date and
#end_time represent a different time on a different date.
#
#Add some code below that will print True if the end time
#occurs after the start time. Print False if the end time
#occurs before the start time. For example, 11:15:00 on
#01/01/2017 would be before 09:00:00 on 01/05/2017, which
#would be before 11:25:00 on 01/05/2017.
#
#Note that you may use dot notation to access the individual
#parts of the dates and times. You can access the hour,
#minute, and seconds from start_time with start_time.hour,
#start_time.minute, and start_time.second. You can access
#the year, month, and day of start_date with
#start_date.year, start_date.month, and start_date.day. You
#can use the same syntax to access the parts of end_date.
#Note that Python uses 24-hour time.
#
#Hint: You may use conditionals to solve this if you want,
#but you don't need to.
#
#Hint 2: You can use relational operators with both dates
#and times. start_time < end_time is True if start_time is
#before end_time. start_date >= end_date is True if
#start_date is later than end_date, or the same date. With
#this, you can avoid using dot notation altogether if
#you'd like.

#Add your code here!
print(end_date >= start_date and end_time > start_time)


## Practice problem 5

goal = 50000
rate = 0.05
years = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Earlier, we created a program that would calculate the
#value of an investment account after a certain period of
#time using the formula Amount = Principal * e^(Rate * Time).
#
#Let's revisit that, but let's flip the question around.
#Instead of asking, "What will the value of this account
#be?", let's instead ask, "How much do I need to invest to
#have a certain amount by a certain year?" For example,
#"How much do I need to invest to have $50,000 in 5 years
#at 5% (0.05) interest?"
#
#Mathematically, the formula for this is:
#
#  goal / e ^ (rate * number of years) = principal
#
#Add some code below that will print the amount of principal
#needed to reach the given savings goal within the number of
#years and interest rate specified.
#
#In printing your response, you should round the answer to
#two decimal places. Remember, you can do this with this
#code (assuming that your principal is stored in a variable
#called 'principal'): rounded_principal = round(principal, 2)
#
#Remember, you can access e using math.e as long as you don't
#change the next line.
import math

#Add your code here!
principal = goal / math.e ** (rate * years)
rounded_principal = round(principal, 2)
print(rounded_principal)


## Practice problem 6

principal = 40000
rate = 0.05
years = 5
goal = 50000

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Last problem, we calculated how much money a person would
#have to invest to reach a certain savings goal. Now, let's
#modify that to instead take a principal, interest rate,
#number of years, and savings goal, and report whether or not
#the person will meet their savings goal.
#
#Add some code below that will calculate whether the
#investment described by the values above will meet the given
#goal. If it will, print True. If it will not, print False.
#
#As a reminder, the formula for the value of an account after
#a given time (in number of years) is:
#
#  Current Value = principal * e ^ (rate * number of years)
#
#Remember, you can access e using math.e as long as you don't
#change the next line. You don't need to worry about rounding
#on this problem.
import math

#Add your code here!
print(principal * math.e ** (rate * years) >= goal)

## Practice problem 7

spouse_1 = "Caitlin"
spouse_2 = "David"
month = "November"
day = 3
year = 2012
time = "5:00PM"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variables above give some information about a wedding:
#the names of the spouses and the month, day, year, and time
#of the wedding.
#
#Add some code that will write the text to appear on a wedding
#invitation based on these values. For the values shown above,
#this would read:
#
#You are cordially invited to attend the wedding of Caitlin and David, to take place on November 3, 2012 at 5:00PM.
#
#Note that all components of this statement are required: start
#"You are cordially invited to attend the wedding of ", followed
#by spouse_1's name, followed by " and ", followed by spouse_2's
#name, then a comma and space, followed by "to take place on ",
#followed by the month, a space, the day, a comma and space, the
#year, a space, the word "at", a space, the time, and then a
#period.
#
#HINT: Copy the sentence below and replace the current values
#(Caitlin, David, November, etc.) with variables to reduce the
#risk of typoes throwing off your answers.

#Add your code here!
day_str = str(day)
year_str = str(year)
print("You are cordially invited to attend the wedding of " + spouse_1 + " and " + spouse_2 + ", to take place on " + month + " " + day_str + ", " + year_str + " " + "at " + time + ".")


## Practice problem 8

amount = 17

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variable above describes an amount of money measured in
#dollars. Imagine you want to select the bills (1-dollar bills,
#5-dollar bills, 10-dollar bills, etc.) that make up that
#amount of money. For example, 17 dollars is one $10, one $5,
#and two $1s.
#
#Write a program that will print out the bills needed to
#arrive at the amount shown above. Assume that we always want
#the maximum number of large bills: for example, for 17 dollars,
#we want one $10, one $5, and two $1s, not three $5s and two $1s.
#You may assume that the largest bill you have on hand is a
#$50-dollar bill.
#
#Your code should print the following (with the correct numbers
#based on the value of amount):
#
#Fifties: 0
#Twenties: 0
#Tens: 1
#Fives: 1
#Ones: 2

#Add your code here!

print("Fifties:", amount//50)
remainder = amount - 50*(amount//50)

print("Twenties:", remainder//20)
remainder = remainder - 20*(remainder//20)

print("Tens:", remainder//10)
remainder = remainder - 10*(remainder//10)

print("Fives:", remainder//5)
remainder = remainder - 5*(remainder//5)

print("Ones:", remainder//1)


## Practice problem 9
message = "lol"
punct = "!"
num = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Using the values of message, punct, and num, print
#a string that looks like the one below if message = "lol",
#punct = "!", and num = 3:
#
# !!!lollollol!!!lollollol!!!lollollol!!!
#
#Specifically, it should start by printing punct num
#times, then print message num times, repeat that entire
#process num times, and then print punct num times
#again.
#
#Here are a couple other examples:
#
# message = "bbl", punct = ":", num = 1 -> :bbl:
# message = "bbq", punct = "?", num = 2 -> "??bbqbbq??bbqbbq??
# message = "brb", punct = ".", num = 4 -> ....brbbrbbrbbrb....brbbrbbrbbrb....brbbrbbrbbrb....brbbrbbrbbrb....

#Add your code below!
print((punct * num + message * num) * num + num * punct)


## Practice problem 10

num = 3

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that calculates the cube of the number
#given by num. Then, print that number num^2 (num squared)
#times in a row, with no spaces or line breaks in between.
#
#For example, if num is 3, then your code would print:
#
# 272727272727272727
#
#That 27 9 times. 3 squared is 9, 3 cubed is 27, and so
#it prints 27 9 times.
#
#Note: these directions are slightly different from the
#preview we posted! You should be printing num^3 num^2
#times, not printing num^2 num^3 times.

#Add your code here!
cubed_num = str(num ** 3)
print(cubed_num * num ** 2)


## Practice problem 11

current_day = 31
current_month = 5
current_year = 2018
birth_day = 19
birth_month = 12
birth_year = 1990

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Given the current date and birth date held by the variables
#above, calculate and print this person's current age. Note
#that if their birth date has not yet passed this year, your
#result would be one less than if it has.
#
#For example, with the variables given above, the person
#would turn 28 on December 12th, 2018. So, as of May 31st,
#2018, they are 27.

#Add your code here!
current_age = current_year - birth_year - ((current_month, current_day) < (birth_month, birth_day))
print(current_age)


## PRACTICE TEST 1

## Problem 1
mystery_string_1 = "17"
mystery_string_2 = "9"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#mystery_string_1 and mystery_string_2 are each strings
#representing numbers. Write some code below that will find
#the numeric sum of the numbers represented by these strings.
#For example, if the strings were "17" and "9", your answer
#would be 26.
#
#Then, print out the result as part of a sentence of this
#form: "The sum of the two strings is 26". (Do not include
#quotes in your output, only print the message inside the
#quotes.)
#
#You may assume that both strings will hold integers.

#Add your code here!
print("The sum of the two strings is", int(mystery_string_1) + int(mystery_string_2))

## Problem 2

hot = True
cold = False
morning = True
evening = False
night = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that will recommend a meal based on the
#current weather and time of day. Specifically, the program
#should recommend:
#
# - soup if it's cold and either evening or night
# - a biscuit if it's morning and cold
# - cereal if it's morning and hot, or whenever the time is
#   night
# - pizza whenever it's either evening or night
#
#Write some code below that will print four lines, one for
#each of the four meals. The lines should look like this:
#
#Soup: False
#Biscuit: False
#Cereal: True
#Pizza: False
#
#The values (True and False) will differ based on the
#values assigned to hot, cold, morning, evening, and night
#at the start of the program.

#Add your code here!
print("Soup:", cold and (night or evening))
print("Biscuit:", morning and cold)
print("Cereal:", (morning and hot) or night)
print("Pizza:", evening or night)


## Problem 3
current_hour = 5
time_of_day = "PM"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write some code that will print the following message based
#on the values of current_hour and time_of_day:
#
#The current time is 5PM: Cuckoo!Cuckoo!Cuckoo!Cuckoo!Cuckoo!
#
#The values of current_hour and time_of_day should replace
#"5PM", and "Cuckoo!" should be printed current_hour times.
#
#For example, if current_hour was 2 and time_of_day was "AM",
#this would print:
#
#The current time is 2AM: Cuckoo!Cuckoo!

#Add your code here!
print("The current time is", str(current_hour) + time_of_day + ":", "Cuckoo!" * current_hour)


## Problem 4

cost = 150000
rate = 0.0415
years = 15

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#When taking out a mortgage (a type of loan) for a house, the
#mortgage is defined by three variables: the total cost of the
#house, the interest rate at which you will pay back the
#mortgage, and how many months you have to pay back the
#mortgage.
#
#The formula to find the total amount of money that will be
#paid over that time is:
#
#  Cost * Number of Months * Monthly Rate /
#  (1 - ((1 + Monthly Rate) ^ -Number of Months))
#
#Note that both time and rate are based on months: to find the
#monhtly rate, divide the annual rate by 12. To find the number
#of months, multiply the number of years by 12.
#
#Write some code that prints out a sentence like the following
#based on the original cost, interest rate, and number of years
#given above:
#
# The total cost of the house will be $201751.36
#
#You should round the total cost to two decimal places. You can
#do this with this line, assuming the actual value of the
#mortgage is stored in final_cost: final_cost = round(final_cost, 2)


#Add your code here!
monthly_rate = rate/12
months = years * 12

final_cost = (cost * months * monthly_rate) / (1 - ((1 + monthly_rate) ** -months))
rounded_final_cost = round(final_cost, 2)
print("The total cost of the house will be $" + str(rounded_final_cost))


## Problem 5

number = 215

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The number above is given in base 10. Let's convert it to
#base 2 and print it in binary. For example, 215 can be written
#in binary as 11010111.
#
#Each digit of that string corresponds to a power of 2. The far
#left digit represents 128, then 64, then 32, then 16, then 8,
#then 4, then 2, and then finally 1 at the far right.
#
#To convert the number to binary, first check to see if it is
#greater than or equal to 128. If it is, your first digit is 1.
#If not, your first digit is 0. If the number was greater than
#128, subtract 128 (because the 128 is captured by the first
#digit of the string).
#
#Then, repeat that process for 64, 32, 16, 8, 4, 2, and 1.
#
#For example:
#
#215 is >= 128: 1
#87 is >= 64: 11
#23 is not >= 32: 110
#23 is >= 16: 1101
#7 is not >= 8: 11010
#7 is >= 4: 110101
#3 is >= 2: 1101011
#1 is >= 1: 11010111
#
#Note that although we use 'if' a lot to describe this problem,
#this can be done entirely with floor division and modulus.
#Remember, if you convert a boolean to an integer, True becomes
#1 and False becomes 0.
#
#Note that we always work with binary in 8-bit chunks: the
#number 7 would be 00000111, not just 111. That's because inside
#the computer, 8 1s and 0s make a byte, which is the smallest
#practical unit of storage (rarely are bits used outside 8-bit
#bytes).
#
#Print the string that results from this conversion.

#Add your code here!

digit_1 = int(number >= 128)
number %= 128
digit_2 = int(number >= 64)
number %= 64
digit_3 = int(number >= 32)
number %= 32
digit_4 = int(number >= 16)
number %= 16
digit_5 = int(number >= 8)
number %= 8
digit_6 = int(number >= 4)
number %= 4
digit_7 = int(number >= 2)
number %= 2
digit_8 = int(number >= 1)
print(str(digit_1) + str(digit_2) + str(digit_3) + str(digit_4) + str(digit_5) + str(digit_6) + str(digit_7) + str(digit_8))


## Problem 7

num = 4

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that calculates the square and the square root
#of the number given above. Then, it should print the root the
#square number of times. If the square root is a decimal,
#round it down (you can do this by converting the decimal to
#an integer: Python will automatically round it down).
#
#For example, if num is 4, then your code would print:
#
# 2222222222222222
#
#That's 2 16 times. 4 squared is 16, the square root of 4 is 2,
#and so it prints 2 16 times.
#
#For another example: if num is 13, then 13 squared is 169, and
#the square root of 13 is ~3.6. 3.6 rounds down to 3. So, it would
#print 3 169 times.

#Add your code here!
num_squared = num * num
num_sqrt = num ** 0.5
print(num_squared * str((int(num_sqrt))))


## Problem 8

current_hour = 12
current_minute = 37
current_section = "PM"
due_hour = 9
due_minute = 0
due_section = "AM"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Given the current time and deadline time represented by the
#variables above, determine if an assignment is still eligible
#for submission. An assignment is eligible if the time
#represented by current_hour, current_minute, and
#current_section is before the time represented by due_hour,
#due_minute, and due_section.


#Add your code here!
current_hour %= 12
due_hour %= 12

print((current_section < due_section) or
    #First, simply checks for opposing AM/PM'
    ((current_section == due_section) and (current_hour < due_hour)) or
    #If AM/PM for both are same, second checks if the current hour is lower than due hour
    ((current_section == due_section) and (current_hour == due_hour) and (current_minute < due_minute)))
    #If AM/PM and hours same, third checks if the current minute is lower than due minute


## PRACTICE TEST 2

## Problem 1

total = "5.45"
cash = "10.0"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing the code for a cash register. As part
#of this, it will have a total price for a purchase, and an
#amount of cash the buyer is paying. However, both of these
#are represent as strings.
#
#Write some code that will find and print the change that the
#customer is due. For example, if cash is 10.0 and total is
#5.45, then the change would be 4.55.
#
#Then, print the result with a message like this: "Your
#change is: 4.55". Do not include the quotes in your output.
#You may assume total and cash will both be floats.

#Add your code here!
print("Your change is:", float(cash) - float(total))


# Problem 2

hot = True
cold = False
morning = True
evening = False
night = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that will recommend a beverage based on the
#current weather and time of day. Specifically, the program
#should recommend:
#
# - coffee if it's morning, or if it's cold and evening
# - hot tea if it's cold and either evening or night
# - smoothie if it's hot, no matter what time of day it is
# - milkshake if it's hot and evening, or if it's night
#   no matter the temperature
#
#Write some code below that will print four lines, one for
#each of the four beverages. The lines should look like this:
#
#Coffee: True
#Hot Tea: False
#Smoothie: True
#Milkshake: True
#
#The values (True and False) will differ based on the
#values assigned to hot, cold, morning, evening, and night
#at the start of the program.

#Add your code here!
print("Coffee:", morning or (cold and evening))
print("Hot Tea:", cold and (evening or night))
print("Smoothie:", hot)
print("Milkshake:", (hot and evening) or night)


## Problem 3

parent_1 = "Caitlin"
parent_2 = "David"
baby = "Lucy"
month = "January"
day = 2
year = 2015
time = "11:12PM"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The variables above give some information about a baby's birth:
#the names of the parents, the name of the baby, and the month,
#day, year, and time of the wedding.
#
#Add some code that will write the text to appear on a birth
#announcement based on these values. For the values shown above,
#this would read:
#
#Lucy was born to Caitlin and David at January 2, 2015 at 11:12PM.
#
#Note that all components of this statement are required: the
#baby's name, " was born to ", the first parent's name, " and ",
#the second parent's name," at ", the month, the day, a comma, the
#year, " at ", the time, and a period.
#
#HINT: Copy the sentence from above and replace the current values
#(Caitlin, David, January, etc.) with variables to reduce the
#risk of typoes throwing off your answers.

#Add your code here!
print(baby + " was born to " + parent_1 + " and " + parent_2 + " at " + month + " " + str(day) + ", " + str(year) + " at " + time + ".")


## Problem 4

principal = 40000
rate = 0.05
years = 5
goal = 50000

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variables above represent the current status of an
#investment account. The variable principal represents the
#initial value of the account. The variable rate represents
#the interest rate. The variable years represents the number
#of years the account will be allowed to grow.
#
#The variable goal represents the amount of money the investor
#hopes to have saved up by the end of that time period.
#
#Add some code below that will calculate whether the
#investment described by the values above will meet the given
#goal. If it will, print True. If it will not, print False.
#
#The formula for the value of an account after a given time
#(in number of years) is:
#
#  Current Value = principal * e ^ (rate * number of years)
#
#Because of the next line, you may use the variable e to
#represent the value of e. For example, print(e * 2) would
#print 5.43656365691809, which is double the value of e.
from math import e

#Add your code here!
print(goal <= principal * e ** (rate * years)) 


# Problem 5
number = 1101

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The number above represents a binary number. It will always
#be up to eight digits, and all eight digits will always be
#either 1 or 0.
#
#The string gives the binary representation of a number. In
#binary, each digit of that string corresponds to a power of
#2. The far left digit represents 128, then 64, then 32, then
#16, then 8, then 4, then 2, and then finally 1 at the far right.
#
#So, to convert the number to a decimal number, you want to (for
#example) add 128 to the total if the first digit is 1, 64 if the
#second digit is 1, 32 if the third digit is 1, etc.
#
#For example, 00001101 is the number 13: there is a 0 in the 128s
#place, 64s place, 32s place, 16s place, and 2s place. There are
#1s in the 8s, 4s, and 1s place. 8 + 4 + 1 = 13.
#
#Note that although we use 'if' a lot to describe this problem,
#this can be done entirely boolean logic and numerical comparisons.
#
#Print the number that results from this conversion.

#Add your code here!

# Convert the number to a string and calculate the length
binary_str = str(number)
length = len(binary_str)

# Calculate the decimal number
decimal_number = 0
power = length - 1

for digit in binary_str:
    decimal_number += int(digit) * (2 ** power)
    power -= 1

# Print the decimal number
print(decimal_number)


## Problem 6

message = "lol"
punct = "!"
num = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Using the values of message, punct, and num, print
#a string that looks like the one below if message = "lol",
#punct = "!", and num = 3:
#
# lollollol!lollollol!lollollol
#
#Specifically, it should start by printing message num times,
#then print punct. It should repeat that process num times,
#with punct printed between each time (but not at the start or
#end).
#
#Here are a couple other examples:
#
# message = "bbq", punct = "?", num = 2 -> bbqbbq?bbqbbq
# message = "bbl", punct = ":", num = 3 -> bblbblbbl:bblbblbbl:bblbblbbl
# message = "brb", punct = ".", num = 4 -> brbbrbbrbbrb.brbbrbbrbbrb.brbbrbbrbbrb.brbbrbbrbbrb

#Add your code below!
result = (message * num + punct) * (num - 1) + message * num
print(result)


# Problem 7

num = 4

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that calculates the square and the square root
#of the number given above. Then, it should print the square the
#square root number of times. If the square root is a decimal,
#round it down (you can do this by converting the decimal to
#an integer: Python will automatically round it down).
#
#For example, if num is 4, then your code would print:
#
# 1616
#
#That's 16 2 times. 4 squared is 16, the square root of 4 is 2,
#and so it prints 16 2 times.
#
#For another example: if num is 13, then 13 squared is 169, and
#the square root of 13 is ~3.6. 3.6 rounds down to 3. So, it would
#print: 169169169, or 169 3 times.

#Add your code here!
sq = num ** 2
sqrt = num ** 0.5
sqrt_round = int(sqrt)
print((str(sq)) * sqrt_round)


## PROBLEM SET 3

## Problem 1

original_total = "5.45"
donation = "0.55"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing code for the cash register of a
#fast casual restaurant. For this restaurant, customers have
#the option to round up their total and donate the extra to
#charity. For example, if a customer's total was $5.45, they
#could round up to $6.00, and donate the extra $0.55 to
#charity.
#
#The variables original_total and donation represent these
#values; you may assume they will always add to a whole integer.
#Due to an error by another programmer, though, they are initially
#given to you as strings rather than floats.
#
#Write some code that will print the customer's total and
#how much they donated. This sentence should read as follows:
#
# Your total is $6 and you donated $0.55
#
#Note that because we always round up to a full dollar,
#the total should be printed as an integer. Make sure the
#dollar signs are in the right place, with no spaces following
#the dollar signs.

#Add your code here!
original_total_float = float(original_total)
donation_float = float(donation)
total_int = int(original_total_float + donation_float)

print("Your total is $" + str(total_int) + " and you donated $" + donation)


## Problem 2

is_weekend = True
is_holiday = False
is_rainy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that will determine what kind of plans you
#could make based on what kind of day it is and what the
#weather is like.
#
#You have three variables to use in these decisions:
#
# - is_weekend, whether it's a weekend day
# - is_holiday, whether it's a holiday
# - is_rainy, whether it's going to be raining
#
#Your four options are:
#
# - Beach, if it's both a holiday and a weekend as long as
#   it's _not_ raining. If it's raining, the beach is not
#   an option.
# - Lake, if it's a weekend and not raining. It doesn't
#   matter if it's a holiday or not.
# - Park, if it's not raining. It doesn't matter whether
#   it's a weekend or holiday.
# - Home, if it's raining, or if it's neither a weekend
#   nor a holiday.
#
#In other words: the Beach is an option on holiday weekends
#when the weather is good. The Lake is an option on regular
#weekends when the weather is good. The Park is an option
#any time the weather is good. Home is an option if it's
#raining, or if it's not a weekday that isn't a holiday.

#
#Print your results like this, based on whether each is
#an option according to the logic above:
#
# - Beach: False
# - Lake: True
# - Park: True
# - Home: False

#Add your code here!
print("Beach:", is_holiday and is_weekend and not is_rainy) 
print("Lake:", is_weekend and not is_rainy)
print("Park:", not is_rainy)
print("Home:", is_rainy or not (is_weekend or is_holiday))


## Problem 3

assignment_num = 1
day = "Friday"
month = "September"
date = 13
time = "5PM"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#At the beginning of each week, we try to post an announcement
#outlining everything you need to do during the week. Let's
#see if we could parameterize that.
#
#The variables above -- assignment_num, day, month, date, and
#time -- give various values about when an assignment is due.
#Using these values you should print a sentence like this:
#
# You should submit Assignment 1 by Friday, September 13 at 5PM.
#
#The general form would be:
# You should submit Assignment [assignment_num] by [day], [month] [date] at [time].
#
#Make sure the punctuation and spaces are all exactly as written.
#There should be spaces before and after the assignment number,
#a comma and space after the day of the week, and a period
#after the time.

#Add your code here!
print("You should submit Assignment " + str(assignment_num) + " by " + day + ", " + month + " " + str(date) + " at " + time + ".")


## Problem 4

value = 100
quantity = 5
interest = 0.02
dividend = 1.05
dividend_frequency = 4
years = 10
goal = 250

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Typically when you purchase a stock on the stock market, you
#do so with the hope that it will increase in value, and you
#can then sell it for a profit.
#
#Some stocks also pay dividends. A dividend is a small amount
#of money that a stock pays its owners on a regular interval.
#For example, if a stock pays a $1.05 dividend 4 times a year,
#then for each share of the stock you own, you would receive
#$4.20 per year.
#
#The variables above give a number of parameters for a
#particular stock purchase you are considering:
#
# - value, the current value of the stock
# - quantity, the number of shares you may buy
# - interest, the estimated yearly interest rate it will earn
# - dividend, the predicted value of the dividend it will pay
# - dividend_frequency, the predicted frequency with which it
#   will pay that dividend
# - years, the number of years you plan to hold the stock
# - goal, the amount of money you want to earn from the
#   investment
#
#Your goal is to print True if this investment will meet your
#savings goal, and False if it will not. In other words, if
#the total amount of money you will earn from the stock --
#including its initial value, interest, and dividends -- is
#greater than goal, you print True. Otherwise, you print False.
#
#You can find the total amount of money generated by dividends
#by multiplying the dividend by its yearly frequency by the
#number of years.
#
#The formula for the current value of an investment based on
#its initial value, its interest rate, and its years of investment
#is:
#
# new value = initial value * e ^ (interest rate * number of years)
#
#The variable interest can be put directly into this formula (you
#do not need to add 1). The following line of code will let you use
#the variable e in your code for e:
from math import e

#Remember, your only goal is to print True if you should buy the
#stock, False if you should not. Using the initial values of the
#variables above, this would initially print False: the total
#value would be around $164, well short of the goal of $250.

#Add your code here!
dividend = dividend * dividend_frequency * years
print(goal <= value * e ** (interest * years) + dividend)


## Problem 5
donuts = 119

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#A donut shop sells donuts in four sizes: packs of 60 donuts,
#packs of 12 donuts, packs of 3 donuts, and individual donuts.
#
#To divide donuts into packs, they start by making as many of
#the largest pack as they can. Then, they make as many of the
#next largest pack, then the next pack, then finally they sell
#the remaining donuts individually. For example, if they baked
#119 donuts, then they would divide those donuts into one
#pack of 60, four packs of 12, three packs of 3, and 2
#individual donuts.
#
#Based on the variable donuts above, calculate how many of
#each size they will make. Print the results according to
#this template:
#
#Packs of 60: 1
#Packs of 12: 4
#Packs of 3: 3
#Packs of 1: 2

#Add your code here!
print("Packs of 60:", donuts//60)
remainder = donuts - 60*(donuts//60)

print("Packs of 12:", remainder//12)
remainder = remainder - 12*(remainder//12)

print("Packs of 3:", remainder//3)
remainder = remainder - 3*(remainder//3)

print("Packs of 1:", remainder//1)
remainder = remainder - 1*(remainder//1)


## Problem 6

num_a = 1
num_b = 2
num_c = 3
num_d = 4
num_e = 5
num_z = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#It's been said that the most confusing WiFi password you can
#have is: 2444666668888888, because you can read it as: one 2,
#three 4s, five 6s, seven 8s. Whisper the 's' and the listener
#will think it's just 12345678.
#
#Write a program that will generate a bad password according to
#a similar formula. Specifically, the variables above -- num_a,
#num_b, num_c, num_d, and num_e -- give you 5 integers. Your
#password should be: num_a num_b times, num_b num_c times,
#num_c num_d times, num_d num_e times, and num_e num_a times, in
#that order. Then, the entire password should repeat num_z times.
#
#So, for the initial values of num_a through num_e, this would
#be:
#
# 112223333444445112223333444445112223333444445
#
#That is, 1 two times, 2 three times, 3 four times, 4 five times,
#and 5 one time, all then repeated 3 times.
#
#You may assume all numbers will be between 0 and 9. Note, though,
#that if a number is 0, that means the preceding number will
#not actually appear. Moreover, if num_z is 0, the result string
#should be empty.

#Add your code below!

str_num_a = str(num_a)
str_num_b = str(num_b)
str_num_c = str(num_c)
str_num_d = str(num_d)
str_num_e = str(num_e)
str_num_z = str(num_z)

print(((str_num_a * num_b) + (str_num_b * num_c) + (str_num_c * num_d) + (str_num_d * num_e) + (str_num_e * num_a)) * num_z)


## Problem 7

previous_color = "Red"
previous_value = "9"
current_color = "Red"
current_value = "7"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In the card game Uno, players take turns playing cards on
#top a growing pile of cards facing up. On your turn, the
#card you put down must meet one of two conditions:
#
# - It must either have the same color _or_ the same value
#   as the previous card, or
# - It must be black. Black cards (Wild and Wild Draw 4) may
#   be played at any time, no matter the value of the previous
#   card.
#
#Write some code that prints True if the card represented by
#current_color and current_value may be played on top of the
#card represented by previous_color and previous_value. Print
#False if it may not be played.
#
#You may assume that previous_color will never be Black.

#Add your code here!
print(previous_color == current_color or previous_value == current_value or current_color == "Black")


## Problem 8

current_day = 12
current_month = 9
current_year = 2019
exp_day = 13
exp_month = 9
exp_year = 2019

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Given the current date and expiration date held by the
#variables above, determine whether a food with the listed
#expiration date has expired. Print True if it has expired,
#False is it has not. A food is defined as expired if the
#current date is _after_ the expiration date, not equal to
#it.


#Add your code here!
# Compare the current date with the expiration date
expired = (current_year > exp_year) or \
          (current_year == exp_year and current_month > exp_month) or \
          (current_year == exp_year and current_month == exp_month and current_day > exp_day)

# Print whether the food has expired or not
print(expired)


### EXAM ###

slices_per_pizza = 6
pizzas = 5
students = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are throwing a pizza party for some students.
#You order some number of pizzas, each with some number of
#slices. You want each student to receive the same number
#of slices, even if that means some slices are left over.
#
#The number of pizzas, number of slices per pizza, and
#number of students are given by the variables
#slices_per_pizza, pizzas, and students. Using this information,
#write some code that prints out a sentence like the following:
#
#Each student gets 4 slices, and there will be 2 left over.
#
#The number of slices per person will be calculated as the total
#number of slices (number of pizzas times slices per pizza)
#divided by the number of students rounded down to a whole
#number. The number of slices left over will be whatever is left
#after that calculation.


#Write your code here!
slices_per_person = (slices_per_pizza * pizzas) // students
slices_remaining = (slices_per_pizza * pizzas) - (slices_per_person * students)

print("Each student gets " + str(slices_per_person) + " slices, and there will be " + str(slices_remaining) + " left over.")

###

in_a_hurry = True
is_raining = False
have_backpack = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are deciding how to get to school today. You have
#four options: walk, bike, bus, or drive.
#
#There are three variables that determine which options you
#might choose:
#
# - in_a_hurry: whether you're in a hurry to get to class.
# - is_raining: whether it's raining outside
# - have_backpack: whether you need to carry a backpack
#
#The following rules tell you whether each option is
#possible:
#
# - Walking is an option if it is not raining and you
#   are not in a hurry to get to class.
# - Biking is an option as long as it is not raining,
#   unless you need to carry a backpack.
# - A bus is an option as long as you are not in a hurry
#   to get to class.
# - A car is your last resort: it is only an option if
#   none of the other three are options.
#
#Print True or False for each option, according to the
#following structure:
#
#Walk: False
#Bike: False
#Bus: False
#Car: True


#Add your code here!
print("Walk:", not is_raining and not in_a_hurry)
print("Bike:", not is_raining and not have_backpack)
print("Bus:", not in_a_hurry)
print("Car:", not(not is_raining and not in_a_hurry) and not(not is_raining and not have_backpack) and not(not in_a_hurry))

###

bottle_month = "Feb"
bottle_day = 5
bottle_year = 21
use_by_month = "March"
use_by_day = 6
use_by_year = 21

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The lines above give the information for the bottle date and
#use by date for a bottle of salad dressing.
#
#Write some code that will generate what should be printed on
#the bottle. You should print two lines. The first line should
#be the bottle date itself, according to the following structure:
#
#Bottled Feb521
#
#Feb, 5, and 21 should be replaced by the values of bottle_month,
#bottle_day, and bottle_year, respectively.

#The second line should be the use by date, printed in more
#natural language, according to the following structure:
#
#For best experience, please use by March 6 2021.
#
#March, 6, and 21 should be replaced by the values of use_by_month,
#use_by_day, and use_by_year respectively. Note that you will need
#to add the '20' to the year; only the last two digits of the year
#are contained in use_by_year. Don't forget the period.


#Add your code here!
print("Bottled", bottle_month + str(bottle_day) + str(bottle_year))
print("For best experience, please use by " + str(use_by_month) + " " + str(use_by_day) + " 20" + str(use_by_year) + ".")

###

original_price = 15.0
num_shares = 100
final_price = 100.0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Short selling is when an investor borrows some shares of a
#stock to sell at the current price, expecting that at a later
#date they can buy the stock at a lower price to give back.
#For example, if you anticipate the stock GME will drop in
#value, you might borrow 100 shares today, sell them for $15
#each, and expect to buy them back in two weeks for $10,
#netting you $500 in profit (100 * $15 - 100 * $10 = $500).
#
#A short squeeze occurs when instead of falling, the stock
#price rises. If instead of dropping to $10 per share, GME
#rose to, say, $100 per share, then the investor would owe
#$8500 (100 * $15 - 100 * $100 = -$8500).
#
#For this problem, let's only look at these short squeezes.
#original_price, num_shares, and final_price give the
#price at which an investor buys a stock, the number of
#shares they buy, and the price of the stock when they must
#buy their shares to return.
#
#Calculate the total amount lost by this attempt at short
#selling, and print it according to the following format:
#
#You lost: $8500.0
#
#You should round this number to two decimal places. To do
#this, you may use the round function. For example:
#
#rounded_num = round(123.456, 2)
#
#...will result in rounded_num = 123.46. Do not worry about
#adding the extra 0 if the result is an even tenth ($8500.0
#is fine, you don't need to print $8500.00).


#Add your code here!
loss = num_shares * final_price - num_shares * original_price
rounded_loss = round(loss, 2)
print("You lost: " + "$" + rounded_loss)

###

total_seconds = 5278

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are writing the software for a call center. As
#part of this, you need to tell the customer currently on hold
#what their estimated wait time is.
#
#The software that actually generates the estimated wait time
#returns it as a number of seconds. However, telling the customer
#"Your estimated wait time is 5278 seconds" is pretty meaningless.
#Instead, we want to say something like:

#Your estimated wait time is 1 hour(s), 27 minute(s), and 58 second(s).
#
#Add some code that will print that sort of estimated wait time,
#replacing 1, 27, and 58 with the actual numbers derived from the
#variable total_seconds. Remember, there are 60 seconds in a minute,
#and 60 minutes in an hour: you never wawnt to mention more than 60
#minutes (as that would add an hour) or 60 seconds (as that would add
#a minute).


#Add your code here!
hours = int(total_seconds / 60 / 60)
minutes = int(total_seconds / 60 - hours * 60)
seconds = int(total_seconds - hours * 60 * 60 - minutes * 60)
print("Your estimated wait time is", hours, "hour(s),", minutes, "minute(s),", "and", seconds, "second(s).")

###

original_number = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code that will triple original_number in three ways,
#in this order:
#
# - First, triple the number by cubing it (raising it to the
#   3rd power)
# - Second, triple the number by duplicating it 3 times.
# - Third, triple the number by multiplying it by 3 again.
#
#For example, original_number 5 would first be cubed into
#125 (5^3 = 125), then it would be tripled to 125125125
#(duplicating 125 three times), and then it would be tripled
#to 375375375 (125125125 * 3 = 375375375).
#
#Print out the number after you've tripled it all three times.


#Add your code here!
original_number **= 3
original_number = str(original_number) * 3
original_number = int(original_number) * 3
print(original_number)

###

order_total = 30
coupon_value = 3
coupon_valid = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you are writing the code for an online shopping
#platform. On this platform, a $5 shipping fee is added unless
#the order total is over $50; if the original order total is $50
#or higher (before subtracting coupons), shipping is free.
#
#Additionally, buyers may have coupons. If the coupon is valid,
#the price is subtracted from the order.
#
#The order total, coupon value, and coupon validity are
#reflected above as order_total, coupon_value, and coupon_valid.
#Based on these, calculate the total for an order, and print the
#sentence:
#
#Your total is: $32
#
#32 would be replaced by the actual value based on the values
#of order_total, coupon_value, and coupon_valid.
#
#HINT: You may use conditionals on this problem, but you don't
#need to. Remember, you can use boolean statements in mathematical
#calculations. Multiplying by False is the same as multiplying
#by 0; multiplying by True is the same as multiplying by 1.


#Add your code here!
if order_total < 50:
    if coupon_valid:
        order_total = order_total - coupon_value + 5
    else:
        order_total += 5
else:
    if coupon_valid:
        order_total -= coupon_value

print("Your total is: " + "$" + str(order_total))
