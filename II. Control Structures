## CONTROL STRUCTURES

mystery_value = 1

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#All of the indentation has been removed from this program. 
#Fix the program by correcting the indentation levels. Note
#that you should add indentation by adding FOUR SPACES to the
#start of the lines you want to indent. If you use Tab, you
#will receive an IndentationError in your output.
#
#Hint: you'll learn more about conditionals in the next
#chapter, but for now, all you need to know is that if a line
#is indented under another line, it's controlled by that line.

if mystery_value > 0:
    print("This line should only run if 'mystery_value' is GREATER than 0.")
    print("This line should only be printed if the above line is printed.")
print("This line should always be printed.")
if 0 > mystery_value:
    print("This line should only run if 'mystery_value' is LESS than 0.")
print("This line should always be printed.\n")

###

mystery_value = -1

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Notice that when you run this code, you encounter an error.
#Instead of this error, we want this code to print "Boo :("
#(without the quotes) if mystery_value is not greater than 0.
#
#Fix this error WITHOUT modifying the existing code. You can
#fix this error by only adding some code before the existing
#code below.

#Make any changes or additions here!
result = "Boo :("

#Don't change any of the code below!
if mystery_value > 0:
    print("mystery_value is greater than 0.")
    result = "Yay!"
else:
    print("mystery_value is less than 0.")

print(result)

###

mystery_int_1 = 15
mystery_int_2 = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variables below hold two integers, mystery_int_1 and
#mystery_int_2. Complete this program below such that it
#prints "Factors!" if either of the numbers is a factor of
#the other. If neither number is a factor of the other,
#do not print anything.
#
#Hint: You can do this with just one conditional statement
#by using the logical expressions we learned earlier (and,
#or, and not). You'll also use the modulus operator we
#learned in Chapter 2.4.

#Add your code here!
if mystery_int_1 % mystery_int_2 == 0 or mystery_int_2 % mystery_int_1 == 0:
    print("Factors!")

###

mystery_state = "Georgia"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#It's snowing!
#
#The variable above holds the name of the state that you're
#in (hypothetically). Complete the code below so that it
#prints the following messages depending on what state you're
#in:
#
# - "School isn't cancelled." if we're in New Jersey
# - "School is postponed." if we're in North Carolina
# - "School is cancelled!" if we're in Georgia
# - "idk wear a sweater" if we're in any other state (or if
#   the value doesn't represent a valid state).

#Add your code here!
if mystery_state == "New Jersey":
    print("School isn't cancelled.")
elif mystery_state == "North Carolina":
    print("School is postponed.")
elif mystery_state == "Georgia":
    print("School is cancelled!")
else:
    print("idk wear a sweater")

###

temperature = -3.7
celsius = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above are given two variables. temperature is a float that
#holds a temperature. celsius is a boolean that represents
#whether the temperature is in Celsius; if it's False, then
#the given temperature is actually in Fahrenheit.
#
#Add some code below that prints "Freezing" if the values
#above represent a freezing temperature, and "Not freezing"
#if they don't.
#
#In Celsius, freezing is less than or equal to 0 degrees.
#In Fahrenheit, freezing is less than or equal to 32 degrees.

#Add your code here!
if (temperature <= 0 and celsius == True) or (temperature <= 32 and celsius == False):
    print("Freezing")
else:
    print("Not freezing")

###

mystery_string = "zizazzle"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variable above creates a string. Add some code below
#that will print based on the maximum number of consecutive
#z's in the string:
#
# - If z appears three or more times in a row, print "I'm sleepy..."
# - If z appears two times in a row, print "I love ZZ Top!"
# - If z appears once, print "One is the loneliest number."
# - If z does not appear, print "Who needs z anyway?"
#
#The message you print should correspond to the most
#consecutive z's: in the original value of mystery_string,
#for example, you'd print "I love ZZ Top!" because there are
#two consecutive z's, even though there are also some
#individual z's.
#
#Ignore upper-case z's -- only look for lower-case z's.
#
#Hint: Remember the 'in' operator! It returns true if the
#first string is found within the second string. For example,
#"bog" in "boggle" would return True, but "bog" in "artemis"
#would return False.

#Add your code here!
if "zzz" in mystery_string:
    print("I'm sleepy...")
elif "zz" in mystery_string:
    print("I love ZZ Top!")
elif "z" in mystery_string:
    print("One is the loneliest number.")
else:
    print("Who needs z anyway?")

###

team_1 = "Georgia Tech"
team_1_score = 28
team_2 = "Georgia"
team_2_score = 27

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above we've created four variables: two team names and two
#scores. A team wins if their score is greater than the other
#team's score.
#
#Add to the code below. To print a messages like these
#depending on the values:
#
# - If one team beat the other, print:
#     "[winner] beat [loser] by [margin]"
# - If neither team won, print:
#     "[team_1] played [team_2] and it was a tie"
#
#For example, with the original values in this code, you
#should print "Georgia Tech beat Georgia by 1"
#
#Hint: to make this easier, create three variables: winner,
#loser, and margin. Then, find their values before worrying
#about printing the final message.

#Add your code here!
difference_1 = str(team_1_score - team_2_score)
difference_2 = str(team_2_score - team_1_score)
if team_1_score > team_2_score:
    print(team_1 + " beat " + team_2 + " by " + difference_1)
elif team_2_score > team_1_score:
    print(team_2 + " beat " + team_1 + " by " + difference_2)
else:
    print(team_1 + " played " + team_2 + " and it was a tie ")

###

item = "quesadilla"
meat = "steak"
queso = True
guacamole = True
double_meat = False

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Let's further expand our previous program to cover a broader
#menu variety. Instead of just burritoes, now the program
#should cover three menu items: quesadillas, burritoes, and
#nachos. Instead of separate booleans for steak and pork,
#we instead have a string that could be "steak", "pork",
#"chicken", "tofu", and "beef". We still have booleans for
#queso and guacamole, but we also have a boolean for double
#meat.
#
#Your code should calculate the price as follows:
#
# - The base price for a quesadilla is 4.00, for nachos is
#   4.50, and for burritoes is 5.00.
# - If meat is steak or pork, add 0.50. Any other meat adds
#   no money to the price.
# - guacamole always adds 1.00 to the price.
# - queso adds 1.00 to the price UNLESS the item is nachos,
#   in which case it adds nothing.
# - double_meat adds 1.50 if the meat is steak or pork, or
#   1.00 otherwise.

if item == "quesadilla":
    base_price = 4.0
if item == "nachos":
    base_price = 4.5
if item == "burrito":
    base_price = 5.0
    
if (meat == "steak" or meat == "pork") and not double_meat:
    base_price += 0.5
if (meat == "steak" or meat == "pork") and double_meat:
    base_price += 1.5
if (meat == "chicken" or meat == "tofu" or meat == "beef") and double_meat:
    base_price += 1.0
    
if guacamole:
    base_price += 1.0

if queso and not item == "nachos":
    base_price += 1.0
    
print(base_price)

###

sunny = True
windy = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Below, we've gone ahead and written some code that uses a
#conditional to print a message based on the variables above.
#Revise this code so that it uses nested conditionals instead
#of the 'and' operator. There should be _no_ instances of the
#'and' reserved word in your code, but it should behave the
#same as it did originally.

if sunny:
    if not windy:
        print("Wear a hat!")
    else:
        print("Enjoy the breeze!")

#if sunny and not windy:
#    print("Wear a hat!")

###

entered = "abc123"
password = "abc123"
tries = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above we've created three variables representing an attempt
#to enter a password. Add some code below that will print the
#result of this check:
#
# - "Login successful." if entered is the same as password
#   and tries is less than or equal to 3.
# - "Incorrect password." if entered is not the same as 
#   password, but tries is less than or equal to 3.
# - "Tries exceeded." if tries is greater than 3.
#
#You don't need to worry about incrementing tries if the
#password is incorrect.

#Add your code here!
if tries <= 3:
    if entered == password:
        print("Login successful.")
    else:
        print("Incorrect password.")
else:
    print("Tries exceeded.")

###

balance = 20.0  
salesTax = 1.08 
cardholderName = "David Joyner"
trustedVendors = ["Maria's", "Bob's", "Vrushali's", "Ling's", "Tia's"]

purchasePrice = 19.0
customerName = "David Joyner"
vendor = "Freddy's"
overdraftProtection = True

#This nested conditional checks whether the balance is less than or
#equal to the total price and overdraft protection is not available;
#otherwise, whether the cardholder is not also the customer; and
#otherwise, whether the vendor is not trusted.
if balance <= purchasePrice * salesTax and not overdraftProtection:
    print("Purchase not approved; no funds or overdraft protection.")
else:
    if not cardholderName == customerName:
        print("Purchase not approved; invalid customer.")
    else:
        if not vendor in trustedVendors:
            print("Purchase not approved; untrusted vendor.")
        else:
            print("Purchase approved!")
print("Done!")

###

#In the designated areas below, write the three for loops
#that are described. Do not change the print statements that
#are currently there.

print("First loop:")

#Write a loop here that prints the numbers from 1 to 10,
#inclusive (meaning that it prints both 1 and 10, and all
#the numbers in between). Print each number on a separate
#line.

for i in range (1,11):
    print(i)
print("Second loop:")

#Write a loop here that prints the numbers from -5 to 5,
#inclusive. Print each number on a separate line.

for i in range (-5, 6):
    print(i)
print("Third loop:")

#Write a loop here that prints the even numbers only from 1
#to 20, inclusive. Print each number on a separate line.
for i in range (2, 21, 2):
    print(i)

#Hint: There are two ways to do this. You can use the syntax
#for the range() function shown in the multiple-choice
#problem above, or you can use a conditional with a modulus
#operator to determine whether or not to print.

###

mystery_int = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In math, factorial is a mathematical operation where an
#integer is multipled by every number between itself and 1.
#For example, 5 factorial is 5 * 4 * 3 * 2 * 1, or 120.
#Factorial is represented by an exclamation point: 5!
#
#Use a for loop to calculate the factorial of the number
#given by mystery_int above. Then, print the result.
#
#Hint: Running a loop from 1 to mystery_int will give you
#all the integers you need to multiply together. You'll need
#to track the total product using a variable declared before
#starting the loop, though!

#Add your code here!
factorial = 1
for i in range (1, mystery_int + 1):
    factorial *= i
print(factorial)

###

mystery_string = "CS1301"

#Write a for-each loop that lists each character in
#mystery_string with its index. For example, if the string
#was "David", the output would be:
#0 D
#1 a
#2 v
#3 i
#4 d
#
#Note that the first item is #0, the second is #1, and so
#on! We'll talk about why that is in Unit 4.
#
#Hint: You'll need a separate variable to keep track of how
#many letters you've printed! You may not use the range
#function on this problem.

#Add your code here!
num_letter = 0
for letter in mystery_string:
    print(num_letter, letter)
    num_letter += 1

###

mystery_value = 87

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a while loop that continues to add 9 to mystery_value
#until mystery_value is greater than 100. Each time 9 is
#added, print the *new* value of mystery_value. For example,
#with mystery_value = 87, your code should print 96 and 105.

#Add your code here!
while mystery_value <= 100:
    mystery_value += 9
    print(mystery_value)

###

mystery_int_1 = 3
mystery_int_2 = 4
mystery_int_3 = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above are three values. Run a while loop until all three
#values are less than or equal to 0. Every time you change
#the value of the three variables, print out their new values
#all on the same line, separated by single spaces. For
#example, if their values were 3, 4, and 5 respectively, your
#code would print:
#
#2 3 4
#1 2 3
#0 1 2
#-1 0 1
#-2 -1 0

#Add your code here!
while mystery_int_1 > 0 or mystery_int_2 > 0 or mystery_int_3 > 0:
    mystery_int_1 -= 1
    mystery_int_2 -= 1
    mystery_int_3 -= 1
    print(mystery_int_1, mystery_int_2, mystery_int_3)

###

beats_per_measure = 4
measures = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In music, a song's time signature is given in terms of beats
#per measure. A common time signature is 4 beats per measure:
#for every measure of music, a conductor might count from 1
#to 4 with the tempo of the music.
#
#A song then has a number of measures. For example, a short
#song might have only 5 measures. In which case, a conductor
#would count from 1 to 4 five times. If the time signature had
#instead been 3 beats per measure, she would could from 1 to 3
#five times instead.
#
#Write a nested for loop that will print out the beats of the
#piece of music. For example, if the song had 4 beats per
#measure and only 2 measures, this would print out:
#
#1
#2
#3
#4
#1
#2
#3
#4
#
#We print from 1 to 4 before starting over because there are
#4 beats per measure, and we print them all twice because there
#are two measures.

#Add your code here! Using the original values of the variables
#above, this will initially print 1 through 4 five times for a
#total of 20 lines.
for measure in range(measures):
    for beat in range(1, beats_per_measure + 1):
        print(beat)

###

lyrics = ["I wanna be your endgame", "I wanna be your first string",
          "I wanna be your A-Team", "I wanna be your endgame, endgame"]
lines_of_sanity = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you have a song stuck in your head. Worse, you have
#only a few lines from a song stuck in your head. They just
#keep repeating over and over. The specific lines you have
#stuck in your head are stored in the variable lyrics.
#
#You can only stay sane so long while doing this.
#Specifically, you can only listen to lines_of_sanity lines
#before going crazy. Once you've reached lines_of_sanity,
#your brain will finish out the current list, then crumble.
#
#Write some code that will print the lyrics that run through
#your head. It should keep repeating each line one-by-one
#until you've reached lines_of_sanity lines. Then, it should
#keep going to finish out the current verse. After that, print
#"MAKE IT STOP" in all caps (without the quotes).
#
#HINT: Remember, we can iterate through items in a list using
#this syntax:
#
#  for item in list_of_items:
#
#HINT 2: You'll probably need a counter to count how many lines
#have been printed so far.

#Add your code here! Using the initial inputs from above, this
#should print 9 lines: all 4 lines of the list twice, followed
#by MAKE IT STOP
counter = 0
while counter < lines_of_sanity:
    for line in lyrics:
        print(line)
        counter += 1

print("MAKE IT STOP")

###

#When writing out mathematical equations for younger
#audiences, we usually want to use the traditional division
#and multiplication symbols, ÷ and ×, instead of slashes and
#asterisks. These keys aren't on the keyboard, though. So,
#let's write functions that will print them.
#
#First, write two functions: one called print_division_symbol
#and one called print_multiplication_symbol. The functions
#should do what their names suggest: print_division_symbol
#should print a division symbol, print_multiplication_symbol
#should print a multiplication symbol. You can copy the
#characters for those symbols from these directions.
#
#Then, after writing those two functions, call them in the
#same order: print_division_symbol, then
#print_multiplication_symbol. The output of your code should
#thus be ÷, then ×, each on their own line.
#
#Note that you don't need to worry about the end="" thing
#you saw in the video: just print the symbols on their own
#lines. Note also that if you receive a UnicodeEncodeError,
#try submitting your code instead of running it: that error
#happens sometimes, but only affects Run, not Submit.
#
#HINT: you're writing two functions. You don't want one to
#be inside the other.

#Write your two functions here!
def print_division_symbol():
    print("÷")

def print_multiplication_symbol():
    print("×")

#Call your two functions here!
print_division_symbol()
print_multiplication_symbol()

###

#Take a look at the three functions completely written
#below. It's your job to correctly call each function with
#the following parameters:
#
#  Function 1: the string "Black Horse and a Cherry Tree" 
#  Function 2: no parameters
#  Function 3: these five numbers: 80, 80, 95, 86, 79

#Function 1
def cherry_pie(song):
    if ("Cherry" in song):
        print("Sheee's my cherry pie")
    else:
        print("Huh... must be an American Pie.")

#Function 2
def should_I_go_to_Waffle_House():
    print(True)

#Function 3
def average_grades(num1, num2, num3, num4, num5):
    sum = num1 + num2 + num3 + num4 + num5
    average = sum / 5
    print(average)

#Add your function calls here! Don't change any of the
#code above.
cherry_pie("Black Horse and a Cherry Tree")
should_I_go_to_Waffle_House()
average_grades(80, 80, 95, 86, 79)

###

#Write a function called get_todays_date that returns
#today's date as a string, in the form year/month/day.
#For example, if today is January 15th, 2017, then it
#would return 2017/1/15.
#
#Remember, you took care of the string formatting part of
#this exercise in 2.2.9 Coding Exercise 1! Now, you're
#converting it to a function that returns the string.
#
#Note that the line below will let you access today's date
#using date.today() anywhere in your code.
from datetime import date

#Write your function here!
def get_todays_date():
    return str(date.today().year) + "/" + str(date.today().month) + "/" + str(date.today().day)

#If you want to test your code, you can do so by calling
#your function below. However, this is no longer required
#for grading.
print(get_todays_date())

###

#Write a function that takes in one integer parameter, the
#side length of a square, and returns the area. The function
#should be named find_area, and have one parameter:
#side_length.

#Write your function here!
def find_area(side_length):
    result = side_length * side_length
    return result

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "A square with side length 4 has an area of 16".

test_side_length = 4
print("A square with side length", test_side_length, "has an area of", find_area(test_side_length))

###

#Helping us develop this class are a team of teaching
#assistants, often called TAs for short.
#
#Write a function called my_TAs. The function should take as
#input three strings: first_TA, second_TA, and third_TA. It
#should return as output the string, "[first_TA], [second_TA],
#and [third_TA] are awesome!", with the values replacing the
#variable names.
#
#For example, my_TAs("Sridevi", "Lucy", "Xu") would return
#the string "Sridevi, Lucy, and Xu are awesome!"
#
#Hint: Notice that because you're returning a string instead
#of printing a string, you can't use the print() statement
# -- you'll have to create the string yourself, then return
#it!

#Write your function here!
def my_TAs(first_TA, second_TA, third_TA):
    return first_TA + ", " + second_TA + ", and " + third_TA + " are awesome!"

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Joshua, Jackie, and Marguerite are awesome!".
test_first_TA = "Joshua"
test_second_TA = "Jackie"
test_third_TA = "Marguerite"
print(my_TAs(test_first_TA, test_second_TA, test_third_TA))

###

#Write a function called greeting. greeting should have one
#parameter, a string representing a name. It should return
#a string with the message "Hi [name]!", where the value of
#the parameter is used in place of [name].
#
#For example:
#
# greeting("David") -> "Hi David!"

def greeting(input_name):
    return "Hi " + input_name + "!"

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Hi David!"

a_name = "David"
message = greeting(a_name)
print(message)

###

#Below we've written a function that is supposed to take in
#four parameters and produce a string representing the cost
#of a person's weekly soda consumption. Below the function
#definition, we're calling the function.
#
#However, right now, the code is erroring out. Fix this code
#without changing the code inside the function. You may
#change either the function declaration (on line 11) or the
#function call on line 27.

def soda_habit(sodas_per_week, price_per_soda, calories_per_soda, preferred_soda):
    
    #Above, we've moved preferred_soda to the beginning and
    #sodas_per_week to the end, so our original function
    #call will work.
    
    #Don't change the body of this function!
    
    money_spent = price_per_soda * sodas_per_week
    calories_consumed = calories_per_soda * sodas_per_week
    
    summary_string = "You're spending $" + str(money_spent) + " on " + preferred_soda + " per week! "
    summary_string += " That's " + str(calories_consumed) + " calories!"
    
    return summary_string

result = soda_habit(9, 1.75, 140, "Coca-Cola")
print(result)

###

#We've written the function, reverse, below. This function
#takes a string and returns the reverse of it. There are two
#scope errors somewhere in the code. Read through all the
#code below to find and fix the errors, so that the function
#produces the correct output and the result of the function
#is correctly printed. Note that you should not change the
#three lines that are already present in the function, but
#you may add lines before them, or you may change or add to
#the lines outside the function.
#
#Note that your goal here is to fix both the function itself
#and the program as a whole. So, your function should be
#able to be called on a new string, and the program when
#run should print the reverse of the string originally on
#line 29.

def reverse(a_string):
    #You may add code before the following three lines.
    rev = ""
    
    #Don't change these three lines.
    for i in range(len(a_string)-1, -1, -1):
        rev = rev + a_string[i]
    return rev

#You may change or add to the following lines.
rev = reverse("This string should be reversed!")
print(rev)

###

#Write a function called snowed_in that will determine
#whether school is closed based on the weather and
#temperature. We'll pretend the school is in Georgia, where
#a little snow or sub-freezing temperatures are enough to
#close down schools!
#
#The function should take three parameters:
#
# - temperature, a float
# - weather, a string
# - is_celsius, a boolean
#
#The function should return True if temperature is below
#freezing (32 if is_celsius is False, 0 if is_celsius is
#True) or if weather is "snowy". Otherwise, it should
#return False.
#
#Note, however, that is_celsius should be an optional
#argument. If the function call does not supply a value for
#is_celsius, assume it is True.
#
#For example:
#
# snowed_in(15, "sunny") -> False
# is_celsius is assumed to be True, so 15 is not below
# freezing.
#
# snowed_in(15, "sunny", is_celsius = False) -> True
# is_celsius is False, so 15 is below freezing.
#
# snowed_in(15, "snowy", is_celsius = True) -> True
# The weather is "snowy", so the temperature doesn't matter.


#Write your function here!
def snowed_in(temperature, weather, is_celsius = True):
    if is_celsius == True:
        if temperature < 0 or weather == "snowy":
            return True
        else:
            return False
    elif is_celsius == False:
        if temperature < 32 or weather == "snowy":
            return True
        else:
            return False
    else:
        return False

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print False, True, and True, each on their own line.

print(snowed_in(15, "sunny")) #Should print False
print(snowed_in(15, "sunny", is_celsius = False)) #Should print True
print(snowed_in(15, "snowy", is_celsius = True)) #Should print True

###

years = 2
months = 5
days = 24

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Ever been at a loss for what to do for your significant
#other for Valentine's Day? Let's right some code to generate
#a gift recommendation!
#
#The variables above give the length of the relationship in
#number of years, months, and days. Add some code below to
#print a gift recommendation based on these values:
#
# - If you've been dating for at least 4 years, give them a
#   dog ("dog").
# - If you've been dating for at least 1 year but less than
#   4 years, give them a watch ("watch").
# - If you've been dating for at least 6 months but less than
#   1 year, give them concert tickets ("concert tickets").
# - If you've been dating for at least a day but less than 6
#   months, give them candy ("candy").
# - If aren't actually dating, go big or go home: give them
#   a yacht to sail away together ("yacht").
#
#Note that no matter what, you should only print one gift.


#Add your code here!
if years >= 4:
    print("dog")
elif 4 > years >= 1:
    print("watch")
elif months >= 6 and years < 1:
    print("concert tickets")
elif days >= 1 and months < 6:
    print("candy")
else:
    print("yacht")

###

years = 0
months = 0
days = 0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Ever been at a loss for what to do for your significant
#other for Valentine's Day? Let's right some code to generate
#a gift recommendation!
#
#The variables above give the length of the relationship in
#number of years, months, and days. Add some code below to
#print a gift recommendation based on these values:
#
# - If you've been dating for at least 4 years, give them a
#   dog ("dog").
# - If you've been dating for at least 1 year but less than
#   4 years, give them a watch ("watch").
# - If you've been dating for at least 6 months but less than
#   1 year, give them concert tickets ("concert tickets").
# - If you've been dating for at least a day but less than 6
#   months, give them candy ("candy").
# - If aren't actually dating, go big or go home: give them
#   a yacht to sail away together ("yacht").
#
#Note that no matter what, you should only print one gift.


#Add your code here!
if years >= 4:
    print("dog")
elif 4 > years >= 1:
    print("watch")
elif months >= 6 and years < 1:
    print("concert tickets")
elif (days >= 1 and years == 0 and months == 0) or (0 < months < 6 and years < 1):
    print("candy")
else:
    print("yacht")

###

my_int = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Check to see whether the value of my_int is even or odd, and
#whether it's positive or negative.
#
# - If it's even and positive, print "Evenly positive".
# - If it's even and negative, print "Evenly negative".
# - If it's odd and positive, print "Oddly positive".
# - If it's odd and negative, print "Oddly negative".
#
#You may assume the number will not be 0.

#Add your code here!
if my_int % 2 == 0 and my_int > 0:
    print("Evenly positive")
elif my_int % 2 == 0 and my_int < 0:
    print("Evenly negative")
elif my_int % 2 == 1 and my_int > 0:
    print("Oddly positive")
else:
    print("Oddly negative")

###

hour = 3
minute = 45

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Around Georgia Tech, there are plenty of places to get a
#late night bite to eat. However, they have different hours,
#so when choosing where to go, you have to think about who's
#still open!
#
#Imagine you're choosing between the following restaurants:
#
# - Barrelhouse: Closes at 11:00PM
# - Taco Bell: Closes at 2:00AM
# - Cookout: Closes at 3:00AM
# - Waffle House: Never closes. Ever.
#
#Assume that this list is also a priority list: if Barrelhouse
#is open, you choose Barrelhouse. If not, you choose Taco Bell
#if it's open. If not, you choose Cookout if it's open. If
#not, you choose Waffle House.
#
#However, there are two wrinkles:
#
# - We're using 12-hour time.
# - hour will always represent a time from 10PM to 5AM.
#
#That means that if hour is 10 or 11, it's PM; if hour is
#12, 1, 2, 3, 4, or 5, it's AM. This will make your reasoning
#a little more complex. You may assume that all four
#restaurants open later than 6AM, though, so you don't have
#to worry about opening time, just closing time.
#
#Add some code below that will print what restaurant you'll
#go to based on the current values of hour and minute.


#Add your code here!
if hour == 10:
    print("Barrelhouse")
elif hour == 11 or hour == 12 or hour == 1:
    print("Taco Bell")
elif hour == 2:
    print("Cookout")
else:
    print("Waffle House")

###

rating = "R"
age = 15

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The United States has a movie rating system that rates
#movies with one of five ratings: G, PG, PG-13, R, and NC-17.
#Although some of the ratings are not binding, imagine that
#you are a parent who decides on the following rules:
#
# - Any child can see a G-rated movie.
# - To see a PG-rated movie, your child must be 8 or older.
# - To see a PG-13-rated movie, your child must be 13 or older.
# - To see an R-rated movie, your child must be 17 or older.
# - Your child may never see an NC-17 movie.
#
#The variables above give a rating and a child's age. Use
#these variables to select and print one of these two
#messages based on the criteria above:
#
# - "You may see that movie!"
# - "You may not see that movie!"
#
#However, there's one trick: you may not use the 'and' operator
#anywhere in this code!


#Add your code here!
if rating == "G":
    print("You may see that movie!")
elif rating == "PG":
    if age >= 8:
        print("You may see that movie!")
    else:
        print("You may not see that movie!")
elif rating == "PG-13":
    if age >= 13:
        print("You may see that movie!")
    else:
        print("You may not see that movie!")
elif rating == "R":
    if age >= 17:
        print("You may see that movie!")
    else:
        print("You may not see that movie!")
else:
    print("You may not see that movie!")

###

cafe = "Octane"
balance = 7.5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Atlanta is full of great coffee places. Unfortunately, great
#coffee is usually expensive. The variables above will
#contain a balance and a cafe name. Below are the prices of
#a cup of coffee at each of three locations:
#
# - Octane: $6
# - Galloway: $5
# - Starbucks: $4
# - Revelator: $3
# - Dunkin: $2
#
#Add some code above that will print one of the following
#two messages depending on whether the value oaf balance is
#high enough to buy a cup of coffee at the given cafe.
#
# - If it is sufficient, print "With [balance] dollars, I
#   can buy coffee at [cafe]"
# - If it is not sufficient, print "With [balance] dollars,
#   I cannot buy coffee at [cafe]"


#Add your code here!
if balance >= 6 or (balance >= 5 and (cafe == "Galloway" or cafe == "Starbucks" or cafe == "Revelator" or cafe == "Dunkin")) or (balance >= 4 and (cafe == "Starbucks" or cafe == "Revelator" or cafe == "Dunkin")) or (balance >= 3 and (cafe == "Revelator" or cafe == "Dunkin")) or (balance >= 2 and cafe == "Dunkin"):
    print("With", str(balance), "dollars, I can buy coffee at", cafe)
else:
    print("With", str(balance), "dollars, I cannot buy coffee at", cafe)

###

principal = 5000
rate = 0.05
time = 5
goal = 7000

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Recall in problem 2.4.5 you wrote some code that calculated
#the amount of money in an account based on this formula:
#
#   amount = principal * e ^ (rate * time)
#
#Those three variables are given above again, as well as a
#fourth: goal. We want to see if the investment given by
#these values will exceed the goal. If it will, we want to
#print this message:
#
#  "You'll exceed your goal by [extra money]"
#
#If it will not, we want to print this message:
#
#  "You'll fall short of your goal by [needed money]"
#
#If the investor will meet their goal, [extra money] should
#be the final amount minus the goal. If the investor will
#not meet their goal, [needed money] will be the goal minus
#the final amount.
#
#To make the output more legible, though, we want to round
#the difference to two decimal places. If the difference is
#contained in a variable called 'difference', then we can
#do this to round it: rounded_diff = round(difference, 2)
#
#Working with new and unfamiliar functions or abilities is
#part of learning to code, so use this function in your
#answer!

import math

#Remember, you can access e with math.e.


#Add your code here! Feel free to copy your code from 
#problem 2.4.5.
amount = principal * math.e ** (rate * time)

extra_money = amount - goal
extra_money = round(extra_money, 2)
needed_money = goal - amount
needed_money = round(needed_money, 2)

if goal <= amount:
    print("You'll exceed your goal by", extra_money)
else:
    print("You'll fall short of your goal by", needed_money)

###

operation = "*"
first_number = 4
second_number = 7

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#You're doing your math homework when you realize, you can
#write a program to do all the simple operations!
#
#The five possible values for operation are:
#
# - "+": Add first_number and second_number
# - "-": Subtract second_number from first_number
# - "*": Multiply first_number by second_number
# - "/": FLoor-divide first_number by second_number (use //)
# - "%": Find the remainder of dividing first_number by
#        second_number
#
#Your calculator should print the full operation according to
#the following format:
#
#[first_number] [operation] [second_number] = [result]
#
#For example, for the initial values above, your calculator
#would print:
#
#4 * 7 = 28
#
#Notice that for division, we're asking you to use floor
#division to avoid worrying about rounding errors.`
#
##If the operation is not one of the five listed above, print
#"That operation does not exist!" 


#Add your code here!
if operation == "+":
    print(first_number, operation, second_number, "=", first_number + second_number)
elif operation == "-":
    print(first_number, operation, second_number, "=", first_number - second_number)
elif operation == "*":
    print(first_number, operation, second_number, "=", first_number * second_number)
elif operation == "/":
    print(first_number, operation, second_number, "=", first_number // second_number)
elif operation == "%":
    print(first_number, operation, second_number, "=", first_number % second_number)
else:
    print("That operation does not exist!")

###

grade = 82
curve = 8

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Professor Burdell is grading final exams. Based on the
#class average, he has established a curve, whose value is
#given in the variable curve above.
#
#Then, for each individual student, he wants to send a
#personal message based on their grade. Their grade is the
#sum of the value of grade and the value of curve, but it
#cannot be greater than 100; if the curve takes them above
#100, their grade is 100.
#
#Prof. Burdell then wants to send one of the following
#messages, depending on the student's final grade:
#
# - If the total grade 90 to 100, the message would state:
#   "Congratulations! Your final grade is [their grade], an A."
# - If the total grade is 80 to 89, the message would state:
#   "Good job! Your final grade is [their grade], a B."
# - If the total grade is 70 to 79, the message would state:
#   "Not bad! Your final grade is [their grade], a C."
# - If the total grade is 60 to 69, the message would state:
#   "You passed! Your final grade is [their grade], a D."
# - If the total grade is under 60, the message would state:
#   "It's just one grade. Your final grade is [their grade], an F."
#
#[their grade] should be the result of adding grade and curve,
#but should not be greater than 100.


#Add your code here!
final_grade = grade + curve
if final_grade > 100:
    final_grade = 100

if 100 >= final_grade >= 90:
    print("Congratulations! Your final grade is " + str(final_grade) + ", an A.")
elif 89 >= final_grade >= 80:
    print("Good job! Your final grade is " + str(final_grade) + ", a B.")
elif 79 >= final_grade >= 70:
    print("Not bad! Your final grade is " + str(final_grade) + ", a C.")
elif 69 >= final_grade >= 60:
    print("You passed! Your final grade is " + str(final_grade) + ", a D.")
elif final_grade < 60:
    print("It's just one grade. Your final grade is " + str(final_grade) + ", an F.")
    
###

egg = True
milk = True
butter = True
flour = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're deciding what you want to cook. The boolean
#variables above state whether or not you have each of those
#four ingredients.
#
#Here are the dishes you know how to cook and their
#ingredients:
#
# 1. pancakes: egg, milk, butter, flour
# 2. omelette: egg, milk, butter
# 3. custard: egg, milk
# 4. poached eggs: egg
#
#The list above is also a priority list. If you have the
#ingredients for pancakes, you'll make pancakes instead of
#any of the other dishes. If you're missing flour but have
#the other ingredients, you'll make an omlette. You'll only
#make poached eggs if the only ingredient you have is eggs.
#
#Complete the program below such that it prints which dish
#you'll make based on the ingredients you have handy. All
#the dishes should appear exactly as shown above: all lower
#case, spelled the same way. If you do not have the
#ingredients to make any of these dishes, then print the
#text "Go to the store!"


#Add your code here!
if egg == True and milk == True and butter == True and flour == True:
    print("pancakes")
elif egg == True and milk == True and butter == True:
    print("omelette")
elif egg == True and milk == True:
    print("custard")
elif egg == True:
    print("poached eggs")
else:
    print("Go to the store!")

###

story = "A"
text = "B"
role = "C"
director = "D"
cast = "F"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#In Bryan Cranston's autobiography, he describes how after
#his success on Breaking Bad, he developed a scoring system
#for evaluating new scripts that he received.
#
#First, he would assign the script a grade -- A, B, C, D, or
#F -- in each of five categories: Story, Text, Role, Director,
#and Cast.
#
#Then, he would tally those grades into a total score for the
#script, according to the following chart:
#
#            A   B   C   D   F
# Story     +6  +5  +4  +2  +0
# Text      +5  +4  +3  +1  +0
# Role      +4  +3  +2  +1  +0
# Director  +3  +2  +1  +0  +0
# Cast/Misc +2  +1  +0  +0  +0
#
#For example: an A story, B text, C role, D directory, and
#F cast would get a score of 12: +6 for the story, +4 for the
#text, +2 for the role, +0 for the director, and +0 for the
#cast.
#
#Then, based on that score, the script would be assigned a
#category (note these are slightly different from the image
#because we've excluded the time variable):
#
# 20: Perfect score
# 17 to 19: Must do
# 14 to 16: Seriously consider
# 12 to 13: On the bubble
# 11 or below: Pass
#
#The variables above give the letter grades assigned to each
#of the five components. Write a program that calculates the
#total score he would assign to the script represented by
#these variables. Then on the next line, print the category
#he would assign to that script. For example, for the values
#above, this program would print:
#
#12
#On the bubble
#
#HINT: This is a *long* program. It's not particularly
#complex -- you're doing the same thing over and over, However,
#that 'same thing' required 4-8 lines each time you do it. Our
#answer is 46 lines long! So, don't think you're off-track just
#because you're writing a lot of lines.


#Add your code here!
score = 0

if story == "A":
    score += 6
if story == "B":
    score += 5
if story == "C":
    score += 4
if story == "D":
    score += 2
if text == "A":
    score += 5
if text == "B":
    score += 4
if text == "C":
    score += 3
if text == "D":
    score += 1
if role == "A":
    score += 4
if role == "B":
    score += 3
if role == "C":
    score += 2
if role == "D":
    score += 1
if director == "A":
    score += 3
if director == "B":
    score += 2
if director == "C":
    score += 1
if cast == "A":
    score += 2
if cast == "B":
    score += 1
    
# 20: Perfect score
# 17 to 19: Must do
# 14 to 16: Seriously consider
# 12 to 13: On the bubble
# 11 or below: Pass

print(score)
if score == 20:
    print("Perfect score")
elif 17 <= score <= 19:
    print("Must do")
elif 14 <= score <= 16:
    print("Seriously consider")
elif 12 <= score <= 13:
    print("On the bubble")
else:
    print("Pass")

###

cut = "Emerald"
clarity = "VS"
color = "E"
carat = 1.1
budget = 500
preferred_cuts = ["Emerald", "Cushion", "Princess", "Oval"]

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Diamonds are typically evaluated according to four aspects:
# - Cut: The way the diamond is cut
# - Clarity: How clear or flawless the diamond is, rated
#   as F (the best), IF, VVS, VS, SI, or I (the worst)
# - Color: How colorless the diamond is, rated from "D" (the
#   best) to "Z" (the worst)
# - Carat: How large the diamond is, weighed in carats
#
#Cut is usually a matter of personal preference. Clarity,
#color, and carat are matters of value: the clearer, more
#colorless, and larger a diamond is, the greater its value.
#
#Imagine you're shopping for a diamond. You have your
#preferred cuts, and you have a budget in mind. You're shown
#a diamond whose characteristics are represented by the cut,
#color, clarity, and carat variables above. You'll buy the
#diamond if its cost is less than your budget, and if its
#cut is one of your preferred cuts.
#
#At this store, every diamond has a base cost of 100.
#
#For every color rating worse than "D", the cost decreases by
#2%. An "F" color diamond would be worth 0.96 * the diamond
#cost otherwise because "F" is two colors worse than "D".
#
#A diamond's value is doubled for every level of clarity above
#I. A "VVS"-clarity diamond is worth 8 * the diamond cost
#otherwise because "VVS" is three levels higher than I, and
#doubling its value three times raises its value by 8x total.
#
#After finding its price based on color and clarity, its price
#is multiplied by its weight in carats.
#
#Your program should print "I'll take it!" if you will buy the
#diamond, "No thanks" if you will not. To purchase it, its price
#must be less than your budget and its cut must be one of your
#preferred cuts.
#
#HINT: You can find the number of characters between two
#characters by using the ord() function. ord("E") - ord("D")
#is 1; ord("Z") - ord("D") is 22.
#
#HINT 2: We haven't covered lists, but we did cover how to
#see if an item is present in a list using the 'in' operator
#in chapter 2.3.


#Add your code here!

# color
if color != "D":
    color_rating = 1 - (ord(color) - ord("D")) * .02 
else:
    color_rating = 1
    
# clarity
if clarity == "I":
    clarity_rating = 1
if clarity == "SI":
    clarity_rating = 2
if clarity == "VS":
    clarity_rating = 4
if clarity == "VVS":
    clarity_rating = 8
if clarity == "IF":
    clarity_ratig = 16
if clarity == "F":
    clarity_rating = 32

final_cost = 100 * color_rating * clarity_rating * carat

if final_cost <= budget and cut in preferred_cuts:
    print("I'll take it!")
else:
    print("No thanks")

###

phase = "New"
distance = 225000
date = 15
eclipse = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#There are (at least) three special types of full moons:
#
# - Super Moon: the full moon occurs when the moon is at its
#   closest approach to earth (less than 230,000km away).
# - Blue Moon: the second full moon in a calendar month. In
#   other words, any full moon on the 29th, 30th, or 31st of
#   a month.
# - Blood Moon: a lunar eclipse during a full moon.
#
#Write a program that will print out the type of moon --
#"Full Moon", "Super Moon", "Blue Moon", "Blood Moon", based
#on the values of the variables above. Note that for the moon
#to be any of these special kinds of moons, it must also be
#full.
#
#Note, though, that multiple modifiers can be true at the same
#time. We could have a Super Blue Moon, a Blue Blood Moon, or
#even a Super Blue Blood Moon.
#
#Always print those modifiers in that order. If any of these
#special modifiers is present, do not include the word "Full".
#If none of them are present, but the moon is Full, then print
#"Full Moon". If none of them are present at all, print "Moon".


#Add your code here!

modifiers = []

if distance < 230000:
    modifiers.append("Super")

if date >= 29:
    modifiers.append("Blue")

if eclipse:
    modifiers.append("Blood")
    

if phase == "Full" and not modifiers:
    print("Full Moon")
if phase == "Full" and modifiers:
    print(" ".join(modifiers) + " Moon")
if phase != "Full":
    print("Moon")

###

car_value = 10000
purchase_year = 2011
car_age = 8
driver_age = 23
electric = True
emissions_passed = True

# Calculate the base renewal fee
renewal_fee = 20

# Calculate the additional tax if the car was purchased before 2013
if purchase_year <= 2012:
    renewal_fee += int(car_value * 0.01)

# Add the $200 electric fee if the car is electric
if electric:
    renewal_fee += 200

# Check if the person is eligible to renew without an emissions test
if electric or (driver_age >= 65 and car_age >= 10):
    print(f"Your renewal fee is ${renewal_fee}.")
# Check if the person must pass an emissions test
else:
    print("You must pass an emissions test first.")

###

car_value = 20000
purchase_year = 2015
car_age = 13
driver_age = 24
electric = False
emissions_passed = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#You're writing some code to determine how much it will cost
#to renew the tag on your license plate. Why? Because I just
#had to pay my tag renewal, and if I have to deal with this
#mess, so do you. 😛
#
#Georgia's tag renewal policies are unnecessarily
#complicated. I've simplified them to make this problem even
#doable. They are:
#
# - Everyone pays $20.
# - If you purchased your car before 2013 (in 2012 or earlier),
#   you also pay 1% of its current value in additional tax.
# - If the car is electric, you pay an additional $200 fee.
#   (This is real.)
# - To renew, you must have passed an annual emissions check,
#   unless your car is electric, or if you're 65 or over and
#   the car's age is 10 years or older.
#
#Your code should print one of two messages. If the person
#needs to pass an emissions test in order to renew their tag,
#it should print, "You must pass an emissions test first."
#This would be the message to print if emissions_passed is
#False and if they are not eligible for either exemption
#mentioned above.
#
#If the person is eligible to renew their tag, the code should
#print: "Your renewal fee is $__.", where __ is the renewal
#cost. Round the renewal fee to the nearest integer. This will
#be $20, plus $200 if the car is electric, plus 1% of car_value
#if the purchase_year is less than or equal to 2012.


#Add your code here!

renewal_fee = 20

if emissions_passed == True or (electric == True) or (driver_age >= 65 and car_age >= 10):

    if purchase_year <= 2012:
        renewal_fee += int(car_value * 0.01)

    if electric == True:
        renewal_fee += 200

    print("Your renewal fee is $" + str(renewal_fee) + ".")

else:
    print("You must pass an emissions test first.")


### LOOPS ###

mystery_int = 50

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a for loop that prints every third number from 1 to
#mystery_int inclusive (meaning that if mystery_int is 7, it
#prints 1, 4, and 7). Print each number on a separate line.
#
#Hint: There are multiple ways to do this! You might use the
#modulus operators, or you could use the third argument for
#range().


#Add your code here!
for num in range(1, mystery_int + 1, 3):
    print(num)

###

away_team = [1, 0, 0, 0, 0, 0, 0, 0, 1]
home_team = [0, 1, 0, 0, 0, 0, 2, 0]

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#A baseball game consists of 9 innings. In each inning, each
#team can score some number of runs. Whoever scores the most
#runs wins the game. Note that there are reasons why the
#number of innings might differ; extra innings for a tie game,
#fewer innings for a rain-cancelled game, etc. So, you should
#not assume there are exactly 9 full innings.
#
#The two lists above give the runs scored in each inning by
#two teams. If the away team wins, print "Away team wins!"
#If the home team wins, print "Home team wins!" You may assume
#the game will not end in a tie.
#
#Remember, you can use a loop to look at each item in a list
#with this syntax:
#
#for value in the_list:
#
#Inside that loop, the variable 'value' will take on each
#value from the list until it's seen every value. You
#don't need to know anything more about lists to solve this
#problem!
#
#Note that you must use a loop to solve this problem. If you
#use something like the sum() function, your answer will not
#be accepted.


#Add your code here! With the initial values above, it should
#print "Home team wins!"
away_team_score = 0
home_team_score = 0

for value in away_team:
    away_team_score += value

for value in home_team:
    home_team_score += value

if home_team_score > away_team_score:
    print("Home team wins!")
if away_team_score > home_team_score:
    print("Away team wins!")

###

a_num = 8

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Take the value of a_num and repeatedly double it until the
#result has at least 7 digits. Then, print the first 7-or-more
#digit number that results from this repeated doubling.
#
#For example, for a_num = 8:
#
#8 -> 16 -> 32 -> 64 -> 128 -> 256 -> 512 -> 1024 -> 2048 -> 
#4096 -> 8192 -> 16384 -> 32768 -> 65536 -> 131072 -> 262144 -> 
#524288 -> 1048576
#
#So, you'd print 1048576.
#
#Hint: to check the number of digits, convert the product to a
#string, then use the len() function to check the string's length.


#Add your code here!

while len(str(a_num)) < 7:
    a_num *= 2

print(a_num)

###

mystery_int = 50

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Add some code below that will find and print the sum of
#every odd number between 0 and mystery_int. This time,
#exclude the bounds (e.g. if mystery_int was 51, add the odds
#from 1 to 49, but not 51).
#
#Hint: There are multiple ways to do this!


#Add your code here!
sum = 0
for num in range(1, mystery_int, 2):
    sum += num
print(sum)

###

mystery_int = -7

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Use a loop to find the sum of all numbers between 0 and
#mystery_int, including bounds (meaning that if
#mystery_int = 7, you add 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7).
#
#However, there's a twist: mystery_int might be negative.
#So, if mystery_int was -4, you would -4 + -3 + -2 + -1 + 0.
#
#There are a lot of different ways you can do this. Most of
#them will involve using a conditional to decide whether to
#add or subtract 1 from mystery_int.
#
#You may use either a for loop or a while loop to solve this,
#although we recommend using a while loop.

mysum = 0

if mystery_int > 0:
    for num in range(0, mystery_int + 1):
        mysum += num
if mystery_int < 0:
    for num in range(mystery_int, 1):
        mysum += num

print(mysum)

###

mystery_string = "Hello! What a fine day it is today."
mystery_character = "a"

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code below that will count and print how many
#times mystery_character appears in mystery_string. You may
#not use the string class's .count method.
#
#With the original values for mystery_string and
#mystery_character, your code should initially print 4. Only
#count characters with the same case as mystery_character
#(in other words, here you would ignore capital A).


#Add your code here!
count = 0

for char in mystery_string:
    if char == mystery_character:
        count += 1

print(count)

###

mystery_list = ["Taylor Swift", "Twenty Two", "Georgia Tech"]

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Above is a list of strings. Don't worry if this syntax is a
#little unfamiliar, we'll talk you through it and then cover
#it more in chapter 4.3.
#
#Write some code that will count the number of instances of
#the letter 't' in the list of strings. Count both capital
#'T' and lower-case 't'. Then, print the number of instances
#of the letter 't'.
#
#For example, with the list declared above, you would print
#6: two in the first string, three in the second, one in the
#third.
#
#Because we haven't used lists very extensively, we've
#gotten you started. The loop below will iterate through each
#string in the list. Next, you want to iterate through each
#letter in the current string, check if it's a t, and
#increment a counter if so.


#You'll want to add some code before the loop here.
count = 0

for string in mystery_list:
    for char in string:
        if char == "T" or char == "t":
            count += 1

#Add some code here to print the final tally!
print(count)

###

mystery_int = 46

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Use a while loop to create a countdown from mystery_int to
#0. Count down by 3s: if mystery_int is 46, then you should
#print 46, 43, 40, etc. Do not print any number lower than 0.
#Note that you should print both the original value of
#mystery_int and 0 if you land on it exactly.


#Add your code here!
while mystery_int >= 0:
    print(mystery_int)
    mystery_int -= 3

###

flips = "HHTTHTHHTTHHTHTHTHHTTHH"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The string above gives the results of a series of coin flips,
#H for heads and T for tails.
#
#Count the number of heads and number of tails. Then, print
#a message like this one based on the results:
#
#13 heads, 10 tails. Heads wins.
#
#Replace 13 and 10 with the actual numbers of heads and tails.
#Replace 'Heads wins.' with 'Tails wins.' ift there are more
#tails, or with 'It's a tie.' if there are the same number of
#heads and tails.
#
#For example:
#
# "HHTTHH" -> 4 heads, 2 tails. Heads wins.
# "THTHTT" -> 2 heads, 4 tails. Tails wins.
# "TTHHHT" -> 3 heads, 3 tails. It's a tie.


#Add your code here!
heads = 0
tails = 0

for char in flips:
    if char == "H":
        heads += 1
    if char == "T":
        tails += 1

if heads > tails:
    print(heads, "heads,", tails, "tails. Heads wins.")
if tails > heads:
    print(heads, "heads,", tails, "tails. Tails wins.")
if tails == heads:
    print(heads, "heads,", tails, "tails. It's a tie.")

###

a_string = "F12dav^f%$25d"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#a_string is a string of random characters. Write some code
#that adds all the digits that appear in the string and prints
#their sum.
#
#For example, the digits in the string above are 1, 2, 2, and 5,
#so your code would print 10.
#
#Remember, you can iterate over each character in a string with
#this syntax:
#
#for a_character in a_string:
#
#Remember also, you can check if a character is in a list of other
#characters within this syntax:
#
#if a_character in "ABCDEFG":
#
#If there are no digits in the string, print 0.


#Add your code here!
number_list = "0123456789"
sum = 0

for character in a_string:
    if character in number_list:
        sum += int(character)

print(sum)

###

start_character = "A"
end_character = "Z"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Print all the letters from start_character to end_character,
#each on their own line. Include start_character and
#end_character themselves.
#
#Remember, you can convert a letter to its underlying ASCII
#number using the ord() function. ord("A") would give 65.
#ord("Z") would give 90. You can use these values to write
#your loop.
#
#You can also convert an integer into its corresponding ASCII
#character using the chr() function. chr(65) would give "A".
#chr(90) would give "Z". So, for this problem, you'll need
#to convert back and forth between ordinal values and
#characters based on whether you're trying to loop over
#numbers or print letters.
#
#You may assume that both start_character and end_character
#are uppercase letters (although you might find it fun to
#play around and see what happens if you put other characters
#in instead!).


#Add your code here! With the original values for
#start_character and end_character, this will print the
#letters from A to Z, each on their own line.


while start_character <= end_character:
    print(start_character)
    start_ord = ord(start_character)
    start_character = chr(start_ord + 1)
    
###

beats_per_measure = 4
measures = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Recall our earlier problem where you printed out beats based
#on measures and beats per measure (3.3.5 Coding Exercise 1).
#In that exercise, you printing out 1 through the number of beats
#in a measure over and over depending on the number of measures.
#
#Copy and modify your code, but this time, you should replace the
#number 1 with the number of the current measure. So, the first
#number in each measure will always rise.
#
#For example, instead of 1 2 3 4 1 2 3 4 1 2 3 4 (with each
#number on its own line), you'd now print 1 2 3 4 2 2 3 4 3 2 3 4,
#and so on.
#
#You can use our sample answer from that problem if you'd prefer.
#
#HINT: One approach would involve adding a conditional.


#Add your code here! Using the original values of the variables
#above, this will initially print the following numbers (but each
#on their own line):
#1 2 3 4 2 2 3 4 3 2 3 4 4 2 3 4 5 2 3 4

measure = 1

while measure <= measures:
    print(measure)
    measure += 1
    for beat in range(1, beats_per_measure):
        print(beat + 1)

###

lyrics = ["I wanna be your endgame", "I wanna be your first string",
          "I wanna be your A-Team", "I wanna be your endgame, endgame"]
lines_of_sanity = 6

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Recall the Earworm problem (3.3.5 Coding Exercise 2). The
#first time, you would still finish printing the entire list
#of lyrics after lines_of_sanity was exceeded.
#
#Revise that code so that you always stop when lines_of_sanity
#is reached. If lines_of_sanity is 6, you would print 6 lines,
#no matter how many lines are in the list. If there are fewer
#than 6 lines in the list, then you'd repeat the list until
#the number of lines is reached.
#
#For example, with the values above, you'd print:
#I wanna be your endgame
#I wanna be your first string
#I wanna be your A-Team
#I wanna be your endgame, endgame
#I wanna be your endgame
#I wanna be your first string
#MAKE IT STOP
#
#That's 6 lines: the entire list once, then the first two lines
#again to reach 6. As before, print MAKE IT STOP when you're
#done.
#
#HINT: There are multiple ways to do this: some involve a small
#change to our earlier answer, others involve a more wholesale
#rewrite. If you're stuck on one, try to think of a totally
#different way!


#Add your code here! Using the initial inputs from above, this
#should print 7 lines: all 4 lines of the list, then the first
#two lines again, then MAKE IT STOP

counter = 0

while counter < lines_of_sanity:
    print(lyrics[counter % len(lyrics)])
    counter += 1

print("MAKE IT STOP")

###

mystery_int = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#This is a tough one! Stick with it, you can do it!
#
#Write a program that will print the times table for the
#value given by mystery_int. The times table should print a
#two-column table of the products of every combination of
#two numbers from 1 through mystery_int. Separate consecutive
#numbers with either spaces or tabs, whichever you prefer.
#
#For example, if mystery_int is 5, this could print:
#
#1	2	3	4	5
#2	4	6	8	10
#3	6	9	12	15
#4	8	12	16	20
#5	10	15	20	25
#
#To do this, you'll want to use two nested for loops; the
#first one will print rows, and the second will print columns
#within each row.
#
#Hint: How can you print the numbers across the row without
#starting a new line each time? With what you know now, you
#could build the string for the row, but only print it once
#you've finished the row. There are other ways, but that's
#how to do it using only what we've covered so far.
#
#Hint 2: To insert a tab into a string, use the character
#sequence "\t". For example, "1\t2" will print as "1	2".
#
#Hint 3: Need to just start a new line without printing
#anything else? Just call print() with no arguments in the
#parentheses.
#
#Hint 4: If you're stuck, try first just printing out all
#the products in one flat list, each on its own line. Once
#that's working, then worry about how to organize it into
#a table.


#Add your code here!

for row in range(1, mystery_int + 1):
    row_string = ""
    for col in range(1, mystery_int + 1):
        product = row * col
        row_string += str(product) + "\t"
    print(row_string)

###

mystery_string = "Lucy"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#There's an easy way to do this exercise, and a hard way. For
#a hint on the easier way, revisit the sample answers for the
#previous coding exercise.
#
#Above we've created a variable called mystery_string. Write
#some code that will print the first letter of the string on
#the first line, the first two letters on the second line,
#the first three letters on the third line, etc., until it
#prints the entire string on the last line.
#
#For example, if the string was "Lucy", then the output would
#be:
#
#L
#Lu
#Luc
#Lucy
#
#Hint: to print without automatically starting a new line,
#include the text end="" inside the print statement's
#parentheses. For example, print("Hello", end="") will print
#the word "Hello" without starting a new line afterward. So,
#calling it twice would print "HelloHello" on one line
#instead of two lines.


#Add your code here!
for num in range(1, (len(mystery_string) + 1)):
    print(mystery_string[:num])

###

mystery_string = "my cat your cat"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Add some code below that will count and print how many
#times the character sequence "cat" appears in mystery_string.
#For example, for the string above, it would print 2.
#
#This one is tricky! Think carefully about for-each loops,
#conditionals, and booleans. How can you track what character
#you're currently looking for? We expect you'll use a loop
#and a single big conditional, but there are other approaches
#as well. Try to stick with the topics we've covered so far.


#Add your code here!
count = 0

for letter in range(len(mystery_string) - 2):
    if mystery_string[letter:letter + 3] == "cat":
        count += 1

print(count)


### FUNCTIONS ###

#Write a function called hide_and_seek. The function should
#have no parameters and return no value; instead, when
#called, it should just print the numbers from 1 through 10,
#follow by the text "Ready or not, here I come!". Each
#number and the message at the end should be on its own
#line.
#
#Then, call the function.
#
#There should be no print statements outside the function.


#Write your function here!
def hide_and_seek():
    for number in range(1, 11):
        print(number)
    print("Ready or not, here I come!")

#Call your function here!
hide_and_seek()

###

#Write a function called select_a_show. select_a_show
#should have one parameter, an integer representing
#how many minutes until you have to leave.
#select_a_show should return the following:
#
# - If you have 0 or fewer minutes, it should return
#   the string, "You're late!"
# - If you have 1 to 10 minutes, it should return
#   the string, "Leave now, be early!"
# - If you have 11 to 45 minutes, it should return
#   the string, "Watch a comedy!"
# - If you have 46 to 100 minutes, it should return
#   the string, "Watch a drama!"
# - If you have more than 100 minutes, it should return
#   the string, "Watch a movie!"


#Add your function here!
def select_a_show(minutes):
    if minutes < 0:
        return "You're late!"
    if 1 <= minutes <= 10:
        return "Leave now, be early!"
    if 11 <= minutes <= 45:
        return "Watch a comedy!"
    if 46 <= minutes <= 100:
        return "Watch a drama!"
    if minutes > 100:
        return "Watch a movie!"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#"You're late!", "Leave now, be early!", "Watch a comedy!",
#"Watch a drama!", and "Watch a movie!".
print(select_a_show(-5))
print(select_a_show(5))
print(select_a_show(34))
print(select_a_show(68))
print(select_a_show(124))

###

#Write a function called semihemisphere. semihemisphere
#should return which semihemisphere a latitude-longitude
#coordinate pair is in: Northwest, Northeast, Southwest,
#or Southeast. A point in the Northern and Western
#hemispheres would be Northwest; in the Southern and Eastern
#hemispheres would be Southeast; etc.
#
#semihemisphere will take as input two floats: latitude
#and longitude. Latitude is a number between -90 and 90
#representing the North-South position on the globe (-90
#for the South pole, 90 for the North pole). Longitude is
#a number between -180 to 180 representing the East-West
#position on the globe (-180 is the furthest west, and 180
#is the furthest east).
#
#The Southern hemisphere is from -90° to 0° latitude. The
#Northern hemisphere is from 0° to 90° latitude. The
#Eastern hemisphere is from 0° to 180° longitude. The
#Western hemisphere is from -180° to 0° longitude.


#Add your code here!
def semihemisphere(latitude, longitude):
    if -90 <= latitude <= 0:
        if 0 <= longitude <= 180:
            return "Southeast"
        else:
            return "Southwest"
    else:
        if 0 <= longitude <= 180:
            return "Northeast"
        else:
            return "Northwest" 

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print Northwest, Southeast, Northeast, Southwest
print(semihemisphere(33.7, -84.4))
print(semihemisphere(-71.1, 86.3))
print(semihemisphere(67.1, 12.1))
print(semihemisphere(-11.6, -62.3))

###

#In the previous coding problem, you created a function
#called hide_and_seek that printed the numbers from 1 to 10.
#Now, however, we want to extend that. What if we want to
#count to 20? 30?
#
#Modify your previous function so that it takes as input one
#parameter: count. Then, instead of printing the numbers from
#1 to 10, it should print the numbers from 1 to the value of
#count. Then, end with "Ready or not, here I come!"


#Write your function here!
def hide_and_seek(end):
    for number in range(1, end + 1):
        print(number)
    print("Ready or not, here I come!")


#The function call below will test your function. We'll delete
#and overwrite this with other calls to hide_and_seek with
#different numbers during grading:
hide_and_seek(36)

###

#A year is considered a leap year if it abides by the
#following rules:
#
#  - Every 4th year IS a leap year, EXCEPT...
#  - Every 100th year is NOT a leap year, EXCEPT...
#  - Every 400th year IS a leap year.
#
#This starts at year 0. For example:
#
#  - 1993 is not a leap year because it is not a multiple of 4.
#  - 1996 is a leap year because it is a multiple of 4.
#  - 1900 is not a leap year because it is a multiple of 100,
#    even though it is a multiple of 4.
#  - 2000 is a leap year because it is a multiple of 400,
#    even though it is a multiple of 100.
#
#Write a function called is_leap_year. is_leap_year should
#take one parameter: year, an integer. It should return the
#boolean True if that year is a leap year, the boolean False
#if it is not.


#Write your function here!
def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return True
    else:
        return False


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print False, True, False, and True, each preceded by the
#label "[year] is a leap year:".
print("1993 is a leap year:", is_leap_year(1993))
print("1996 is a leap year:", is_leap_year(1996))
print("1900 is a leap year:", is_leap_year(1900))
print("2000 is a leap year:", is_leap_year(2000))

###

#Write a function called lucky_sevens that takes in one
#parameter, a string variable named a_string. Your function
#should return True if there are exactly three '7's in
#a_string. If there are less than three or more than three
#'7's, the function should return False.
#
#For example:
#  - lucky_sevens("happy777bday") should return True.
#  - lucky_sevens("h7app7ybd7ay") should also return True.
#  - lucky_sevens("happy77bday") should return False.
#  - lucky_sevens("h777appy777bday") should also return False.
#
#Hint: Remember in Chapter 3.3, we covered how to use a loop
#to look at each character in a string.


#Write your function here!
def lucky_sevens(a_string):
    count = 0
    for char in a_string:
        if char == "7":
            count += 1

    if count == 3:
        return True
    else:
        return False


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, True, False, False, each on their own line.
print(lucky_sevens("happy777bday"))
print(lucky_sevens("h7app7ybd7ay"))
print(lucky_sevens("happy77bday"))
print(lucky_sevens("h777appy777bday"))

###

#In chemistry, the ideal gas law states:
#
# pressure * volume = # of moles * gas constant * temperature
#
#This is usually abbreviated to:
#
# PV = nRT
#
#We can solve this for any of these five variables, but let's
#solve it for Pressure. In terms of Pressure, the ideal gas
#law states:
#
# P = (nRT) / V
#
#Write a function called find_pressure that takes as input
#three variables: number of moles, temperature, and volume.
#You can call these variables in the function whatever you
#want, but they must be specified in that order: moles, then
#temperature, then volume. You should assume all three are
#floats. Then, return as output your calculation for
#pressure. For the gas constant, you should use the value 
#0.082057.
#
#Hint: Python's rounding errors can change based on the
#order of the multipliers. If you're having difficulty with
#your answer being off by tiny fractions, change the order
#of the numbers to match the order in the formula above.


#Write your function here!
def find_pressure(moles, temperature, volume):
    pressure = (moles * .082057 * temperature) / volume
    return pressure

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Result: 48.905972000000006". The extra zeroes and
#the 6 are rounding errors by Python.
test_n = 10
test_T = 298
test_V = 5
print("Result:", find_pressure(test_n, test_T, test_V))

###

#Last problem, we wrote a function that calculated pressure
#given number of moles, temperature, and volume. We told you
#to assume a value of 0.082057 for R. This value means that
#pressure must be given in atm, or atmospheres, one of the
#common units of measurement for pressure.
#
#atm is the most common unit for pressure, but there are
#others: mmHg, Torr, Pa, kPa, bar, and mb, for example. what
#if pressure was sent in using one of these units? Our
#calculation would be wrong!
#
#So, we want to *assume* that pressure is in atm (and thus,
#that R should be 0.082057), but we want to let the person
#calling our function change that if need be. So, revise
#your find_pressure function so that R is a keyword parameter.
#Its default value should be 0.082057, but the person calling
#the function can override that. The name of the parameter for
#the gas constant must be R for this to work.
#
#As a reminder, you're writing a function that calculates:
#
# P = (nRT) / V
#


#Write your function here! You may copy your work from 3.4.5
#if you'd like.
def find_pressure(moles, temperature, volume, R = .082057):
    pressure = (moles * R * temperature) / volume
    return pressure


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Result: 37168.944".
test_n = 10
test_T = 298
test_V = 5
test_R = 62.364 #Torr!
print("Result:", find_pressure(test_n, test_T, test_V, R = test_R))

###

#Write a function called sum_of_primes. sum_of_primes should
#take as input a single integer, and then it should sum all
#the prime numbers up to and including that integer (if it is
#prime. Note that 1 is not considered a prime number.
#
#For example, sum_of_primes(6) would return 10: 2 + 3 + 5 = 10.
#1, 4 and 6 are not prime; 2, 3, and 5 are.
#
#Other examples include:
#
# sum_of_primes(7)  -> 17 (2 + 3 + 5 + 7 = 17)
# sum_of_primes(8)  -> 17 (2 + 3 + 5 + 7 = 17)
# sum_of_primes(11) -> 28 (2 + 3 + 5 + 7 + 11 = 28)
#
#To help you with this, we have supplied you with a function
#to find if a single number is prime. You do not need to know
#how this program works; only that it works. You may use this
#function, but you do not have to. Here is the function:

def is_prime(n):
    from itertools import count, islice
    return n > 1 and all(n % i for i in islice(count(2), int(n**0.5)-1))

#Add your function here!
def sum_of_primes(integer):
    total_sum = 0
    for num in range(1, integer + 1):
        if is_prime(num):
            total_sum += num
    return total_sum



#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print 10, 17, 17, and 28.
print(sum_of_primes(6))
print(sum_of_primes(7))
print(sum_of_primes(8))
print(sum_of_primes(11))

###

#Write a function called what_season. what_season should
#have two parameters: the first a string representing
#a month, and the second an integer representing a day.
#
#what_season should return "Spring" if the date is in
#Spring, "Summer" if it's in Summer, "Fall" if it's in
#Fall, and "Winter" if it's in Winter.
#
#For this problem, we define those seasons as follows:
#
# - Spring starts March 20.
# - Summer starts June 21.
# - Fall starts September 22.
# - Winter starts December 21.
#
#So, March 20 to June 20 would be Spring; June 21 to
#September 21 would be Summer; September 22 to December
#20 would be Fall; and December 21 to March 19 would be
#Winter.


#Add your code here!
def what_season(month, day):
    if (month == "March" and day >= 20) or (month == "April" or month == "May") or (month == "June" and day <= 20):
        return "Spring"
    if (month == "June" and day >= 21) or (month == "July" or month == "August") or (month == "September" and day <= 21):
        return "Summer"
    if (month == "September" and day >= 22) or (month == "October" or month == "November") or (month == "December" and day <= 20):
        return "Fall"
    else:
        return "Winter"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print Winter, Spring, Summer, and Fall in that order.
print(what_season("December", 25))
print(what_season("June", 15))
print(what_season("June", 23))
print(what_season("September", 27))

###

#Basketball coach Phil Jackson says that in order for an NBA
#team to be a contender for a championship, they need to win
#40 games before they lose 20 games.
#
#Write a function called is_a_contender that will take three
#parameters: a team name (a string), a number of wins (an
#integer), and a number of losses (an integer).
#
#Based on these parameters, the function should return one
#of three strings:
#
# - If the team is a contender (at least 40 wins and fewer
#   than 20 losses), return "The [team name] are a contender!"
# - If the team is not a contender (less than 40 wins and at least
#   20 losses), return "The [team name] are not a contender!"
# - If it cannot be determined (both values are higher or both
#   values are lower), return "The [team name] might be a contender!"


#Add your code here!
def is_a_contender(team_name, wins, losses):
    if wins >= 40 and losses < 20:
        return "The " + team_name + " are a contender!"
    if wins < 40 and losses >= 20:
        return "The " + team_name + " are not a contender!"
    else:
        return "The " + team_name + " might be a contender!"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "The Hawks are not a contender!".

test_team_name = "Hawks"
test_wins = 18
test_losses = 40

print(is_a_contender(test_team_name, test_wins, test_losses))

###

#Consult this blood pressures chart: http://bit.ly/2CloACs
#
#Write a function called check_blood_pressure that takes two
#parameters: a systolic blood pressure and a diastolic blood
#pressure, in that order. Your function should return "Low",
#"Ideal", "Pre-high", or "High" -- whichever corresponds to
#the given systolic and diastolic blood pressure.
#
#You should assume that if a combined blood pressure is on the
#line between two categories (e.g. 80 and 60, or 120 and 70),
#the result should be the higher category (e.g. Ideal and
#Pre-high for those two combinations).
#
#HINT: Don't overcomplicate this! Think carefully about in
#what order you should check the different categories. This
#problem could be easy or extremely hard depending on the
#order you change and whether you use returns or elifs wisely.


#Add your code here!
def check_blood_pressure(systolic, diastolic):
    if systolic < 90 and diastolic < 60:
        return "Low"
    elif systolic < 120 and diastolic < 80:
        return "Ideal"
    elif systolic < 140 and diastolic < 90:
        return "Pre-high"
    else:
        return "High"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: Ideal
test_systolic = 110
test_diastolic = 70

print(check_blood_pressure(test_systolic, test_diastolic))

###

#Recall Coding Problem 2.4.8. In that problem, you calculated
#the damage done by an attack based on several parameters.
#
#Convert your code from there into two functions, one called
#calculate_damage and one called calculate_modifier.
#
#Your function for calculate_damage must call calculate_modifier;
#it may not calculate the modifier separately. As such,
#calculate_damage should accept all ten parameters: STAB,
#Type, Critical, Other, Random, Level, Attack, Defense, and
#Base. You'll need to pass STAB, Type, Critical, Other, and
#Random to calculate_modifier.
#
#Make sure the parameters to each function follow the order
#shown above.
#
#As a reminder, damage is calculated using this formula:
#courses.edx.org/asset-v1:GTx+CS1301xII+1T2018+type@asset+block@DamageCalc.png
#
#Modifier is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@ModifierCalc.png


#Add your code here!
def calculate_modifier(STAB, Type, Critical, Other, Random):
    modifier = STAB * Type * Critical * Other * Random
    return modifier
    
def calculate_damage(STAB, Type, Critical, Other, Random, Level, Attack, Defense, Base):
    modifier = calculate_modifier(STAB, Type, Critical, Other, Random)
    total_damage = (((2 * Level + 10) / 250) * (Attack / Defense) * Base + 2) * modifier
    return total_damage

#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 16.0
STAB = 1
Type = 0.25
Critical = 2
Other = 1
Random = 1
Level = 50
Attack = 125
Defense = 110
Base = 60

print(calculate_damage(STAB, Type, Critical, Other, Random, Level, Attack, Defense, Base))

###

#-----------------------------------------------------------
#In this problem, you should write three functions:
#word_count, letter_count, and average_word_length.
#
#word_count should take as input a string. It should return
#the number of words in the string. You may assume that the
#number of words in the string will be one more than the
#number of spaces in the string.
#
#letter_count should take as input a string. It should return
#the number of letters in the string. You may assume that
#the string is only letters and spaces: no punctuation or
#numbers.
#
#average_word_length should take as input a string. It should
#return the average length of the words in the string. You
#can find the average length by dividing the number of letters
#by the number of words.
#
#Your implementation for average_word_length *must* call
#word_count and letter_count.


#Add your code here!
letter_list = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

def word_count(a_string):
    num_words = 1
    for char in a_string:
        if char == " ":
            num_words += 1
    return num_words

def letter_count(a_string):
    num_letters = 0
    for char in a_string:
        if char in letter_list:
            num_letters += 1
    return num_letters

def average_word_length(a_string):
    average = letter_count(a_string) / word_count(a_string)
    return average



#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 3.5
a_string = "Up with the white and gold"
print(average_word_length(a_string))

###

#There are a lot of use cases where we want to check to see
#if a string has any invalid characters in it. For example,
#when asking for a credit card number, we want to make sure
#there are no non-numerals (although we might accept dashes
#or spaces). When asking for a name, we want to make sure
#all the characters are letters, spaces, or the occasional
#punctuation mark.
#
#Write a function called is_valid. is_valid should take two
#parameters: a string to check, and a string of all valid
#characters.
#
#is_valid should return the boolean True if all the
#characters in the string to check are present in the string
#of valid characters. It should return False if any character
#in the checked string does not appear.


#Add your code here!
def is_valid(string, valid_characters):
    count_invalid = 0
    for char in string:
        if char not in valid_characters:
            count_invalid += 1
    if count_invalid > 0:
        return False
    else:
        return True

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print True, then False
sample_valid_string = "1234-5678-9011-1111"
sample_invalid_string = "1234!5678.9011?1111"
valid_characters = "0123456789-"

print(is_valid(sample_valid_string, valid_characters))
print(is_valid(sample_invalid_string, valid_characters))

###

#In this problem, your goal is to write a function that can
#either count all the vowels in a string or all the consonants
#in a string.
#
#Call this function count_letters. It should have two
#parameters: the string in which to search, and a boolean
#called find_consonants. If find_consonants is True, then the
#function should count consonants. If it's False, then it
#should instead count vowels.
#
#Return the number of vowels or consonants in the string
#depending on the value of find_consonants. Do not count
#any characters that are neither vowels nor consonants (e.g.
#punctuation, spaces, numbers).
#
#You may assume the string will be all lower-case letters
#(no capital letters).


#Add your code here!
def count_letters(string, find_consonants):
    consonants = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz"
    vowels = "AEIOUaeiou"
    count_consonants = 0
    count_vowels = 0
    if find_consonants == True:
        for char in string:
            if char in consonants:
                count_consonants += 1
        return count_consonants                
    else:
        for char in string:
            if char in vowels:
                count_vowels += 1
        return count_vowels
             
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print 14, then 7.

a_string = "up with the white and gold"

print(count_letters(a_string, True))
print(count_letters(a_string, False))


### ERROR HANDLING ###

mystery_value = "9"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and prints
#the result. In the case that an error occurs, print "Not
#possible".
#
#Use error handling to determine if an error will occur; do
#not use the type() function. You might be surprised how many
#types Python can divide by 10!

#Add your code here!
try:
    print(10 / mystery_value)
except:
    print("Not possible")

###

mystery_value = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and prints
#the result. In the case that mystery_value is equal to 0,
#print "Not possible". Do not catch any other errors. This
#means there will be an uncaught error in the correct answer!
#
#You may not use any conditionals or the type() function.

#Add your code here!
try:
    print(10 / mystery_value)
except ZeroDivisionError:
    print("Not possible")

###

mystery_value = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and 
#prints the result. In the case that mystery_value is 
#equal to 0, print "Can't divide by zero". If for any other
#reason the operation fails, print "Not possible".
#
#You may not use any conditionals or the type() function.

#Add your code here!
try:
    print(10 / mystery_value)def has_a_vowel(a_str):
     for letter in a_str:
         if letter in "aeiou":
             return True
         else:
             return False
except ZeroDivisionError:
    print("Can't divide by zero")
except Exception:
    print("Not possible")

###

my_string = "This string is not a number!"
#Run the code below until an error occurs
try:    
    print("Converting my_string to int...")
    my_int = int(my_string)
    print(my_int)
#If an error occurs, jump to here
except: 
    print("Can't convert; my_string not a number.")
print("Done!")

###

try:
    #Open InputFile.txt in read-only mode
    input_file = open("InputFile.txt", mode = "r")
    #For each line in the file
    for line in input_file:
        #Print the line
        print(line)
    #Close the file
    input_file.close()
#Catch an IOError
except IOError as error:
    print("An input error occurred!")

###

#Write a function called has_a_vowel. has_a_vowel should have
#one parameter, a string. It should return True if the string
#has any vowels in it, False if it does not.


def has_a_vowel(a_str):
    for letter in a_str:
        if letter in "aeiou":
            return True
    else:
        return False
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, then True, then False, then False, each on
#its own line.
print(has_a_vowel("abba"))
print(has_a_vowel("beeswax"))
print(has_a_vowel("syzygy"))
print(has_a_vowel(""))

###

#Right now, the code below will encounter an error when num
#is 0, but it will not print anything when it does, and then
#it will keep running for num = 1, num = 2, and num = 3
#afterwards. Modify this code so that once it hits an error,
#the loop stops altogether.
#
#You still should not print anything when the error is
#encountered, and the loop definition on line 10 should not
#be changed.

try:
    for num in range(-3, 3):
	    print(5 / num)
except ZeroDivisionError:
    pass

###

#Write a function called get_integer that takes as input one
#variable, my_var. If my_var can be converted to an integer,
#do so and return that integer. If my_var cannot be converted
#to an integer, return a message that says, "Cannot convert!"
#
#For example, for "5" as the value of my_var, get_integer would
#return the integer 5. If the value of my_var is the string
#"Boggle.", then get_integer would return a string with the
#value "Cannot convert!"
#
#Do not use any conditionals or the type() function.


#Write your function here!
def get_integer(my_var):
    try:
        return int(my_var)
    except:
        return "Cannot convert!"
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 5, Cannot convert!, and 5.

print(get_integer("5"))
print(get_integer("Boggle."))
print(get_integer(5.1))

###

#This exercise is identical to the previous exercise,
#except that instead of printing "Cannot convert!" when my_var
#cannot be converted to an integer, you should instead return
#the error message that results. For a reminder of how to
#access the error message in the except block, check out
#3.5.3, specifically CatchingASpecificError-4.py from 3.5.3.3
#and CatchingMultipleSpecificErrors-5.py from 3.5.3.4.
#
#Write a function called get_integer that takes as input one
#variable, my_var. If my_var can be converted to an integer,
#do so and return that integer. If my_var cannot be converted
#to an integer, return the error message that results from
#attempting to do so.
#
#Do not use any conditionals or the type() function.


#Write your function here!
def get_integer(my_var):
    try:
        return int(my_var)
    except Exception as error:
        return error


#You can use the lines below to test out your function. When
#the function is written correctly, the output of these three
#lines should be:
#5
#invalid literal for int() with base 10: 'Boggle.'
#5
print(get_integer("5"))
print(get_integer("Boggle."))
print(get_integer(5.1))

###

words = ["dog", "sparrow", "cat", "frog"]

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#This program is supposed to print the location of the 'o'
#in each word in the list. However, line 22 causes an
#error if 'o' is not in the word. Add try/except blocks
#to print "Not found" when the word does not have an 'o'.
#However, when the current word does not have an 'o', the
#program should continue to behave as it does now.
#
#Hint: don't worry that you don't know how line 18 works.
#All you need to know is that it may cause an error.
#
#You may not use any conditionals.

#Fix this code!
for word in words:
    try:
        print(word.index("o"))
    except:
        print("Not found")

###

mystery_value = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that divides mystery_value by mystery_value
#and prints the result. If that operation results in an
#error, divide mystery_value by (mystery_value + 5) and then
#print the result. If that still fails, multiply mystery_value
#by 5 and print the result. You may assume one of those three
#things will work.
#
#You may not use any conditionals.
#
#Hint: You're going to want to test one try/except structure
#inside another! Think carefully about whether the second
#one should go inside the try block or the except block.


#Add your code here!
try:
    result = mystery_value / mystery_value
    print(result)
except:
    try: 
        result = mystery_value / (mystery_value + 5)
        print(result)
    except:
        result = mystery_value * 5
        print(result)

###

given_items = ["one", "two", 3, 4, "five", ["six", "seven", "eight"]]

#Write a program that iterates through the items in the
#given list. For each item, you should attempt to iterate
#through the item and print each character seperately. 
#
#If this second part fails, print "Not iterable" -- but
#even if the second part fails, you should still go on
#to the next item in the list.
#
#Hint: Although we'll cover lists more in Unit 4, all
#you need to know right now is that this syntax will run
#a loop over a list, a string, or any other iterable
#type of information:
#
#  for item in given_items:
#
#To iterate over the items in 'item', you can do the
#same thing: for subitem in item:
#
#Start out by building the nested for-each loops that
#you'll need. Then, identify where the error is
#occurring to figure out where to put the try-except
#structure.
#
#This one's tricky, but you can do it!


#Add your code here!
for item in given_items:
    try:
        for subitem in item:
            print(subitem)
    except:
        print("Not iterable")

###

#In Chapter 3.4, we wrote a function called find_pressure
#that calculated pressure given number of moles,
#temperature, volume, and optionally, a value for R. If no
#value was given for R, we assumed its value should be
#0.082057.
#
#However, as written, that function could crash: what about
#when the user enters a Volume of 0? That would cause a
#ZeroDivisonError! (In addition to breaking the laws of
#physics, but there's no Python error for that.)
#
#Revise that find_pressure function to catch that error. If
#that error occurs, return the string "Volume must be
#greater than 0." Otherwise, the function should work just
#as it did before.
#
#Feel free to copy your answer to that exercise and work
#from there. If you'd prefer to start from scratch, remember:
#you're creating a function called find_pressure that returns
#a value for pressure given variables n, T, V, and optionally
#R, according to this formula:
#
# Pressure = (nRT) / V
#
#You may not use a conditional. R should have a default value
#of 0.082057.


#Write your function here!
def find_pressure(moles, temperature, volume, R = .082057):
    try:
        pressure = (moles * R * temperature) / volume
        return pressure
    except ZeroDivisionError:
        return "Volume must be greater than 0."


#You may use these lines to test your function. With the
#values initially supplied here, your function should return
#"Volume must be greater than 0."
test_n = 10
test_T = 298
test_V = 0
test_R = 62.364 #Torr!
print("Result:", find_pressure(test_n, test_T, test_V, R = test_R))

###

#We've come a long way in this unit! You've learned about
#conditionals, loops, functions, and error handling. To end
#the unit, let's do a couple problems that tie all these
#concepts together.
#
#Write a function called word_count. word_count takes as
#input a string called my_string, and returns as output the
#number of words in the string. For the purposes of this
#problem, you can assume that every space indicates a new
#word; so, the number of words should be one more than the
#number of spaces. You may also assume that any strings are
#not empty, so there should always be at least one word if
#my_string is a string.
#
#Note, though, that it could be the case that a non-string
#is accidentally passed in as the argument for my_string. If
#that happens, an error will arise. If such an error arises,
#you should instead return "Not a string". Otherwise,
#return an integer representing the number of words in the
#string.


#Write your function here!
def word_count(my_string):
    try:
        words = 1
        for char in my_string:
            if char == " ":
                words += 1
        return(words)
    except:
        return("Not a string")


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 
#Word Count: 4
#Word Count: 1
#Word Count: 7
#Word Count: Not a string
#Word Count: Not a string
#Word Count: Not a string

print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("One."))
print("Word Count:", word_count("There are seven words in this sentence."))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))

###

#Now let's make things a little more challenging.
#
#Last exercise, you wrote a function called word_count that
#counted the number of words in a string essentially by
#counting the spaces. However, if there were multiple spaces
#in a row, it would incorrectly add additional words. For
#example, it would have counted the string "Hi   David" as
#4 words instead of 2 because there are two additional
#spaces.
#
#Revise your word_count method so that if it encounters
#multiple consecutive spaces, it does *not* count an
#additional word. For example, these three strings should
#all be counted as having two words:
#
# "Hi David"
# "Hi   David"
# "Hi                 David"
#
#Other than ignoring consecutive spaces, the directions are
#the same: write a function called word_count that returns an
#integer representing the number of words in the string, or
#return "Not a string" if the input isn't a string. You may
#assume that if the input is a string, it starts with a
#letter word instead of a space.

#Write your function here!

def word_count(my_string):
    try:
        words = len(my_string.split())
        return(words)
    except:
        return("Not a string")


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#Word Count: 4
#Word Count: 2
#Word Count: Not a string
#Word Count: Not a string
#Word Count: Not a string

print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("Hi   David"))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))

###

#This will be the largest, most authentic program you've
#written so far. It will require everything you've learned
#and should take some time to test and debug. Be patient,
#you can do it!
#
#Write a function called average_word_length that takes as
#input a string called my_string, and returns as output the
#average length of the words in the string.
#
#In writing this function, note the following:
#
# - You should account for consecutive spaces. A string like
#   "Hi   Lucy" is two words with an average length of 3.0
#   characters.
# - You should not assume the string starts with a letter.
#   A string like "  David" has one word with an average
#   length of 5.0 characters.
# - You should not count punctuation marks toward the
#   length of a word. A string like "Hi, Lucy" has two
#   words with an average length of 3.0 characters: the ,
#   after "Hi" does not count as a character in the word.
#   The only punctuation marks you need to handle are
#   these: . , ! ?
# - You may assume the only characters in the string are
#   letters, the punctuation marks listed above, and spaces.
# - If my_string is not a string, you should instead return
#   the string, "Not a string".
# - If there are no words in my_string, you should instead
#   return the string, "No words". This could happen for
#   strings like "" (an empty string) and ".,!?" (a string
#   of only punctuation marks). You may assume that any
#   of these punctuation marks will always be followed by
#   at least one space.
#
#Here are a few hints that might help you:
#
# - You can peak at the first character in my_string with
#   my_string[0]. If my_string is "Hi, Lucy", then the value
#   of my_string[0] is "H". You don't have to do this, but
#   you can if you want.
# - There are lots of ways you can do this. If you're
#   stuck, try taking a step back and thinking about the
#   problem from a fresh perspective.
# - If you're still stuck, try counting words and letters
#   separately, and worrying about average length only
#   after both have been counted.
# - The word count should equal the number of letters that
#   come immediately after a space or the start of the
#   string. The character count should simply equal the
#   number of characters besides spaces and punctuation
#   marks. The average word length should be character
#   count divided by word count.


#Write your function here!
def word_count(my_string):
    my_string = my_string.split()
    num_words = len(my_string)
    return num_words

def letter_count(my_string):
    num_letters = 0
    for char in my_string:
        if char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZY":
            num_letters += 1
    return num_letters

def average_word_length(my_string):
    try:
        average = letter_count(my_string) / word_count(my_string)
        if average > 0:
            return average
        else:
            return "No words"
    except:
        return "Not a string"



#When your function works, the following code should
#output:
#2.0
#3.0
#4.0
#Not a string
#No words

print(average_word_length("Hi"))
print(average_word_length("Hi, Lucy"))
print(average_word_length("   What   big spaces  you    have!"))
print(average_word_length(True))
print(average_word_length("?!?!?! ... !"))

###

a_list = [1, 2, 3, 4, 5]
list_index = 7

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In this problem, we're going to use some unfamiliar syntax.
#You'll learn more about this syntax in Unit 4. For now,
#though, you don't need to understand the syntax. All you
#need to know is that right now, this code will cause an
#error with the values supplied above.
#
#Revise this code so that this error is caught, and the
#message "Invalid index!!" is printed. However, your revision
#must meet these requirements, too:
#
# - If the values of the variables above are changed so
#   that the error doesn't occur, the program should behave
#   the same way that it does now.
# - The two first and last lines, "Accessing index..." and
#   "Done!", should print whether or not an error occurs.
# - If a *different* error occurs from the one that arises
#   initially, your code should instead print "Unknown
#   error!"
#
#HINT: You won't be able to do this without running the code
#first and seeing what the error is. So, try it out first!

#Revise this code:
print("Accessing index...")
try:
    result = a_list[list_index]
    print("Value at index:", result)
except IndexError:
    print("Invalid index!!")
except:
    print("Unknown error!")
print("Done!")

###

mystery_string = "Hello! What a fine day it is today."
mystery_character = "a"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write some code below that will count and print how many
#times mystery_character appears in mystery_string. You may
#not use the string class's .count method.
#
#With the original values for mystery_string and
#mystery_character, your code should initially print 4. Only
#count characters with the same case as mystery_character
#(in other words, here you would ignore capital A).


#Add your code here!
count = 0
for char in mystery_string:
    if char == mystery_character:
        count += 1
print(count)


### PRACTICE PROBLEMS ###

## Practice Problem 1

#Imagine you're writing the software that controls the speed
#of a ceiling fan. The user changes the fan's speed by
#pulling a string. Pulling the string increases the fan's =
#speed by 1, unless it's already at the maximum speed. If
#it's already at the maximum speed, it changes the speed
#back to 0.
#
#Write a function called pullString. pullString should take
#two parameters: a current speed, and a maximum speed, both
#integers. pullString should return the new fan speed
#according to the reasoning above.

#You may assume that the input will be integers. You should
#also assume that the fan's speed *can* equal the maximum
#speed, but it *cannot* exceed the maximum speed. You may
#thus assume that you will never be given a currentSpeed
#higher than maxSpeed.

#Write your function here!

def pullString(current_speed, max_speed):
    while current_speed < max_speed:
        current_speed += 1
        return current_speed
    while current_speed == max_speed:
        current_speed = 0
        return current_speed

#The code below will test your function. It isn't used for
#grading, so you can change or remove it if you'd like. As
#written, these three lines should print 3, 5, and 0.
print(pullString(2, 5))
print(pullString(4, 5))
print(pullString(7, 7))


## Practice problem 2

#A common formula in probability and statistics is the
#formula for the number of possible combinations of r
#objects from a set of n objects. For example, the question,
#"How many possible 2-card hands can you deal from a deck of
#52 unique cards?" is saying, "How many combinations of 2
#can you make from a set of 52?"
#
#The formula for the number of combinations of length r from
#a set of n objects is:
#
#  numCombinations = n! / r!(n-r)!
#
#The ! mark is the symbol for factorial. Factorial means the
#product of the number times every number between itself and
#1. For example, 5! is 120: 5 * 4 * 3 * 2 * 1 = 120.
#
#Write a function called numCombinations with two parameters:
#n, the number of objects from which to choose, and r, the
#number of objects to choose. numCombinations should return
#the number of combinations according to the formula above.
#Don't worry if you don't fully understand what combinations
#are -- just focus on implementing a function that solves
#that formula given n and r.
#
#You may *not* use Python's built-in factorial method to
#complete this; you should implement that yourself.
#
#Hint: We'd suggest writing two functions: factorial() and
#numCombinations(). Then, call factorial() in your code for 
#numCombinations(). You don't have to do this, but it will
#make your answer a little easier!
#
#Hint 2: Remember to put parentheses around the denominator.

#Write your numCombinations function (and any other functions) 
#here!

def factorial(num1):
    factorial = 1
    for i in range (1, num1 + 1):
        factorial *= i
    return factorial

def numCombinations(n, r):
    return factorial(n) / (factorial(r) * factorial(n - r))

#The lines below will test your code. They are not used for
#grading, so feel free to modify them. As written, they should
#print: 1326.0, 252.0, and 4.0, each on their own line.
print(numCombinations(52, 2))
print(numCombinations(10, 5))
print(numCombinations(4, 1))


## Practice problem 3

#An object's weight is defined as its mass times the gravity
#on the planet where it sits. We tend to assume that the
#planet is earth and its gravity is 9.807 m/s^2. However,
#sometimes we might want to calculate an object's weight on
#a different planet.
#
#Write a function called calculateWeight. calculateWeight
#should have three parameters: mass, planet, and gravity.
#planet and gravity should be keyword parameters: by
#default, they should take the values "Earth" (a string) and
#9.807 (a float). However, they should be able to be
#overriden to let us calculate weights on other planets.
#
#The function should return a string that looks like this:
#"A [mass] kg object weighs [weight] Newtons on [planet]."
#You should round the weight to two decimal points. You
#can do this by calling round() on the weight, e.g.
#roundedWeight = round(weight, 2). The 2 dictates how
#many decimal points should be included.
#
#For example:
#
# calculateWeight(10.0) ->
#       "A 10.0 kg object weighs 98.07 Newtons on Earth."
#
# calculateWeight(5.0, planet="Jupiter", gravity=24.79) ->
#       "A 5.0 kg object weighs 24.79 Newtons on Jupiter."
#
#Hint: If you're having trouble with creating the string to
#return, here's the first part:
#result = "A " + str(mass) + " kg object weighs " ...

#Write your function here!
def calculateWeight(mass, planet = "Earth", gravity = 9.807):
    weight = mass * gravity
    weight_rounded = round(weight, 2)
    weight_string = str(weight_rounded)
    return "A " + str(mass) + " kg object weighs " + weight_string + " Newtons on " + planet + "."
    
#The lines of code below will test your function. They are
#not used for grading, so feel free to change them. As
#written, these lines should output the two lines of output
#shown above.
print(calculateWeight(10.0))
print(calculateWeight(5.0, planet="Jupiter", gravity=24.79))


## Practice problem 4
#
#
#
#


### PRACTICE TEST 1 ### RETURN TO THIS

## Practice problem 1

days_since_release = 14
original_price = 60
greatest_hits = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a conditional that determines the price of a
#newly-released game, movie, or album based on the time since
#it was released.
#
#Assume that a new release loses $2 off its price for every
#full week since it was released. So, two full weeks (14 days)
#after a $60 game is released, it will cost $56.
#
#However, if the release is considered a "greatest hit", it
#loses value half as fast: after two weeks, it will be $58
#instead of $56.
#
#No release will ever fall to below $20, however, no matter
#how fast it loses value or whether it's a greatest hit.
#
#Add some code below to print the current price of the release.
#For example, with the values above, it would pring $58.


#Add your code here! Make sure to print the dollar sign, too.
if greatest_hits:
    loss = days_since_release // 7
else:
    loss = days_since_release // 7 * 2

price = original_price - loss

if price > 20:
    print("$" + str(price))
else:
    print("$20”)


## Practice problem 2

minimum = 5
maximum = 14
even = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a loop (we suggest a for loop) that prints the numbers
#from minimum to maximum, including minimum and maximum
#themselves. If even is True, print only the even numbers.
#If even is False, print only the odd numbers. You may assume
#minimum will always be less than maximum.
#
#With the initial values for minimum, maximum, and even above,
#this should print 6, 8, 10, 12, 14 -- each number would be on
#its own line, no commas.

#Add your code here!

if even == True:
    if minimum % 2 == 0:
        for num in range(minimum, maximum + 1, 2):
            print(num)
    else:
        for num in range(minimum + 1, maximum + 1, 2):
            print(num)
if even == False:
    if minimum % 2 == 0:
        for num in range(minimum + 1, maximum +1, 2):
            print(num)
    else:
        for num in range(minimum, maximum + 1, 2):
            print(num)


## Practice problem 3

#Write a function called num_factors. num_factors should
#have one parameter, an integer. num_factors should count
#how many factors the number has and return that count as
#an integer
#
#A number is a factor of another number if it divides
#evenly into that number. For example, 3 is a factor of 6,
#but 4 is not. As such, all factors will be less than the
#number itself.
#
#Do not count 1 or the number itself in your factor count.
#For example, 6 should have 2 factors: 2 and 3. Do not
#count 1 and 6. You may assume the number will be less than
#1000.

#Add your code here!

def num_factors(integer):
    count = 0
    for number in range(2, integer):
        if integer % number == 0:
            count += 1
    return count
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 0, 2, 0, 6, 6, each on their own line.
print(num_factors(5))
print(num_factors(6))
print(num_factors(97))
print(num_factors(105))
print(num_factors(999))


## Practice problem 4

#Imagine you're playing a game in which every action you
#take grants you some number of experience points. There is
#an item called a Lucky Egg that, when used, doubles the
#number of experience points you earn. The company behind
#the game also runs occasional events where they increase
#how many experience points you earn for each action by 50%,
#100%, or even 200%.
#
#Write a function called find_total_exp. find_total_exp
#should have one positional parameter, a base number of
#experience points. It should also have two keyword
#parameters: lucky_egg, whose default value is False, and
#event_mulitplier, whose default value is 1.
#
#The function should return the number of experience
#points earned based on these two variables. The base number
#of experience points should always be multiplied by the
#event multiplier, and then doubled if lucky_egg is True.
#
#You should convert the final result from a float to an
#integer before returning it. This will automatically round
#down.

#Add your code here!
def find_total_exp(base_points, lucky_egg = False, multiplier = 1):
    base_points *= multiplier
    if lucky_egg == True:
        base_points *= 2
        return int(base_points)
    else:
        return int(base_points)

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#100
#200
#150
#300
print(find_total_exp(100))
print(find_total_exp(100, lucky_egg = True))
print(find_total_exp(100, multiplier = 1.5))
print(find_total_exp(100, lucky_egg = True, multiplier = 1.5))


## Practice problem 5

the_string = "I'm a Ramblin' Wreck"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write some code that will capitalize and print the value of
#the_string. For example, for the initial value of the_string
#above, it should print "I'M A RAMBLIN' WRECK".
#
#You can capitalize a string by calling the_string.upper().
#This will return a capitalized version of the string. (Note
#that this will _not_ modified the_string, but rather just
#return the result if it were to be capitalized.)
#
#However, the_string might not actually be a string! It might
#be an integer, a float, or something else. If that happens,
#then calling the_string.upper() will cause an AttributeError
#to occur. Catch this error and print "The variable was not
#a string!"
#
#Note that you may not use any conditionals in your answer.
#Note also that you should not assume that every error that
#occurs is an Attribute Error! Any other errors should
#not be caught.

#Add your code here!
try:
    print(the_string.upper())
except AttributeError:
    print("The variable was not a string!")


## Practice problem 6

#Write a function called remove_capitals. remove_capitals
#should accept one parameter, a string. It should return a
#string containing the original string with all the capital
#letters removed. Everything else should be in the same
#place and order as before.
#
#For example:
#
# remove_capitals("A1B2C3D") -> "123"
# remove_capitals("WHAT") -> ""
# remove_capitals("what") -> "what"
#
#Remember, capital letters have ordinal numbers between 65
#("A") and 90 ("Z"). You may use the ord() function to get
#a letter's ordinal number.
#
#Your function should be able to handle strings with no
#capitals (return the original string) and strings with all
#capitals (return an empty string). You may assume we'll
#only use regular characters (no emojis, formatting
#characters, etc.).

#Write your function here!
#ord(character) = 65 and ord <= 90

def remove_capitals(string):
    new_string = ""
    for character in string:
        if not (ord(character) >= 65 and ord(character) <= 90):
            new_string += character
    return new_string

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#123
#eorgia nstitute of echnology
print(remove_capitals("A1B2C3D"))
print(remove_capitals("Georgia Institute of Technology"))


## Practice problem 7

#Write a function called valid_release_date. The function
#should have two parameters: a date and a string. The
#string will represent a type of media release: "Game",
#"Movie", "Album", "Show", and "Play".
#
#valid_release_date should check to see if the date is
#a valid date to release that type of media according to
#the following rules:
#
# - Albums should be released on Mondays.
# - Games should be released on Tuesdays.
# - Shows should be released on Wednesdays or Sundays.
# - Movies should be released on Fridays.
# - Plays should be released on Saturdays.
#
#valid_release_date should return True if the date is
#valid, False if it's not.
#
#The date will be an instance of Python's date class. If
#you have an instance of date called a_date, you can
#access an integer representing the day of the week with
#a_date.weekday(). a_date.weekday() will return 0 if the
#day is Monday, 1 if it's Tuesday, 2 if it's Wednesday,
#up to 6 if it's Sunday.
#
#If the type of release is not one of these strings,
#the release date is automatically invalid, so return
#False.

from datetime import date

#Write your function here!
def valid_release_date(a_date, media):
    if media == "Album" and a_date.weekday() == 0:
        return True
    if media == "Game" and a_date.weekday() == 1:
        return True
    if media == "Show" and (a_date.weekday() == 2 or a_date.weekday() == 6):
        return True
    if media == "Movie" and a_date.weekday() == 4:
        return True
    if media == "Play" and a_date.weekday() == 5:
        return True
    else:
        return False


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, False, False, each on their own line.
print(valid_release_date(date(2018, 7, 11), "Show"))
print(valid_release_date(date(2018, 7, 11), "Movie"))
print(valid_release_date(date(2018, 7, 11), "Pancake"))


## Practice problem 8

#The Joyner Conjecture is a not-at-all famous mathematical
#series inspired by the Collatz Conjecture for use in this
#class.
#
#The Joyner Conjecture proceeds as follows:
#
#Start with any number. If the number is divisible by 3,
#divide it by 3. Otherwise, add 2 to the number. Eventually,
#no matter what number you begin with, this series will run
#into 1 or 2. If it runs into 1, it will repeat 1-3 forever.
#If it runs into 2, it will repeat 2-4-6 forever.
#
#For example, imagine we started with the number 5:
#5 is not divisible by 3, so 5 + 2 = 7
#7 is not divisible by 3, so 7 + 2 = 9
#9 is divisible by 3, so 9 / 3 = 3
#3 is divisible by 3, so 3 / 3 = 1
#
#Start with 5, this sequence converges on 1 in 4 iterations:
#5 -> 7, 7 -> 9, 9 -> 3, 3 -> 1.
#
#Write a function called joyner. joyner should have one
#parameter, an integer. It should return the number of
#iterations required to reach either 1 or 2 for the first
#time.

#Add your code here!    

def joyner(number):
    count = 0
    while number != 1 and number != 2:
        if number % 3 == 0:
            number /= 3
            count += 1
        else:
            number += 2
            count += 1
    return count

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 4, 5, and 10, each on their own lines.
print(joyner(5))
print(joyner(15))
print(joyner(29))


## Practice problem 9

#Imagine you're writing the software for an inventory system for
#a store. Part of the software needs to check to see if inputted
#product codes are valid.
#
#A product code is valid if all of the following conditions are
#true:
#
# - The length of the product code is a multiple of 4. It could
#   be 4, 8, 12, 16, 20, etc. characters long.
# - Every character in the product code is either an uppercase
#   character or a numeral. No lowercase letters or punctuation
#   marks are permitted.
# - The character sequence "A1" appears somewhere in the
#   product code.
#
#Write a function called valid_product_code. valid_product_code
#should have one parameter, a string. It should return True if
#the string is a valid product code, and False if it is not.

#Add your code here!
def valid_product_code(string):
    if len(string) % 4 != 0:
        return False
    for character in string:
        if not (character.isupper() or character.isdigit()):
            return False
    if "A1" not in string:
        return False
    else:
        return True

print(valid_product_code("A12B44BP"))
print(valid_product_code("BFDSAUSA98932RWEFOEWA9FEAA1DSFSF"))
print(valid_product_code("A1BBD5"))
print(valid_product_code("BDD5664S"))
print(valid_product_code("66aBSaA1fdsv"))


### PRACTICE TEST 2 ###

## Practice problem 1

days_late = 5
in_demand = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a conditional that decides the amount of a library fine
#based on an overdue book. The fine is 1 dollar per day late
#for the first 10 days, and 2 dollars per day for every day
#after that. If the book is considered an "in demand" book,
#the fine is doubled.
#
#Print the cost of the library fine, including a dollar sign.
#If the book is not late, print $0.
#
#Under the original values above, this should print $40:
#$10 for the first 10 days late, $10 for the next 5 days late,
#and doubled because the book is in demand.

#Add your code here! Make sure to print the dollar sign, too.

fine = 0
remaining_days_late = 0

if days_late <= 10 and days_late > 0:
    fine = days_late * 1
    if in_demand == True:
        fine *= 2
        print("$" + str(fine))
    else:
        print("$" + str(fine))
elif days_late >= 10:
    remaining_days_late = days_late - 10
    fine = 10 + remaining_days_late * 2
    if in_demand == True:
        fine *= 2
        print("$" + str(fine))
    else:
        print("$" + str(fine))
else:
    print("$" + str(fine))


## Practice problem 2

minimum = 5
maximum = 14

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a loop (we suggest a for loop) that prints all the
#even numbers from minimum to maximum. Each number should be
#printed on its own line, and you should print both minimum
#and maxmimum themselves if they are even. You may assume
#minimum will always be less than maximum.
#
#With the initial values for minimum and maximum above, this
#should print 6, 8, 10, 12, 14 -- each number would be on its
#own line, no commas.

#Add your code here!
for num in range(minimum, maximum + 1):
    if num % 2 == 0:
        print(num)


## Practice problem 3

#Write a function called is_prime. is_primse should take
#as input one integer. It should return True if the integer
#is prime, False if the integer is not prime. You may
#assume the integer will be greater than 2 and less than
#1000.
#
#Remember, a prime number is one into which no number is
#divisible besides 1 and itself. For example, 6 is not
#prime because it is divisible by 2 and 3. 7 is prime
#because it is only divisible by 1 and itself.
#
#HINT: Remember, once you find a _single_ factor of the
#number, you can return False: it only takes one factor
#to make the number not prime.

#Add your code here!
def is_prime(integer):
    count = 0
    for num in range(2, integer):
        if integer % num == 0:
            count += 1
    if count >= 1:
        return False
    else:
        return True

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, False, True, False, True, False
print(is_prime(5))
print(is_prime(6))
print(is_prime(97))
print(is_prime(105))
print(is_prime(997))
print(is_prime(999))


## Practice problem 4

#Write a function called find_final_price. find_final_price
#should have two positional parameters: a price and a sales
#tax rate. It should also have a keyword parameter called
#coupon_code, with a default value of 0.
#
#find_final_price should return the final price of the item,
#which is the initial price plus the sales tax (price times
#tax rate) minus the coupon code.
#
#Round the final answer to two decimal places. You can do
#that with final_price = round(previous_price, 2).

#Add your code here!
def find_final_price(price, tax_rate, coupon_code = 0):
    sales_tax = price * tax_rate
    final_price = price + sales_tax - coupon_code
    return round(final_price, 2)


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#10.70
#5.70
print(find_final_price(10.0, 0.07))
print(find_final_price(10.0, 0.07, coupon_code = 5.0))


## Practice problem 5

the_string = "Ramblin"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#The string class has a method called islower which returns
#True if a string is all lower case, false if it is not.
#For example, if the_string = "Ramblin", then calling the
#method the_string.islower() would return False. If instead
#the_string was "wreck", the_string.islower() would return
#True.
#
#Write some code that uses islower to print True if
#the_string is all lower case, False if it is not. However,
#if the_string isn't actually a string, this would instead
#cause an AttributeError. Catch that error and instead
#print the message "Only strings can be lowercase!".
#
#Note that you may not use any conditionals in your answer.
#Note also that you should not assume that every error that
#occurs is an attribute error: any other errors should not
#be caught.

#Add your code here!
try:
    print(the_string.islower())
except AttributeError:
    print("Only strings can be lowercase!")


## Practice problem 6

#Write a function called get_numerals. get_numerals should
#accept one parameter, a string. It should return a string
#containing only the numerals from the original string:
#no letters, punctuation marks, or spaces.
#
#Remember, numerals have ordinal numbers between 48 ("0")
#and 57 ("9"). You may use the ord() function to get
#a letter's ordinal number.
#
#Your function should be able to handle strings with no
#numerals (return an empty string) and strings with all
#numerals (return the original string). You may assume
#we'll only use regular characters (no emojis, formatting
#characters, etc.).

#Write your function here!
def get_numerals(string):
    new_string = ""
    for char in string:
        if ord(char) >= 48 and ord(char) <= 57:
            new_string += char
    return(new_string)

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#1301
#
#8675309
print(get_numerals("CS1301"))
print(get_numerals("Georgia Institute of Technology"))
print(get_numerals("8675309"))


## Practice problem 7

#Write a function called check_date. check_date should
#require two positional parameters: a string representing
#the name of a month, and an integer representing a date.
#check_date should also have a keyword parameter called
#is_leap_year, assumed to be False, representing whether or
#not it's a leap year.
#
#Return True if the date is a valid calendar date. Return
#False if it is not. A date may not be a valid calendar
#date if the month isn't a real month, or if that date does
#not exist for that month. You can see some examples at the
#end of this file.
#
#Remember: 30 days has September, April, June, and November.
#All the rest have 31, except February, which has 28, until
#Leap Year gives it 29.
#
#You may assume that day will be greater than 0 (you don't
#need to check negative or zero values for day).


#Write your function here!
def check_date(month, date, is_leap_year = False):
    list_of_months = ["January", "February", "March", "April", "May", "June", \
                      "July", "August", "September", "October", "November", \
                      "December"]
    if month in list_of_months:
        if month == "January" and date > 0 and date <= 31:
            return True
        elif month == "February" and date > 0 and date <= 28 and is_leap_year == False:
            return True
        elif month == "February" and date > 0 and date <= 29 and is_leap_year == True:
            return True
        elif month == "March" and date > 0 and date <= 31:
            return True
        elif month == "April" and date > 0 and date <= 30:
            return True
        elif month == "May" and date > 0 and date <= 31:
            return True
        elif month == "June" and date> 0 and date <= 30:
            return True
        elif month == "July" and date > 0 and date <= 31:
            return True
        elif month == "August" and date > 0 and date <= 31:
            return True
        elif month == "September" and date > 0 and date <= 30:
            return True
        elif month == "October" and date > 0 and date <= 31:
            return True
        elif month == "November" and date > 0 and date <= 30:
            return True
        elif month == "December" and date > 0 and date <= 31:
            return True
        else:
            return False
    else:
        return False
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, True, False, False, each on their own line.
print(check_date("January", 31))
print(check_date("February", 29, is_leap_year = True))
print(check_date("Techtember", 15, is_leap_year = True))
print(check_date("June", 31))


## Practice problem 8

#The Collatz Conjecture is a famous sequence in mathematics
#proposed by Lothar Collatz. It proceeds as follows:
#
#Start with any number. If the number is even, divide it by
#2. If the number is odd, triple it and add one. Repeat.
#Eventually, no matter what number you begin with, this
#sequence will converge on 1 (and if you continue repeating
#it, you'll repeat 1-4-2 infinitely).
#
#For example, imagine we started with the number 21:
#5 is odd, so 5 * 3 + 1 = 16
#16 is even, so 16 / 2 = 8
#8 is even, so 8 / 2 = 4
#4 is even, so 4 / 2 = 2
#2 is even, so 2 / 1 = 1
#
#Starting with 5, this sequence converges on 1 in 5
#iterations: 5 to 16, 16 to 8, 8 to 4, 4 to 2, and 2 to 1.
#
#Implement a function called collatz. collatz should take
#as input an integer, and return the number of iterations
#it takes for the Collatz sequence to reach 1 from that
#number. For example, collatz(5) would return 5 because
#it took 5 iterations to converge on 1.

#Add your code here!
def collatz(number):
    count = 0
    while number > 1:
        if number % 2 == 1:
            number *= 3
            number += 1
            count += 1
        if number % 2 == 0:
            number /= 2
            count += 1
    return count

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 5, 17, and 23, each on their own lines.
print(collatz(5))
print(collatz(15))
print(collatz(25))


## Practice problem 9

#Write a function called product_code_check. product_code_check
#should take as input a single string. It should return a boolean:
#True if the product code is a valid code according to the rules
#below, False if it is not.
#
#A string is a valid product code if it meets ALL the following
#conditions:
#
# - It must be at least 8 characters long.
# - It must contain at least one character from each of the
#   following categories: capital letters, lower-case letters,
#   and numbers.
# - It may not contain any punctuation marks, spaces, or other
#   characters.


#Add your code here!
def product_code_check(string):
    has_uppercase = False
    has_lowercase = False
    has_number = False
    if not len(string) >= 8:
        return False
    for character in string:
        if character.isupper():
            has_uppercase = True
        elif character.islower():
            has_lowercase = True
        elif character.isdigit():
            has_number = True
    if not (has_uppercase and has_lowercase and has_number):
        return False
    for character in string:
        if not ((ord(character) >= 48 and ord(character) <= 57) or (ord(character) >= 65 and ord(character) <= 90) or (ord(character) >= 97 and ord(character) <= 122)):
            return False
    else:
        return True

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, True, False, False, False
print(product_code_check("g00dlONGproductCODE"))
print(product_code_check("fRV53FwSXX663cCd"))
print(product_code_check("2shOrt"))
print(product_code_check("alll0wercase"))
print(product_code_check("inv4l1d CH4R4CTERS~"))


### PRACTICE PROBLEMS 3 ###

## Practice probelm 1

original_total = 15.55
sales_tax_rate = 0.07
is_member = False
has_coupon = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing the software for a cash register at a
#retail vendor. The cash register is given a total by the
#cashier (original_total), and must print the total cost for
#the customer, under the following rules:
#
# - There is currently a "$5 off $15" coupon available. If their
#   original total is more than $15 and they have the coupon
#   (has_coupon), they can use this coupon. If their total is
#   below $15, the value of has_coupon doesn't matter.
# - If the customer is a member of the store's discount
#   program (is_member), they receive a 10% discount.
# - Sales tax should be added. Sales tax is the sales_tax_rate
#   multiplied by the original total.
#
#Note that these changes should be applied in this order: first
#the coupon (if available and eligible), then the customer
#discount, then the sales tax.
#
#For example, if original_total is 20, sales tax is 0.10,
#they have a coupon, and they are members, then their total
#would be:
#
#  $20 - $5 = $15 (coupon)
#  $15 - (0.1 * $15) = $13.50 (customer discount)
#  $13.5 + (0.1 * 13.5) = $14.85 (sales tax)
#
#Write some code that prints the total the customer is expected
#to pay, including the dollar sign, rounded to two decimal places
#(don't worry about the trailing 0 for totals like $15.50).
#
#Hint: To round a number, use the round function. For example,
#round(the_num, 2) will round the_num to two decimal places and
#return the result. Round only on the last step; if you round
#after each calculation, your final result may be off by a cent
#or two.

#Add your code here! Make sure to print the dollar sign, too.

new_total = 0

if original_total >= 15 and has_coupon == True:
    new_total = original_total - 5
    if is_member == True:
        new_total *= 0.9
        new_total += new_total * sales_tax_rate
        print("$" + str(round(new_total, 2)))
    else:
        new_total += new_total * sales_tax_rate
        print("$" + str(round(new_total, 2)))
elif original_total >= 15 and has_coupon == False:
    if is_member == True:
        new_total = original_total * 0.9
        new_total += new_total * sales_tax_rate
        print("$" + str(round(new_total, 2)))
    else:
        new_total = original_total + (original_total * sales_tax_rate)
        print("$" + str(round(new_total, 2)))
elif original_total < 15:
    if is_member == True:
        new_total = original_total * 0.9
        new_total += new_total * sales_tax_rate
        print("$" + str(round(new_total, 2)))
    else:
        new_total = original_total + (original_total * sales_tax_rate)
        print("$" + str(round(new_total, 2)))


## Practice problem 2

minimum = 5
maximum = 10

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a loop (we suggest a for loop) that sums all the numbers
#from minimum to maximum, including both minimum and maximum
#themselves. You may assume minimum will always be less than
#maximum.
#
#Your code should not only add the numbers; it should also
#print the current sum after each number is added. So, for
#minimum = 5 and maximum = 10, your code would print the results
#of adding 5 + 6 + 7 + 8 + 9 + 10:
#5
#11
#18
#26
#35
#45

#Add your code here!
sum = 0
for number in range(minimum, maximum + 1):
    sum += number
    print(sum)
    

## Practice problem 3

#Write a function called is_composite. is_composite should
#take as input one integer. It should return True if the
#integer is composite, False if the integer is not not
#composite. You may assume the integer will be greater than
#2 and less than 1000.
#
#Remember, a composite number is one into which at least
#one number is divisible besides 1 and the number itself.
#For example, 6 is composite because it is divisible by 2
#and 3. 7 is not composite because it is only divisible by 1
#and itself.
#
#HINT: Remember, once you find a _single_ factor of the
#number, you can return True: it only takes one factor
#to make the number composite.

#Add your code here!
def is_composite(number):
    for int in range(2, number - 1):
        if number % int == 0:
            return True
            break
    else:
        return False


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: False, True, False, True, False, True
print(is_composite(5))
print(is_composite(6))
print(is_composite(97))
print(is_composite(105))
print(is_composite(997))
print(is_composite(999))


## Practice problem 3

#Imagine you're writing the software for a credit card
#processor. This credit card offers 1% cashback to the
#cardholder, which it calculates by deducting 1%
#directly from the original purchase price. The software
#also needs to account for charges made in different
#currencies; these first need to be converted to the
#account's local currency.
#
#Write a function called calculate_charge.
#calculate_charge will have one positional parameter and
#one keyword parameter. The positional parameter will
#represent the original amount of the charge, in whatever
#currency the charge was performed in. The keyword
#parameter will represent the exchange rate between the
#charge's currency and the account's currency; by default,
#it should be 1.0, meaning that the charge took place in
#the account's own currency.
#
#calculate_charge should return the actual charge that
#should appear on the spender's credit card. This would
#be the charge converted to the account's local currency
#(by dividing the charge amount by the exchange rate) and
#deducting 1%. The result should be rounded to two decimal
#places, but not until after all other calculations are
#made.
#
#For example, right now, 1 US Dollar is worth 0.91 Euros.
#A 20 Euro purchase costs $21.98 because 20 / 0.91 = 21.98.
#1% of 21.98 is 0.2198. So, if the function is called with
#an original price of 20.0 and an exchange rate of 0.91,
#it would return 21.76.
#
#Hint: Remember, you can round a number to two decimal
#places by using the round function. round(the_num, 2) will
#return the_num rounded to two decimal places.

#Add your code here!
def calculate_charge(original_amount, exchange_rate = 1.0):
    new_amount = 0
    new_amount = original_amount / exchange_rate
    new_amount -= new_amount * .01
    return round(new_amount, 2)


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#19.8
#21.76
print(calculate_charge(20.0))
print(calculate_charge(20.0, exchange_rate = 0.91))


## Practice problem 4

x = 10
y = 5
z = 2

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Implement and print out the results of the formula below,
#rounded to two decimal places:
#
# z / (x * y)
#
#When x, y, and z are all numbers, this should work just
#fine: for example, for x = 10, y = 5, and z = 2, this would
#print out 0.04: 2 / (10 * 5) = 0.04.
#
#However, some things might go wrong. The product of x and y
#could be 0, or one of the values could be a string instead of
#a number.
#
#If a divide-by-zero error occurs instead, print the message:
#"Can't divide by zero!" (without the quotation marks).
#
#If one of the values ends up being a string, print the message:
#"Can't divide by a string!" (without the quotation marks).
#
#No matter what happens, your code should print "Done!" (without
#quotation marks) at the end.
#
#Note that you may not use any conditionals in your answer.
#Note also that you should not assume that every error that
#occurs is a divide-by-zero error: any other errors should
#not be caught.

#Add your code here!
try:
    ans = z / (x * y)
    print(round((ans), 2))
except ZeroDivisionError:
    print("Can't divide by zero!")
except TypeError:
    print("Can't divide by a string!")
finally:
    print("Done!")


## Practice problem 6

#Write a function called sort_characters. sort_characters
#should take as input one parameter, a string.
#
#sort_characters should return a string such that all the
#characters in the original string are still present, but
#in a different order. All the capital letters should appear
#first, then all the lower-case letters, then all the
#numerals, then all the punctuation marks. Within each
#category, the letters should appear in the same order as
#in the original string.
#
#For example, for the string "DavidJoyner", the function
#would return "DJavidoyner": the capital letters (DJ) first,
#then the lower case, all in the same order in which they
#originally appeared.
#
#Some more examples:
#
# sort_characters("GeorgiaTech") -> "GTeorgiaech"
# sort_characters("ThisIsCS1301!") -> "TICShiss1301!"
# sort_characters("One1.Two2?Three3!") -> "OTTnewohree123.?!"
# sort_characters("CS1301") -> "CS1301"
#
#You may use the ord() function to get a letter's ordinal
#number. The ordinal numbers you might need to use are:
#
# - Capital letters: 65 ("A") through 90 ("Z").
# - Lower-case letters: 97 ("a") through 122 ("z").
# - Numerals: 48 ("0") through 57 ("9").
# - Punctuation: Any other ordinals (for this problem).
#
#Hint: You don't have to use ordinal numbers; you can use the
#in operator instead, e.g. "a" in "abcde".
#
#Hint 2: If you're stuck, think of this problem in two stages:
#dividing the characters into their categories, and then
#recombining them into their results!

#Write your function here!
def sort_characters(string):
    
    new_string_cap = ""
    for char in string:
        if ord(char) >= 65 and ord(char) <= 90:
            new_string_cap += char
    
    new_string_lower = ""
    for char in string:
        if ord(char) >= 97 and ord(char) <= 122:
            new_string_lower += char

    new_string_digits = ""
    for char in string:
        if ord(char) >= 48 and ord(char) <= 57:
            new_string_digits += char
    
    new_string_punc = ""
    for char in string:
        if not ((ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122) \
        or (ord(char) >= 48 and ord(char) <= 57)):
            new_string_punc += char

    new_string_final = new_string_cap + new_string_lower + new_string_digits + new_string_punc

    return new_string_final
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#DJavidoyner
#GTeorgiaech
#TICShiss1301
#OTTnewohree123.?!
#CS1301
print(sort_characters("DavidJoyner"))
print(sort_characters("GeorgiaTech"))
print(sort_characters("ThisIsCS1301!"))
print(sort_characters("One1.Two2?Three3!"))
print(sort_characters("CS1301"))

## Practice problem 7

#Write a function that will calculate the Knox index of a
#number. The Knox Index is a thing I made up for this
#problem, and it is defined as follows:
#
#Start with the number. If the number is even, divide it by
#2. If the number is odd, add one. Repeat. Eventually, no
#matter what number you begin with, this sequence will
#converge on 1. If you continue repeating it, you'll repeat
#1-2-1-2 indefinitely.
#
#For example, imagine we started with the number 50:
#50 is even, so 50 / 2 = 25
#25 is odd, so 25 + 1 = 26
#26 is even, so 26 / 2 = 13
#13 is odd, so 13 + 1 = 14
#14 is even, so 14 / 2 = 7
#7 is odd, so 7 + 1 = 8
#8 is even, so 8 / 2 = 4
#4 is even, so 4 / 2 = 2
#2 is even, so 2 / 2 = 1
#
#Starting with 50, this sequence converges on 1 in 9
#iterations: 50 to 25, 25 to 26, 26 to 13, 13 to 14, 14 to
#7, 7 to 8, 8 to 4, 4 to 2, and 2 to 1.
#
#Implement a function called knox. knox should take as
#input an integer, and return the integer's Knox index;
#that is, the number of iterations it takes for the
#number to reach 1 following those rules. For example,
#knox(50) would return 9 because it took 9 iterations to
#converge on 1.

#Add your code here!
def knox(number):
    count = 0
    while number > 1:
        if number % 2 == 0:
            number /= 2
            count += 1
        else:
            number += 1
            count += 1
    return count


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 9, 5, and 8, each on their own lines.
print(knox(50))
print(knox(15))
print(knox(25))


## Practice problem 8

#10th Street Trade School is a small university. It
#currently offers 12 majors: Accounting, Architecture,
#Astronomy, Business, Economics, History, Law, Medicine,
#Neuroscience, Physics, Psychology, and Zoology.
#
#10th Street's class-numbering structure is the same as
#Georgia Tech's: all classes have 4-digit numbers;
#undergraduate classes have numbers in the 1000s, 2000s,
#3000s, or 4000s, while graduate classes have numbers in
#the 6000s, 7000s, or 8000s.
#
#For three majors, 10th Street offers only undergraduate
#classes: Business, Architecture, and History. For three,
#it offers only graduate classes: Law, Medicine, and
#Neuroscience. For the other six, it offers both
#undergraduate and graduate classes.
#
#However, four majors are not offered during the summer:
#Business, Law, Architecture, and Accounting are only
#offered in Spring and Fall semesters.
#
#Write a function called check_class. check_class should
#require two positional arguments: a string for major
#name ("Astronomy", "Physics", etc.) and an integer for
#class number (1001, 6750, etc.). It should also have
#one keyword parameter: is_summer. is_summer should be
#False by default.
#
#check_class should return True if the class is valid,
#or False if it is not. A class is valid if (a) its
#major is one of the 12 majors listed above, (b) its
#class number is appropriate for the major (6000
#through 8999 for graduate-only majors, 1000 through
#4999 for undergraduate-only majors, or either for
#other majors, but nothing outside that range), and
#(c) the class is offered during the given semester
#(e.g. it's always offered, or it's not a summer
#semester).


#Write your function here!
def check_class(class_name, class_number, is_summer = False):

    all_majors = ["Accounting", "Architecture", "Astronomy", "Business", "Economics", \
              "History", "Law", "Medicine", "Neuroscience", "Physics", "Psychology", \
              "Zoology"]
    undergrad_classes = ["Business", "Architecture", "History", "Accounting", \
                        "Astronomy", "Economics", "Physics", "Pscyhology", "Zoology"]
    grad_classes = ["Law", "Medicine", "Neuroscience", "Accounting", "Astronomy", \
                    "Economics", "Physics", "Pscyhology", "Zoology"]
    summer_classes = ["Astronomy", "Economics", "History", "Medicine", \
                      "Neuroscience", "Physics", "Psychology", "Zoology"]
    
    if class_name in all_majors:
        if is_summer == True and class_name in summer_classes:
            if class_name in undergrad_classes and (class_number >= 1000 and \
                                                    class_number <= 4000):
                return True
            elif class_name in grad_classes and (class_number >= 6000 and \
                                                class_number <= 8000):
                return True
            else:
                return False
        elif is_summer == False:
            if class_name in undergrad_classes and (class_number >= 1000 and \
                                                    class_number <= 4000):
                return True
            elif class_name in grad_classes and (class_number >= 6000 and \
                                                class_number <= 8000):
                return True
            else:
                return False
        else:
            return False
    else:
        return False
    
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, False, False, False, False, False
print(check_class("Law", 6769, is_summer = True))


## Practice problem 9
#The math we typically do is in base 10: adding 10 to one digit
#increments the next digit. Thus, the smallest (furthest right)
#number is the ones digit, the next smallest is the tens digit,
#the next smallest is the hundreds digit, etc. A 5 in the ones
#slot adds 5 to the total; a 5 in the tens slot adds 50 (5 * 10)
#to the total; a 5 in the hundreds slot adds 500 to the total
#(5 * 100), etc.
#
#Hexadecimal is a way of representing a different base, base 16.
#The digits 0 through 9 represent the normal numbers; A is 10,
#B is 11, C is 12, D is 13, E is 14, and F is 15. So, the
#hexadecimal number E is the standard number 14.
#
#Like base 10, hexadecimal has digit places: the ones digit, the
#16s digit, the 256s digit, and the 4096s digit. A 5 in the ones
#spot adds 5 to the total; in the 16s spot it adds 80 to the
#total (5 * 16), in the 256s spot it adds 1280 (5 * 256), and in
#the 4096s spot it adds 20480 (5 * 4096). In 4 digits, base 16
#can represent base 10 numbers up to 65,535 (16^4 - 1).
#
#Write a function called hex_to_decimal. hex_to_decimal will take
#one parameter, a string. You may assume the string will always
#have exactly 4 characters, and that all the characters will be
#a numeral from 0 to 9 or a capital letter from A to F. Return
#result of converting this hexadecimal number to a standard
#base-10 number.


#Add your code here!
def hex_to_decimal(string):
    decimal = 0
    sum = 0
    number = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    for char in string[0]:
        if char in number:
            char = int(char)
        if char == "A":
            char = 10
        if char == "B":
            char = 11
        if char == "C":
            char = 12
        if char == "D":
            char = 13
        if char == "E":
            char = 14
        if char == "F":
            char = 15
        decimal = char * 4096
        sum += decimal
    for char in string[1]:
        if char in number:
            char = int(char)
        if char == "A":
            char = 10
        if char == "B":
            char = 11
        if char == "C":
            char = 12
        if char == "D":
            char = 13
        if char == "E":
            char = 14
        if char == "F":
            char = 15
        decimal = char * 256
        sum += decimal
    for char in string[2]:
        if char in number:
            char = int(char)
        if char == "A":
            char = 10
        if char == "B":
            char = 11
        if char == "C":
            char = 12
        if char == "D":
            char = 13
        if char == "E":
            char = 14
        if char == "F":
            char = 15
        decimal = char * 16
        sum += decimal
    for char in string[3]:
        if char in number:
            char = int(char)
        if char == "A":
            char = 10
        if char == "B":
            char = 11
        if char == "C":
            char = 12
        if char == "D":
            char = 13
        if char == "E":
            char = 14
        if char == "F":
            char = 15
        decimal = char * 1
        sum += decimal
    return sum
    
#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 43690, 65535, 4369, 4660, 17185, 0, 1885.
print(hex_to_decimal("AAAA"))
print(hex_to_decimal("FFFF"))
print(hex_to_decimal("1111"))
print(hex_to_decimal("1234"))
print(hex_to_decimal("4321"))
print(hex_to_decimal("0000"))
print(hex_to_decimal("075D"))


### EXAM ###

score = 500
difficulty_bonus = 1.2
perfect_run = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing the code for a video game. Your code
#calculates the player's final score on a particular level.
#
#The player's original final score is given by the variable
#score. Then, there are a few multipliers or changes that
#can apply:
#
# - The score should be multiplied by the Difficulty Bonus,
#   which could be 1.0, 1.2, 1.4, 1.6, 1.8, or 2.0.
# - If the player achieves a Perfect Run (perfect_run = True),
#   their score (after applying the Difficulty Bonus) is
#   doubled.
# - If the player's original score (before the difficulty
#   bonus and perfect run bonus) exceeds 200 points, then
#   they receive a 200 point High Performer bonus. The
#   Difficulty bonus and Perfect Run multiplier should not
#   be applied to the High Performer bonus, though.
# - Finally, round their score should be cast to an integer
#   in case any decimals were introduced in the process.
#
#For example, with the original values above, the player's
#original score is 500. The Difficulty Bonus is 1.2, and
#500 * 1.2 = 600. They had a Perfect Run, so their score
#is doubled, and 600 * 2 = 1200. Then, their original score
#was over 200, so they receive the 200-point High Performer
#bonus, and 1200 + 200 = 1400. So, their final scoreis 1400.
#
#Print the final score according to this format:
#
#Your final score is: 1400


#Add your code here!
if perfect_run == True:
    final_score = score * difficulty_bonus * 2
    if score > 200:
        final_score += 200
if perfect_run == False:
    final_score = score * difficulty_bonus
    if score > 200:
        final_score += 200

final_score = int(final_score)
print("Your final score is:", final_score)

###

minimum = 2
maximum = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Print the result of multiplying every number from minimum to
#maximum, including both minimum and maximum.
#
#For example, if minimum = 2 and maximum = 5, you would print
#120: 2 * 3 * 4 * 5 = 120.
#
#You may assume minimum will always be less than
#maximum.


#Add your code here!
product = 1

for num in range(minimum, maximum + 1):
    product *= num
print(product)

###

#Write a function called count_factors. count_factors should
#take as input one integer. It should return a count of the
#number of factors that number has. You should not include 1
#or the number itself among its factors.
#
#For example, count_factors(6) would return 2: 6 has two
#factors, 2 and 3.
#
#As a reminder, x is a factory of y if the remainder of
#dividing y by x is 0. In the case of count_factors(6), the
#answer is 2 because 6 % 2 = 0 and 6 % 3 = 0.


#Add your code here!
def count_factors(integer):
    count = 0
    for number in range(2, integer):
        if integer % number == 0:
            count += 1
    return count    


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 2, 0, 2, 6, each on their own line.
print(count_factors(6))
print(count_factors(7))
print(count_factors(8))
print(count_factors(24))

###

#Imagine you're writing the code to support the launch
#of an interstellar spacecraft, which can be launched
#from either earth or one of a number of other
#interstellar bodies. Each such body would have its own
#escape velocity.
#
#Depending on the use case, you may need to provide the
#escape velocity in terms of kilometers per second,
#kilometers per hour, miles per second, or miles per
#hour.
#
#Write a function called escape_velocity. escape_velocity
#should have one positional parameter, escape_velocity.
#escape_velocity represents the escape velocity in terms
#of kilometers per second.
#
#escape_velocity should also have two keyword parameters,
#in_kilometers and in_seconds, in that order. The default
#value for both should be True.
#
#Your function should return the escape velocity, rounded
#to two decimal points, converted to the desired units.
#
#If in_kilometers is False, you should convert the escape
#velocity from kilometers to miles by multiplying by 0.62.
#
#If in_seconds is False, you should convert the escape
#velocity from seconds to hours by multiplying by 3600.
#
#If both are False, you should perform both conversions.
#If both are True, you should return the original number
#rounded to two decimal places.
#
#Hint: Remember, you can round a number to two decimal
#places by using the round function. round(the_num, 2) will
#return the_num rounded to two decimal places.


#Add your code here!
def escape_velocity(escape_velocity, in_kilometers = True, in_seconds = True):
    if in_kilometers == False:
        escape_velocity *= 0.62
    if in_seconds == False:
        escape_velocity *= 3600
    return round(escape_velocity, 2)
    


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#216.61
#134.3
#779796.0
#483473.52
print(escape_velocity(216.61))
print(escape_velocity(216.61, in_kilometers = False))
print(escape_velocity(216.61, in_seconds = False))
print(escape_velocity(216.61, in_kilometers = False, in_seconds = False))

###

a = "Four"
b = "Score"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Attempt to perform the four arithmetic operations (a plus b,
#a minus b, a times b, a divided by b, in that order) between
#a and b and print the result of each on its own line.
#
#If one of the operations cannot work for ANY reason, print
#Error! for that operation instead. You should still print the
#results of the other operations, though.
#
#For any numeric results, round the result to 2 decimal
#places using round(the_num, 2). Note that if the_num is an
#integer, this won't change the number; that's okay! However,
#note that trying to round a string will also cause an error;
#in that case, you would still print the string, not "Error!"
#Only print "Error!" if the error arises from the arithmetic
#operation, not the rounding.
#
#Remember, arithmetic operators still work on some non-numeric
#values: for example, we can multiply a string by an integer,
#add two strings together, or use booleans in mathematical
#expressions.
#
#For example, for the initial values of a and b above, you
#should print:
#Error!    -> we can't add an integer and a string!
#Error!    -> we can't subtract a string from an integer!
#ScoreScoreScoreScore   -> we can multiply a string by an int!
#Error!    -> we can't divide an integer by a string!
#
#If a and b were changed to 4 and 3, you would print:
#7
#1
#12
#1.33


#Add your code here!
def perform_arithmetic(a, b):
    # Addition
    try:
        result = a + b
        try:
            print(round(result, 2))
        except:
            print(result)
    except:
        print("Error!")

    # Subtraction
    try:
        result = a - b
        try:
            print(round(result, 2))
        except:
            print(result)
    except:
        print("Error!")

    # Multiplication
    try:
        result = a * b
        try:
            print(round(result, 2))
        except:
            print(result)
    except:
        print("Error!")

    # Division
    try:
        result = a / b
        try:
            print(round(result, 2))
        except:
            print(result)
    except:
        print("Error!")

perform_arithmetic(a, b)

###

#Every character in Python has what is called an ordinal
#number. The ordinal number is an integer Python uses to
#store what each character should be. For example, the
#ordinal number for a lower-case a is 97. The ordinal number
#for an upper-case A is 65.
#
#To get the ordinal number for any character, you can use
#the ord() function:
#
# the_ord_for_a = ord("a")
# the_ord_for_B = ord("B")
#
#...and so on. ord() must take a string with only one
#character, and it will always return an integer.
#
#Write a function called string_to_ordinals. This function
#should take as input a single parameter, a string.
#
#string_to_ordinals should return a new string made of all
#the ordinal numbers for the characters in the original
#string.
#
#For example, the ordinals for "A", "B", and "C" are 65,
#66, and 67, respectively. So, string_to_ordinals("ABC")
#would return "656667". Or, the ordinals for "x", "y", and
#"z" are 120, 121, and 122, respectively. So,
#string_to_ordinals("xyz") would return "120121122".


#Write your function here!
def string_to_ordinals(a_string):
    result_string = ""
    for char in a_string:
        result_string += str(ord(char))
    return result_string


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#656667
#120121122
#678349514849
#633363336333
#3232323232
print(string_to_ordinals("ABC"))
print(string_to_ordinals("xyz"))
print(string_to_ordinals("CS1301"))
print(string_to_ordinals("?!?!?!"))
print(string_to_ordinals("     "))

###

#Write a function that will calculate the Francine index of
#a number. The Francine Index is a thing I made up for this
#problem, and it is defined as follows:
#
#Start with the number. If the number is a multiple of 3 (e.g.
#3, 6, 9), divide it by 3 (use floor division to keep it as
#an integer). If the number is one more than a multiple of
#three (e.g. 4, 7, 10), add 2 to the number. If the number is
#two more than a multiple of three (e.g. 5, 8, 11), double
#the number.
#
#If you continue repeating this sequence, the number will
#eventually reach either 1 or 2, at which point the sequence
#would repeat either 2-4-6 or 1-3 forever.
#
#For example, imagine we started with the number 50:
#50 is two more than the nearest multiple of 3, so 50 * 2 = 100
#100 is one more than the nearest multiple of 3, so 100 + 2 = 102
#102 is a multiple of 3, so 102 // 3 = 34
#34 is one more than the nearest multiple of 3, so 34 + 2 = 36
#36 is a multiple of 3, so 36 // 3 = 12
#12 is a multiple of 3, so 12 // 3 = 4
#4 is one more the the nearest multiple of 3, so 4 + 2 = 6
#6 is a multiple of 3, so 6 // 3 = 2
#
#Starting with 50, this sequence converges on 2 in 8 iterations:
#50 to 100, 100 to 102, 102 to 34, 34 to 36, 36 to 12, 12 to 4,
#4 to 6, and 6 to 2.
#
#Implement a function called francine. francine should take as
#input an integer, and return the integer's Francine Index;
#that is, the number of iterations it takes for the
#number to reach either 1 or 2 the first time following those rules.
#For example, francine(50) would return 8 because it took 8
#iterations to converge on 2.


#Add your code here!
def francine(number):
    iteration = 0
    while number > 2:
        iteration += 1
        if number % 3 == 0:
            number //= 3
        elif number % 3 == 1:
            number += 2
        elif number % 3 == 2:
            number *= 2
    return(iteration)

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 8, 6, and 10, each on their own lines.
print(francine(50))
print(francine(15))
print(francine(124))

###

#A credit card transaction is defined, at a minimum, by
#the card number, CVV code, and expiration date of a
#credit card. The card provider (Visa, Mastercard,
#American Express, or Discover) can be inferred from
#the number, but we'll have it provided directly.
#
#Write a function called validate_card. validate_card
#should have four positional parameters and one keyword
#parameter. The parameters should be, in this order:
#
# - number: the card number, a 15- or 16-character
#   string.
# - cvv: the verification number, a 3- or 4-character
#   string.
# - expiration_month: an integer from 1 to 12 giving
#   the expiration month.
# - expiration_year: an integer from 22 to 28 giving
#   the expiration year.
# - provider: a string representing the card provider,
#   either "Visa", "MasterCard", "Discover", or
#   "American Express". provider should be a keyword
#   parameter with a default value of "Visa".
#
#You may assume that proper data types will be supplied
#(e.g. we'll never pass an integer for CVV, a string for
#expiration_year, a float for provider, etc.).
#
#Your code should return True if the card information
#represented by these five variables is valid, or False
#if not.
#
#Here are the details to validate about the card info:
# - The card numbers for Visa, MasterCard, and Discover
#   are 16 numbers long. For American Express, card
#   numbers are 15 numbers long.
# - The CVV for Visa, MasterCard, and Discover is 3
#   numbers long. For American Express, the CVV is
#   4 numbers long.
# - For all cards, the card number and CVV are all
#   numerals, no letters or punctuation marks.
# - All expiration months must be between 1 and 12.
# - All expiration years must be between 22 and 28.
# - All providers must be "Visa", "MasterCard",
#   "Discover", or "American Express".
#
#If a card breaks any of these rules, it is invalid,
#and you should return False. If a card follows all of
#these rules, it is valid, and you should return True.


#Write your function here!
def validate_card(number, cvv, expiration_month, expiration_year, provider="Visa"):

    if provider in ["Visa", "MasterCard", "Discover"]:
        if len(number) != 16:
            return False
    elif provider == "American Express":
        if len(number) != 15:
            return False
    else:
        return False

    if provider in ["Visa", "MasterCard", "Discover"]:
        if len(cvv) != 3:
            return False
    elif provider == "American Express":
        if len(cvv) != 4:
            return False
    else:
        return False

    if not number.isdigit() or not cvv.isdigit():
        return False

    if not 1 <= expiration_month <= 12:
        return False

    if not 22 <= expiration_year <= 28:
        return False

    if provider not in ["Visa", "MasterCard", "Discover", "American Express"]:
        return False

    return True
        

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print the values shown in the comments

#True
print(validate_card("1234567890123456", "123", 1, 22))

#True
print(validate_card("1234567890123456", "123", 1, 22, provider = "MasterCard"))

#False (American Express cards have 15 digits, not 16)
print(validate_card("1234567890123456", "123", 1, 22, provider = "American Express"))

#False (Visa cards have 16 digits, not 15)
print(validate_card("123456789012345", "1234", 1, 22))

#True
print(validate_card("123456789012345", "1234", 1, 22, provider = "American Express"))

#False (no card numbers have only 12 digits)
print(validate_card("123456788012", "123", 1, 22))

#False (no cards have 5-digit CVVs)
print(validate_card("1234567890123456", "15062", 1, 22))

#False (no cards have an expiration month of 13)
print(validate_card("1234567890123456", "123", 13, 22))

#False (no cards have an expiration year of 18)
print(validate_card("1234567890123456", "123", 1, 18))

#False (Diner's Club is not a valid provider)
print(validate_card("1234567890123456", "123", 1, 22, provider = "Diner's Club"))

#False (no cards have the letter A in the number)
print(validate_card("123456789A123456", "123", 1, 22))

#False (no cards have letters in the CVV)
print(validate_card("1234567890123456", "ABC", 1, 22))

